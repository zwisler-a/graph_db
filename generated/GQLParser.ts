
import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { GQLListener } from "./GQLListener.js";
import { GQLVisitor } from "./GQLVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class GQLParser extends antlr.Parser {
    public static readonly IMPLIES = 1;
    public static readonly BOOLEAN_LITERAL = 2;
    public static readonly SINGLE_QUOTED_CHARACTER_SEQUENCE = 3;
    public static readonly DOUBLE_QUOTED_CHARACTER_SEQUENCE = 4;
    public static readonly ACCENT_QUOTED_CHARACTER_SEQUENCE = 5;
    public static readonly NO_ESCAPE = 6;
    public static readonly BYTE_STRING_LITERAL = 7;
    public static readonly UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX = 8;
    public static readonly UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX = 9;
    public static readonly UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX = 10;
    public static readonly UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX = 11;
    public static readonly UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX = 12;
    public static readonly UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX = 13;
    public static readonly UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX = 14;
    public static readonly UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX = 15;
    public static readonly UNSIGNED_DECIMAL_INTEGER = 16;
    public static readonly UNSIGNED_HEXADECIMAL_INTEGER = 17;
    public static readonly UNSIGNED_OCTAL_INTEGER = 18;
    public static readonly UNSIGNED_BINARY_INTEGER = 19;
    public static readonly ABS = 20;
    public static readonly ACOS = 21;
    public static readonly ALL = 22;
    public static readonly ALL_DIFFERENT = 23;
    public static readonly AND = 24;
    public static readonly ANY = 25;
    public static readonly ARRAY = 26;
    public static readonly AS = 27;
    public static readonly ASC = 28;
    public static readonly ASCENDING = 29;
    public static readonly ASIN = 30;
    public static readonly AT = 31;
    public static readonly ATAN = 32;
    public static readonly AVG = 33;
    public static readonly BIG = 34;
    public static readonly BIGINT = 35;
    public static readonly BINARY = 36;
    public static readonly BOOL = 37;
    public static readonly BOOLEAN = 38;
    public static readonly BOTH = 39;
    public static readonly BTRIM = 40;
    public static readonly BY = 41;
    public static readonly BYTE_LENGTH = 42;
    public static readonly BYTES = 43;
    public static readonly CALL = 44;
    public static readonly CARDINALITY = 45;
    public static readonly CASE = 46;
    public static readonly CAST = 47;
    public static readonly CEIL = 48;
    public static readonly CEILING = 49;
    public static readonly CHAR = 50;
    public static readonly CHAR_LENGTH = 51;
    public static readonly CHARACTER_LENGTH = 52;
    public static readonly CHARACTERISTICS = 53;
    public static readonly CLOSE = 54;
    public static readonly COALESCE = 55;
    public static readonly COLLECT_LIST = 56;
    public static readonly COMMIT = 57;
    public static readonly COPY = 58;
    public static readonly COS = 59;
    public static readonly COSH = 60;
    public static readonly COT = 61;
    public static readonly COUNT = 62;
    public static readonly CREATE = 63;
    public static readonly CURRENT_DATE = 64;
    public static readonly CURRENT_GRAPH = 65;
    public static readonly CURRENT_PROPERTY_GRAPH = 66;
    public static readonly CURRENT_SCHEMA = 67;
    public static readonly CURRENT_TIME = 68;
    public static readonly CURRENT_TIMESTAMP = 69;
    public static readonly DATE = 70;
    public static readonly DATETIME = 71;
    public static readonly DAY = 72;
    public static readonly DEC = 73;
    public static readonly DECIMAL = 74;
    public static readonly DEGREES = 75;
    public static readonly DELETE = 76;
    public static readonly DESC = 77;
    public static readonly DESCENDING = 78;
    public static readonly DETACH = 79;
    public static readonly DISTINCT = 80;
    public static readonly DOUBLE = 81;
    public static readonly DROP = 82;
    public static readonly DURATION = 83;
    public static readonly DURATION_BETWEEN = 84;
    public static readonly ELEMENT_ID = 85;
    public static readonly ELSE = 86;
    public static readonly END = 87;
    public static readonly EXCEPT = 88;
    public static readonly EXISTS = 89;
    public static readonly EXP = 90;
    public static readonly FILTER = 91;
    public static readonly FINISH = 92;
    public static readonly FLOAT = 93;
    public static readonly FLOAT16 = 94;
    public static readonly FLOAT32 = 95;
    public static readonly FLOAT64 = 96;
    public static readonly FLOAT128 = 97;
    public static readonly FLOAT256 = 98;
    public static readonly FLOOR = 99;
    public static readonly FOR = 100;
    public static readonly FROM = 101;
    public static readonly GROUP = 102;
    public static readonly HAVING = 103;
    public static readonly HOME_GRAPH = 104;
    public static readonly HOME_PROPERTY_GRAPH = 105;
    public static readonly HOME_SCHEMA = 106;
    public static readonly HOUR = 107;
    public static readonly IF = 108;
    public static readonly IN = 109;
    public static readonly INSERT = 110;
    public static readonly INT = 111;
    public static readonly INTEGER = 112;
    public static readonly INT8 = 113;
    public static readonly INTEGER8 = 114;
    public static readonly INT16 = 115;
    public static readonly INTEGER16 = 116;
    public static readonly INT32 = 117;
    public static readonly INTEGER32 = 118;
    public static readonly INT64 = 119;
    public static readonly INTEGER64 = 120;
    public static readonly INT128 = 121;
    public static readonly INTEGER128 = 122;
    public static readonly INT256 = 123;
    public static readonly INTEGER256 = 124;
    public static readonly INTERSECT = 125;
    public static readonly INTERVAL = 126;
    public static readonly IS = 127;
    public static readonly LEADING = 128;
    public static readonly LEFT = 129;
    public static readonly LET = 130;
    public static readonly LIKE = 131;
    public static readonly LIMIT = 132;
    public static readonly LIST = 133;
    public static readonly LN = 134;
    public static readonly LOCAL = 135;
    public static readonly LOCAL_DATETIME = 136;
    public static readonly LOCAL_TIME = 137;
    public static readonly LOCAL_TIMESTAMP = 138;
    public static readonly LOG_KW = 139;
    public static readonly LOG10 = 140;
    public static readonly LOWER = 141;
    public static readonly LTRIM = 142;
    public static readonly MATCH = 143;
    public static readonly MAX = 144;
    public static readonly MIN = 145;
    public static readonly MINUTE = 146;
    public static readonly MOD = 147;
    public static readonly MONTH = 148;
    public static readonly NEXT = 149;
    public static readonly NODETACH = 150;
    public static readonly NORMALIZE = 151;
    public static readonly NOT = 152;
    public static readonly NOTHING = 153;
    public static readonly NULL_KW = 154;
    public static readonly NULLS = 155;
    public static readonly NULLIF = 156;
    public static readonly OCTET_LENGTH = 157;
    public static readonly OF = 158;
    public static readonly OFFSET = 159;
    public static readonly OPTIONAL = 160;
    public static readonly OR = 161;
    public static readonly ORDER = 162;
    public static readonly OTHERWISE = 163;
    public static readonly PARAMETER = 164;
    public static readonly PARAMETERS = 165;
    public static readonly PATH = 166;
    public static readonly PATH_LENGTH = 167;
    public static readonly PATHS = 168;
    public static readonly PERCENTILE_CONT = 169;
    public static readonly PERCENTILE_DISC = 170;
    public static readonly POWER = 171;
    public static readonly PRECISION = 172;
    public static readonly PROPERTY_EXISTS = 173;
    public static readonly RADIANS = 174;
    public static readonly REAL = 175;
    public static readonly RECORD = 176;
    public static readonly REMOVE = 177;
    public static readonly REPLACE = 178;
    public static readonly RESET = 179;
    public static readonly RETURN = 180;
    public static readonly RIGHT = 181;
    public static readonly ROLLBACK = 182;
    public static readonly RTRIM = 183;
    public static readonly SAME = 184;
    public static readonly SCHEMA = 185;
    public static readonly SECOND = 186;
    public static readonly SELECT = 187;
    public static readonly SESSION = 188;
    public static readonly SESSION_USER = 189;
    public static readonly SET = 190;
    public static readonly SIGNED = 191;
    public static readonly SIN = 192;
    public static readonly SINH = 193;
    public static readonly SIZE = 194;
    public static readonly SKIP_RESERVED_WORD = 195;
    public static readonly SMALL = 196;
    public static readonly SMALLINT = 197;
    public static readonly SQRT = 198;
    public static readonly START = 199;
    public static readonly STDDEV_POP = 200;
    public static readonly STDDEV_SAMP = 201;
    public static readonly STRING = 202;
    public static readonly SUM = 203;
    public static readonly TAN = 204;
    public static readonly TANH = 205;
    public static readonly THEN = 206;
    public static readonly TIME = 207;
    public static readonly TIMESTAMP = 208;
    public static readonly TRAILING = 209;
    public static readonly TRIM = 210;
    public static readonly TYPED = 211;
    public static readonly UBIGINT = 212;
    public static readonly UINT = 213;
    public static readonly UINT8 = 214;
    public static readonly UINT16 = 215;
    public static readonly UINT32 = 216;
    public static readonly UINT64 = 217;
    public static readonly UINT128 = 218;
    public static readonly UINT256 = 219;
    public static readonly UNION = 220;
    public static readonly UNSIGNED = 221;
    public static readonly UPPER = 222;
    public static readonly USE = 223;
    public static readonly USMALLINT = 224;
    public static readonly VALUE = 225;
    public static readonly VARBINARY = 226;
    public static readonly VARCHAR = 227;
    public static readonly VARIABLE = 228;
    public static readonly WHEN = 229;
    public static readonly WHERE = 230;
    public static readonly WITH = 231;
    public static readonly XOR = 232;
    public static readonly YEAR = 233;
    public static readonly YIELD = 234;
    public static readonly ZONED = 235;
    public static readonly ZONED_DATETIME = 236;
    public static readonly ZONED_TIME = 237;
    public static readonly ABSTRACT = 238;
    public static readonly AGGREGATE = 239;
    public static readonly AGGREGATES = 240;
    public static readonly ALTER = 241;
    public static readonly CATALOG = 242;
    public static readonly CLEAR = 243;
    public static readonly CLONE = 244;
    public static readonly CONSTRAINT = 245;
    public static readonly CURRENT_ROLE = 246;
    public static readonly CURRENT_USER = 247;
    public static readonly DATA = 248;
    public static readonly DIRECTORY = 249;
    public static readonly DRYRUN = 250;
    public static readonly EXACT = 251;
    public static readonly EXISTING = 252;
    public static readonly FUNCTION = 253;
    public static readonly GQLSTATUS = 254;
    public static readonly GRANT = 255;
    public static readonly INSTANT = 256;
    public static readonly INFINITY_KW = 257;
    public static readonly NUMBER = 258;
    public static readonly NUMERIC = 259;
    public static readonly ON = 260;
    public static readonly OPEN = 261;
    public static readonly PARTITION = 262;
    public static readonly PROCEDURE = 263;
    public static readonly PRODUCT = 264;
    public static readonly PROJECT = 265;
    public static readonly QUERY = 266;
    public static readonly RECORDS = 267;
    public static readonly REFERENCE = 268;
    public static readonly RENAME = 269;
    public static readonly REVOKE = 270;
    public static readonly SUBSTRING = 271;
    public static readonly SYSTEM_USER = 272;
    public static readonly TEMPORAL = 273;
    public static readonly UNIQUE = 274;
    public static readonly UNIT = 275;
    public static readonly VALUES = 276;
    public static readonly ACYCLIC = 277;
    public static readonly BINDING = 278;
    public static readonly BINDINGS = 279;
    public static readonly CONNECTING = 280;
    public static readonly DESTINATION = 281;
    public static readonly DIFFERENT = 282;
    public static readonly DIRECTED = 283;
    public static readonly EDGE = 284;
    public static readonly EDGES = 285;
    public static readonly ELEMENT = 286;
    public static readonly ELEMENTS = 287;
    public static readonly FIRST = 288;
    public static readonly GRAPH = 289;
    public static readonly GROUPS = 290;
    public static readonly KEEP = 291;
    public static readonly LABEL = 292;
    public static readonly LABELED = 293;
    public static readonly LABELS = 294;
    public static readonly LAST = 295;
    public static readonly NFC = 296;
    public static readonly NFD = 297;
    public static readonly NFKC = 298;
    public static readonly NFKD = 299;
    public static readonly NO = 300;
    public static readonly NODE = 301;
    public static readonly NORMALIZED = 302;
    public static readonly ONLY = 303;
    public static readonly ORDINALITY = 304;
    public static readonly PROPERTY = 305;
    public static readonly READ = 306;
    public static readonly RELATIONSHIP = 307;
    public static readonly RELATIONSHIPS = 308;
    public static readonly REPEATABLE = 309;
    public static readonly SHORTEST = 310;
    public static readonly SIMPLE = 311;
    public static readonly SOURCE = 312;
    public static readonly TABLE = 313;
    public static readonly TEMP = 314;
    public static readonly TO = 315;
    public static readonly TRAIL = 316;
    public static readonly TRANSACTION = 317;
    public static readonly TYPE = 318;
    public static readonly UNDIRECTED = 319;
    public static readonly VERTEX = 320;
    public static readonly WALK = 321;
    public static readonly WITHOUT = 322;
    public static readonly WRITE = 323;
    public static readonly ZONE = 324;
    public static readonly REGULAR_IDENTIFIER = 325;
    public static readonly SUBSTITUTED_PARAMETER_REFERENCE = 326;
    public static readonly GENERAL_PARAMETER_REFERENCE = 327;
    public static readonly MULTISET_ALTERNATION_OPERATOR = 328;
    public static readonly BRACKET_RIGHT_ARROW = 329;
    public static readonly BRACKET_TILDE_RIGHT_ARROW = 330;
    public static readonly CONCATENATION_OPERATOR = 331;
    public static readonly DOUBLE_COLON = 332;
    public static readonly DOUBLE_DOLLAR_SIGN = 333;
    public static readonly DOUBLE_PERIOD = 334;
    public static readonly GREATER_THAN_OR_EQUALS_OPERATOR = 335;
    public static readonly LEFT_ARROW = 336;
    public static readonly LEFT_ARROW_TILDE = 337;
    public static readonly LEFT_ARROW_BRACKET = 338;
    public static readonly LEFT_ARROW_TILDE_BRACKET = 339;
    public static readonly LEFT_MINUS_RIGHT = 340;
    public static readonly LEFT_MINUS_SLASH = 341;
    public static readonly LEFT_TILDE_SLASH = 342;
    public static readonly LESS_THAN_OR_EQUALS_OPERATOR = 343;
    public static readonly MINUS_LEFT_BRACKET = 344;
    public static readonly MINUS_SLASH = 345;
    public static readonly NOT_EQUALS_OPERATOR = 346;
    public static readonly RIGHT_ARROW = 347;
    public static readonly RIGHT_BRACKET_MINUS = 348;
    public static readonly RIGHT_BRACKET_TILDE = 349;
    public static readonly RIGHT_DOUBLE_ARROW = 350;
    public static readonly SLASH_MINUS = 351;
    public static readonly SLASH_MINUS_RIGHT = 352;
    public static readonly SLASH_TILDE = 353;
    public static readonly SLASH_TILDE_RIGHT = 354;
    public static readonly TILDE_LEFT_BRACKET = 355;
    public static readonly TILDE_RIGHT_ARROW = 356;
    public static readonly TILDE_SLASH = 357;
    public static readonly AMPERSAND = 358;
    public static readonly ASTERISK = 359;
    public static readonly COLON = 360;
    public static readonly COMMA = 361;
    public static readonly COMMERCIAL_AT = 362;
    public static readonly DOLLAR_SIGN = 363;
    public static readonly DOUBLE_QUOTE = 364;
    public static readonly EQUALS_OPERATOR = 365;
    public static readonly EXCLAMATION_MARK = 366;
    public static readonly RIGHT_ANGLE_BRACKET = 367;
    public static readonly GRAVE_ACCENT = 368;
    public static readonly LEFT_BRACE = 369;
    public static readonly LEFT_BRACKET = 370;
    public static readonly LEFT_PAREN = 371;
    public static readonly LEFT_ANGLE_BRACKET = 372;
    public static readonly MINUS_SIGN = 373;
    public static readonly PERCENT = 374;
    public static readonly PERIOD = 375;
    public static readonly PLUS_SIGN = 376;
    public static readonly QUESTION_MARK = 377;
    public static readonly QUOTE = 378;
    public static readonly REVERSE_SOLIDUS = 379;
    public static readonly RIGHT_BRACE = 380;
    public static readonly RIGHT_BRACKET = 381;
    public static readonly RIGHT_PAREN = 382;
    public static readonly SOLIDUS = 383;
    public static readonly TILDE = 384;
    public static readonly UNDERSCORE = 385;
    public static readonly VERTICAL_BAR = 386;
    public static readonly SP = 387;
    public static readonly WHITESPACE = 388;
    public static readonly BRACKETED_COMMENT = 389;
    public static readonly SIMPLE_COMMENT_SOLIDUS = 390;
    public static readonly SIMPLE_COMMENT_MINUS = 391;
    public static readonly RULE_gqlProgram = 0;
    public static readonly RULE_programActivity = 1;
    public static readonly RULE_sessionActivity = 2;
    public static readonly RULE_transactionActivity = 3;
    public static readonly RULE_endTransactionCommand = 4;
    public static readonly RULE_sessionSetCommand = 5;
    public static readonly RULE_sessionSetSchemaClause = 6;
    public static readonly RULE_sessionSetGraphClause = 7;
    public static readonly RULE_sessionSetTimeZoneClause = 8;
    public static readonly RULE_setTimeZoneValue = 9;
    public static readonly RULE_sessionSetParameterClause = 10;
    public static readonly RULE_sessionSetGraphParameterClause = 11;
    public static readonly RULE_sessionSetBindingTableParameterClause = 12;
    public static readonly RULE_sessionSetValueParameterClause = 13;
    public static readonly RULE_sessionSetParameterName = 14;
    public static readonly RULE_sessionResetCommand = 15;
    public static readonly RULE_sessionResetArguments = 16;
    public static readonly RULE_sessionCloseCommand = 17;
    public static readonly RULE_sessionParameterSpecification = 18;
    public static readonly RULE_startTransactionCommand = 19;
    public static readonly RULE_transactionCharacteristics = 20;
    public static readonly RULE_transactionMode = 21;
    public static readonly RULE_transactionAccessMode = 22;
    public static readonly RULE_rollbackCommand = 23;
    public static readonly RULE_commitCommand = 24;
    public static readonly RULE_nestedProcedureSpecification = 25;
    public static readonly RULE_procedureSpecification = 26;
    public static readonly RULE_nestedDataModifyingProcedureSpecification = 27;
    public static readonly RULE_nestedQuerySpecification = 28;
    public static readonly RULE_procedureBody = 29;
    public static readonly RULE_bindingVariableDefinitionBlock = 30;
    public static readonly RULE_bindingVariableDefinition = 31;
    public static readonly RULE_statementBlock = 32;
    public static readonly RULE_statement = 33;
    public static readonly RULE_nextStatement = 34;
    public static readonly RULE_graphVariableDefinition = 35;
    public static readonly RULE_optTypedGraphInitializer = 36;
    public static readonly RULE_graphInitializer = 37;
    public static readonly RULE_bindingTableVariableDefinition = 38;
    public static readonly RULE_optTypedBindingTableInitializer = 39;
    public static readonly RULE_bindingTableInitializer = 40;
    public static readonly RULE_valueVariableDefinition = 41;
    public static readonly RULE_optTypedValueInitializer = 42;
    public static readonly RULE_valueInitializer = 43;
    public static readonly RULE_graphExpression = 44;
    public static readonly RULE_currentGraph = 45;
    public static readonly RULE_bindingTableExpression = 46;
    public static readonly RULE_nestedBindingTableQuerySpecification = 47;
    public static readonly RULE_objectExpressionPrimary = 48;
    public static readonly RULE_linearCatalogModifyingStatement = 49;
    public static readonly RULE_simpleCatalogModifyingStatement = 50;
    public static readonly RULE_primitiveCatalogModifyingStatement = 51;
    public static readonly RULE_createSchemaStatement = 52;
    public static readonly RULE_dropSchemaStatement = 53;
    public static readonly RULE_createGraphStatement = 54;
    public static readonly RULE_openGraphType = 55;
    public static readonly RULE_ofGraphType = 56;
    public static readonly RULE_graphTypeLikeGraph = 57;
    public static readonly RULE_graphSource = 58;
    public static readonly RULE_dropGraphStatement = 59;
    public static readonly RULE_createGraphTypeStatement = 60;
    public static readonly RULE_graphTypeSource = 61;
    public static readonly RULE_copyOfGraphType = 62;
    public static readonly RULE_dropGraphTypeStatement = 63;
    public static readonly RULE_callCatalogModifyingProcedureStatement = 64;
    public static readonly RULE_linearDataModifyingStatement = 65;
    public static readonly RULE_focusedLinearDataModifyingStatement = 66;
    public static readonly RULE_focusedLinearDataModifyingStatementBody = 67;
    public static readonly RULE_focusedNestedDataModifyingProcedureSpecification = 68;
    public static readonly RULE_ambientLinearDataModifyingStatement = 69;
    public static readonly RULE_ambientLinearDataModifyingStatementBody = 70;
    public static readonly RULE_simpleLinearDataAccessingStatement = 71;
    public static readonly RULE_simpleDataAccessingStatement = 72;
    public static readonly RULE_simpleDataModifyingStatement = 73;
    public static readonly RULE_primitiveDataModifyingStatement = 74;
    public static readonly RULE_insertStatement = 75;
    public static readonly RULE_setStatement = 76;
    public static readonly RULE_setItemList = 77;
    public static readonly RULE_setItem = 78;
    public static readonly RULE_setPropertyItem = 79;
    public static readonly RULE_setAllPropertiesItem = 80;
    public static readonly RULE_setLabelItem = 81;
    public static readonly RULE_removeStatement = 82;
    public static readonly RULE_removeItemList = 83;
    public static readonly RULE_removeItem = 84;
    public static readonly RULE_removePropertyItem = 85;
    public static readonly RULE_removeLabelItem = 86;
    public static readonly RULE_deleteStatement = 87;
    public static readonly RULE_deleteItemList = 88;
    public static readonly RULE_deleteItem = 89;
    public static readonly RULE_callDataModifyingProcedureStatement = 90;
    public static readonly RULE_compositeQueryStatement = 91;
    public static readonly RULE_compositeQueryExpression = 92;
    public static readonly RULE_queryConjunction = 93;
    public static readonly RULE_setOperator = 94;
    public static readonly RULE_compositeQueryPrimary = 95;
    public static readonly RULE_linearQueryStatement = 96;
    public static readonly RULE_focusedLinearQueryStatement = 97;
    public static readonly RULE_focusedLinearQueryStatementPart = 98;
    public static readonly RULE_focusedLinearQueryAndPrimitiveResultStatementPart = 99;
    public static readonly RULE_focusedPrimitiveResultStatement = 100;
    public static readonly RULE_focusedNestedQuerySpecification = 101;
    public static readonly RULE_ambientLinearQueryStatement = 102;
    public static readonly RULE_simpleLinearQueryStatement = 103;
    public static readonly RULE_simpleQueryStatement = 104;
    public static readonly RULE_primitiveQueryStatement = 105;
    public static readonly RULE_matchStatement = 106;
    public static readonly RULE_simpleMatchStatement = 107;
    public static readonly RULE_optionalMatchStatement = 108;
    public static readonly RULE_optionalOperand = 109;
    public static readonly RULE_matchStatementBlock = 110;
    public static readonly RULE_callQueryStatement = 111;
    public static readonly RULE_filterStatement = 112;
    public static readonly RULE_letStatement = 113;
    public static readonly RULE_letVariableDefinitionList = 114;
    public static readonly RULE_letVariableDefinition = 115;
    public static readonly RULE_forStatement = 116;
    public static readonly RULE_forItem = 117;
    public static readonly RULE_forItemAlias = 118;
    public static readonly RULE_forItemSource = 119;
    public static readonly RULE_forOrdinalityOrOffset = 120;
    public static readonly RULE_orderByAndPageStatement = 121;
    public static readonly RULE_primitiveResultStatement = 122;
    public static readonly RULE_returnStatement = 123;
    public static readonly RULE_returnStatementBody = 124;
    public static readonly RULE_returnItemList = 125;
    public static readonly RULE_returnItem = 126;
    public static readonly RULE_returnItemAlias = 127;
    public static readonly RULE_selectStatement = 128;
    public static readonly RULE_selectItemList = 129;
    public static readonly RULE_selectItem = 130;
    public static readonly RULE_selectItemAlias = 131;
    public static readonly RULE_havingClause = 132;
    public static readonly RULE_selectStatementBody = 133;
    public static readonly RULE_selectGraphMatchList = 134;
    public static readonly RULE_selectGraphMatch = 135;
    public static readonly RULE_selectQuerySpecification = 136;
    public static readonly RULE_callProcedureStatement = 137;
    public static readonly RULE_procedureCall = 138;
    public static readonly RULE_inlineProcedureCall = 139;
    public static readonly RULE_variableScopeClause = 140;
    public static readonly RULE_bindingVariableReferenceList = 141;
    public static readonly RULE_namedProcedureCall = 142;
    public static readonly RULE_procedureArgumentList = 143;
    public static readonly RULE_procedureArgument = 144;
    public static readonly RULE_atSchemaClause = 145;
    public static readonly RULE_useGraphClause = 146;
    public static readonly RULE_graphPatternBindingTable = 147;
    public static readonly RULE_graphPatternYieldClause = 148;
    public static readonly RULE_graphPatternYieldItemList = 149;
    public static readonly RULE_graphPatternYieldItem = 150;
    public static readonly RULE_graphPattern = 151;
    public static readonly RULE_matchMode = 152;
    public static readonly RULE_repeatableElementsMatchMode = 153;
    public static readonly RULE_differentEdgesMatchMode = 154;
    public static readonly RULE_elementBindingsOrElements = 155;
    public static readonly RULE_edgeBindingsOrEdges = 156;
    public static readonly RULE_pathPatternList = 157;
    public static readonly RULE_pathPattern = 158;
    public static readonly RULE_pathVariableDeclaration = 159;
    public static readonly RULE_keepClause = 160;
    public static readonly RULE_graphPatternWhereClause = 161;
    public static readonly RULE_insertGraphPattern = 162;
    public static readonly RULE_insertPathPatternList = 163;
    public static readonly RULE_insertPathPattern = 164;
    public static readonly RULE_insertNodePattern = 165;
    public static readonly RULE_insertEdgePattern = 166;
    public static readonly RULE_insertEdgePointingLeft = 167;
    public static readonly RULE_insertEdgePointingRight = 168;
    public static readonly RULE_insertEdgeUndirected = 169;
    public static readonly RULE_insertElementPatternFiller = 170;
    public static readonly RULE_labelAndPropertySetSpecification = 171;
    public static readonly RULE_pathPatternPrefix = 172;
    public static readonly RULE_pathModePrefix = 173;
    public static readonly RULE_pathMode = 174;
    public static readonly RULE_pathSearchPrefix = 175;
    public static readonly RULE_allPathSearch = 176;
    public static readonly RULE_pathOrPaths = 177;
    public static readonly RULE_anyPathSearch = 178;
    public static readonly RULE_numberOfPaths = 179;
    public static readonly RULE_shortestPathSearch = 180;
    public static readonly RULE_allShortestPathSearch = 181;
    public static readonly RULE_anyShortestPathSearch = 182;
    public static readonly RULE_countedShortestPathSearch = 183;
    public static readonly RULE_countedShortestGroupSearch = 184;
    public static readonly RULE_numberOfGroups = 185;
    public static readonly RULE_pathPatternExpression = 186;
    public static readonly RULE_pathTerm = 187;
    public static readonly RULE_pathFactor = 188;
    public static readonly RULE_pathPrimary = 189;
    public static readonly RULE_elementPattern = 190;
    public static readonly RULE_nodePattern = 191;
    public static readonly RULE_elementPatternFiller = 192;
    public static readonly RULE_elementVariableDeclaration = 193;
    public static readonly RULE_isLabelExpression = 194;
    public static readonly RULE_isOrColon = 195;
    public static readonly RULE_elementPatternPredicate = 196;
    public static readonly RULE_elementPatternWhereClause = 197;
    public static readonly RULE_elementPropertySpecification = 198;
    public static readonly RULE_propertyKeyValuePairList = 199;
    public static readonly RULE_propertyKeyValuePair = 200;
    public static readonly RULE_edgePattern = 201;
    public static readonly RULE_fullEdgePattern = 202;
    public static readonly RULE_fullEdgePointingLeft = 203;
    public static readonly RULE_fullEdgeUndirected = 204;
    public static readonly RULE_fullEdgePointingRight = 205;
    public static readonly RULE_fullEdgeLeftOrUndirected = 206;
    public static readonly RULE_fullEdgeUndirectedOrRight = 207;
    public static readonly RULE_fullEdgeLeftOrRight = 208;
    public static readonly RULE_fullEdgeAnyDirection = 209;
    public static readonly RULE_abbreviatedEdgePattern = 210;
    public static readonly RULE_parenthesizedPathPatternExpression = 211;
    public static readonly RULE_subpathVariableDeclaration = 212;
    public static readonly RULE_parenthesizedPathPatternWhereClause = 213;
    public static readonly RULE_labelExpression = 214;
    public static readonly RULE_pathVariableReference = 215;
    public static readonly RULE_elementVariableReference = 216;
    public static readonly RULE_graphPatternQuantifier = 217;
    public static readonly RULE_fixedQuantifier = 218;
    public static readonly RULE_generalQuantifier = 219;
    public static readonly RULE_lowerBound = 220;
    public static readonly RULE_upperBound = 221;
    public static readonly RULE_simplifiedPathPatternExpression = 222;
    public static readonly RULE_simplifiedDefaultingLeft = 223;
    public static readonly RULE_simplifiedDefaultingUndirected = 224;
    public static readonly RULE_simplifiedDefaultingRight = 225;
    public static readonly RULE_simplifiedDefaultingLeftOrUndirected = 226;
    public static readonly RULE_simplifiedDefaultingUndirectedOrRight = 227;
    public static readonly RULE_simplifiedDefaultingLeftOrRight = 228;
    public static readonly RULE_simplifiedDefaultingAnyDirection = 229;
    public static readonly RULE_simplifiedContents = 230;
    public static readonly RULE_simplifiedPathUnion = 231;
    public static readonly RULE_simplifiedMultisetAlternation = 232;
    public static readonly RULE_simplifiedTerm = 233;
    public static readonly RULE_simplifiedFactorLow = 234;
    public static readonly RULE_simplifiedFactorHigh = 235;
    public static readonly RULE_simplifiedQuantified = 236;
    public static readonly RULE_simplifiedQuestioned = 237;
    public static readonly RULE_simplifiedTertiary = 238;
    public static readonly RULE_simplifiedDirectionOverride = 239;
    public static readonly RULE_simplifiedOverrideLeft = 240;
    public static readonly RULE_simplifiedOverrideUndirected = 241;
    public static readonly RULE_simplifiedOverrideRight = 242;
    public static readonly RULE_simplifiedOverrideLeftOrUndirected = 243;
    public static readonly RULE_simplifiedOverrideUndirectedOrRight = 244;
    public static readonly RULE_simplifiedOverrideLeftOrRight = 245;
    public static readonly RULE_simplifiedOverrideAnyDirection = 246;
    public static readonly RULE_simplifiedSecondary = 247;
    public static readonly RULE_simplifiedNegation = 248;
    public static readonly RULE_simplifiedPrimary = 249;
    public static readonly RULE_whereClause = 250;
    public static readonly RULE_yieldClause = 251;
    public static readonly RULE_yieldItemList = 252;
    public static readonly RULE_yieldItem = 253;
    public static readonly RULE_yieldItemName = 254;
    public static readonly RULE_yieldItemAlias = 255;
    public static readonly RULE_groupByClause = 256;
    public static readonly RULE_groupingElementList = 257;
    public static readonly RULE_groupingElement = 258;
    public static readonly RULE_emptyGroupingSet = 259;
    public static readonly RULE_orderByClause = 260;
    public static readonly RULE_sortSpecificationList = 261;
    public static readonly RULE_sortSpecification = 262;
    public static readonly RULE_sortKey = 263;
    public static readonly RULE_orderingSpecification = 264;
    public static readonly RULE_nullOrdering = 265;
    public static readonly RULE_limitClause = 266;
    public static readonly RULE_offsetClause = 267;
    public static readonly RULE_offsetSynonym = 268;
    public static readonly RULE_schemaReference = 269;
    public static readonly RULE_absoluteCatalogSchemaReference = 270;
    public static readonly RULE_catalogSchemaParentAndName = 271;
    public static readonly RULE_relativeCatalogSchemaReference = 272;
    public static readonly RULE_predefinedSchemaReference = 273;
    public static readonly RULE_absoluteDirectoryPath = 274;
    public static readonly RULE_relativeDirectoryPath = 275;
    public static readonly RULE_simpleDirectoryPath = 276;
    public static readonly RULE_graphReference = 277;
    public static readonly RULE_catalogGraphParentAndName = 278;
    public static readonly RULE_homeGraph = 279;
    public static readonly RULE_graphTypeReference = 280;
    public static readonly RULE_catalogGraphTypeParentAndName = 281;
    public static readonly RULE_bindingTableReference = 282;
    public static readonly RULE_procedureReference = 283;
    public static readonly RULE_catalogProcedureParentAndName = 284;
    public static readonly RULE_catalogObjectParentReference = 285;
    public static readonly RULE_referenceParameterSpecification = 286;
    public static readonly RULE_nestedGraphTypeSpecification = 287;
    public static readonly RULE_graphTypeSpecificationBody = 288;
    public static readonly RULE_elementTypeList = 289;
    public static readonly RULE_elementTypeSpecification = 290;
    public static readonly RULE_nodeTypeSpecification = 291;
    public static readonly RULE_nodeTypePattern = 292;
    public static readonly RULE_nodeTypePhrase = 293;
    public static readonly RULE_nodeTypePhraseFiller = 294;
    public static readonly RULE_nodeTypeFiller = 295;
    public static readonly RULE_localNodeTypeAlias = 296;
    public static readonly RULE_nodeTypeImpliedContent = 297;
    public static readonly RULE_nodeTypeKeyLabelSet = 298;
    public static readonly RULE_nodeTypeLabelSet = 299;
    public static readonly RULE_nodeTypePropertyTypes = 300;
    public static readonly RULE_edgeTypeSpecification = 301;
    public static readonly RULE_edgeTypePattern = 302;
    public static readonly RULE_edgeTypePhrase = 303;
    public static readonly RULE_edgeTypePhraseFiller = 304;
    public static readonly RULE_edgeTypeFiller = 305;
    public static readonly RULE_edgeTypeImpliedContent = 306;
    public static readonly RULE_edgeTypeKeyLabelSet = 307;
    public static readonly RULE_edgeTypeLabelSet = 308;
    public static readonly RULE_edgeTypePropertyTypes = 309;
    public static readonly RULE_edgeTypePatternDirected = 310;
    public static readonly RULE_edgeTypePatternPointingRight = 311;
    public static readonly RULE_edgeTypePatternPointingLeft = 312;
    public static readonly RULE_edgeTypePatternUndirected = 313;
    public static readonly RULE_arcTypePointingRight = 314;
    public static readonly RULE_arcTypePointingLeft = 315;
    public static readonly RULE_arcTypeUndirected = 316;
    public static readonly RULE_sourceNodeTypeReference = 317;
    public static readonly RULE_destinationNodeTypeReference = 318;
    public static readonly RULE_edgeKind = 319;
    public static readonly RULE_endpointPairPhrase = 320;
    public static readonly RULE_endpointPair = 321;
    public static readonly RULE_endpointPairDirected = 322;
    public static readonly RULE_endpointPairPointingRight = 323;
    public static readonly RULE_endpointPairPointingLeft = 324;
    public static readonly RULE_endpointPairUndirected = 325;
    public static readonly RULE_connectorPointingRight = 326;
    public static readonly RULE_connectorUndirected = 327;
    public static readonly RULE_sourceNodeTypeAlias = 328;
    public static readonly RULE_destinationNodeTypeAlias = 329;
    public static readonly RULE_labelSetPhrase = 330;
    public static readonly RULE_labelSetSpecification = 331;
    public static readonly RULE_propertyTypesSpecification = 332;
    public static readonly RULE_propertyTypeList = 333;
    public static readonly RULE_propertyType = 334;
    public static readonly RULE_propertyValueType = 335;
    public static readonly RULE_bindingTableType = 336;
    public static readonly RULE_valueType = 337;
    public static readonly RULE_typed = 338;
    public static readonly RULE_predefinedType = 339;
    public static readonly RULE_booleanType = 340;
    public static readonly RULE_characterStringType = 341;
    public static readonly RULE_byteStringType = 342;
    public static readonly RULE_minLength = 343;
    public static readonly RULE_maxLength = 344;
    public static readonly RULE_fixedLength = 345;
    public static readonly RULE_numericType = 346;
    public static readonly RULE_exactNumericType = 347;
    public static readonly RULE_binaryExactNumericType = 348;
    public static readonly RULE_signedBinaryExactNumericType = 349;
    public static readonly RULE_unsignedBinaryExactNumericType = 350;
    public static readonly RULE_verboseBinaryExactNumericType = 351;
    public static readonly RULE_decimalExactNumericType = 352;
    public static readonly RULE_precision = 353;
    public static readonly RULE_scale = 354;
    public static readonly RULE_approximateNumericType = 355;
    public static readonly RULE_temporalType = 356;
    public static readonly RULE_temporalInstantType = 357;
    public static readonly RULE_datetimeType = 358;
    public static readonly RULE_localdatetimeType = 359;
    public static readonly RULE_dateType = 360;
    public static readonly RULE_timeType = 361;
    public static readonly RULE_localtimeType = 362;
    public static readonly RULE_temporalDurationType = 363;
    public static readonly RULE_temporalDurationQualifier = 364;
    public static readonly RULE_referenceValueType = 365;
    public static readonly RULE_immaterialValueType = 366;
    public static readonly RULE_nullType = 367;
    public static readonly RULE_emptyType = 368;
    public static readonly RULE_graphReferenceValueType = 369;
    public static readonly RULE_closedGraphReferenceValueType = 370;
    public static readonly RULE_openGraphReferenceValueType = 371;
    public static readonly RULE_bindingTableReferenceValueType = 372;
    public static readonly RULE_nodeReferenceValueType = 373;
    public static readonly RULE_closedNodeReferenceValueType = 374;
    public static readonly RULE_openNodeReferenceValueType = 375;
    public static readonly RULE_edgeReferenceValueType = 376;
    public static readonly RULE_closedEdgeReferenceValueType = 377;
    public static readonly RULE_openEdgeReferenceValueType = 378;
    public static readonly RULE_pathValueType = 379;
    public static readonly RULE_listValueTypeName = 380;
    public static readonly RULE_listValueTypeNameSynonym = 381;
    public static readonly RULE_recordType = 382;
    public static readonly RULE_fieldTypesSpecification = 383;
    public static readonly RULE_fieldTypeList = 384;
    public static readonly RULE_notNull = 385;
    public static readonly RULE_fieldType = 386;
    public static readonly RULE_searchCondition = 387;
    public static readonly RULE_predicate = 388;
    public static readonly RULE_compOp = 389;
    public static readonly RULE_existsPredicate = 390;
    public static readonly RULE_nullPredicate = 391;
    public static readonly RULE_nullPredicatePart2 = 392;
    public static readonly RULE_valueTypePredicate = 393;
    public static readonly RULE_valueTypePredicatePart2 = 394;
    public static readonly RULE_normalizedPredicatePart2 = 395;
    public static readonly RULE_directedPredicate = 396;
    public static readonly RULE_directedPredicatePart2 = 397;
    public static readonly RULE_labeledPredicate = 398;
    public static readonly RULE_labeledPredicatePart2 = 399;
    public static readonly RULE_isLabeledOrColon = 400;
    public static readonly RULE_sourceDestinationPredicate = 401;
    public static readonly RULE_nodeReference = 402;
    public static readonly RULE_sourcePredicatePart2 = 403;
    public static readonly RULE_destinationPredicatePart2 = 404;
    public static readonly RULE_edgeReference = 405;
    public static readonly RULE_all_differentPredicate = 406;
    public static readonly RULE_samePredicate = 407;
    public static readonly RULE_property_existsPredicate = 408;
    public static readonly RULE_valueExpression = 409;
    public static readonly RULE_valueFunction = 410;
    public static readonly RULE_booleanValueExpression = 411;
    public static readonly RULE_characterOrByteStringFunction = 412;
    public static readonly RULE_subCharacterOrByteString = 413;
    public static readonly RULE_trimSingleCharacterOrByteString = 414;
    public static readonly RULE_foldCharacterString = 415;
    public static readonly RULE_trimMultiCharacterCharacterString = 416;
    public static readonly RULE_normalizeCharacterString = 417;
    public static readonly RULE_nodeReferenceValueExpression = 418;
    public static readonly RULE_edgeReferenceValueExpression = 419;
    public static readonly RULE_aggregatingValueExpression = 420;
    public static readonly RULE_valueExpressionPrimary = 421;
    public static readonly RULE_parenthesizedValueExpression = 422;
    public static readonly RULE_nonParenthesizedValueExpressionPrimary = 423;
    public static readonly RULE_nonParenthesizedValueExpressionPrimarySpecialCase = 424;
    public static readonly RULE_unsignedValueSpecification = 425;
    public static readonly RULE_nonNegativeIntegerSpecification = 426;
    public static readonly RULE_generalValueSpecification = 427;
    public static readonly RULE_dynamicParameterSpecification = 428;
    public static readonly RULE_letValueExpression = 429;
    public static readonly RULE_valueQueryExpression = 430;
    public static readonly RULE_caseExpression = 431;
    public static readonly RULE_caseAbbreviation = 432;
    public static readonly RULE_caseSpecification = 433;
    public static readonly RULE_simpleCase = 434;
    public static readonly RULE_searchedCase = 435;
    public static readonly RULE_simpleWhenClause = 436;
    public static readonly RULE_searchedWhenClause = 437;
    public static readonly RULE_elseClause = 438;
    public static readonly RULE_caseOperand = 439;
    public static readonly RULE_whenOperandList = 440;
    public static readonly RULE_whenOperand = 441;
    public static readonly RULE_result = 442;
    public static readonly RULE_resultExpression = 443;
    public static readonly RULE_castSpecification = 444;
    public static readonly RULE_castOperand = 445;
    public static readonly RULE_castTarget = 446;
    public static readonly RULE_aggregateFunction = 447;
    public static readonly RULE_generalSetFunction = 448;
    public static readonly RULE_binarySetFunction = 449;
    public static readonly RULE_generalSetFunctionType = 450;
    public static readonly RULE_setQuantifier = 451;
    public static readonly RULE_binarySetFunctionType = 452;
    public static readonly RULE_dependentValueExpression = 453;
    public static readonly RULE_independentValueExpression = 454;
    public static readonly RULE_element_idFunction = 455;
    public static readonly RULE_bindingVariableReference = 456;
    public static readonly RULE_pathValueExpression = 457;
    public static readonly RULE_pathValueConstructor = 458;
    public static readonly RULE_pathValueConstructorByEnumeration = 459;
    public static readonly RULE_pathElementList = 460;
    public static readonly RULE_pathElementListStart = 461;
    public static readonly RULE_pathElementListStep = 462;
    public static readonly RULE_listValueExpression = 463;
    public static readonly RULE_listValueFunction = 464;
    public static readonly RULE_trimListFunction = 465;
    public static readonly RULE_elementsFunction = 466;
    public static readonly RULE_listValueConstructor = 467;
    public static readonly RULE_listValueConstructorByEnumeration = 468;
    public static readonly RULE_listElementList = 469;
    public static readonly RULE_listElement = 470;
    public static readonly RULE_recordConstructor = 471;
    public static readonly RULE_fieldsSpecification = 472;
    public static readonly RULE_fieldList = 473;
    public static readonly RULE_field = 474;
    public static readonly RULE_truthValue = 475;
    public static readonly RULE_numericValueExpression = 476;
    public static readonly RULE_numericValueFunction = 477;
    public static readonly RULE_lengthExpression = 478;
    public static readonly RULE_cardinalityExpression = 479;
    public static readonly RULE_cardinalityExpressionArgument = 480;
    public static readonly RULE_charLengthExpression = 481;
    public static readonly RULE_byteLengthExpression = 482;
    public static readonly RULE_pathLengthExpression = 483;
    public static readonly RULE_absoluteValueExpression = 484;
    public static readonly RULE_modulusExpression = 485;
    public static readonly RULE_numericValueExpressionDividend = 486;
    public static readonly RULE_numericValueExpressionDivisor = 487;
    public static readonly RULE_trigonometricFunction = 488;
    public static readonly RULE_trigonometricFunctionName = 489;
    public static readonly RULE_generalLogarithmFunction = 490;
    public static readonly RULE_generalLogarithmBase = 491;
    public static readonly RULE_generalLogarithmArgument = 492;
    public static readonly RULE_commonLogarithm = 493;
    public static readonly RULE_naturalLogarithm = 494;
    public static readonly RULE_exponentialFunction = 495;
    public static readonly RULE_powerFunction = 496;
    public static readonly RULE_numericValueExpressionBase = 497;
    public static readonly RULE_numericValueExpressionExponent = 498;
    public static readonly RULE_squareRoot = 499;
    public static readonly RULE_floorFunction = 500;
    public static readonly RULE_ceilingFunction = 501;
    public static readonly RULE_characterStringValueExpression = 502;
    public static readonly RULE_byteStringValueExpression = 503;
    public static readonly RULE_trimOperands = 504;
    public static readonly RULE_trimCharacterOrByteStringSource = 505;
    public static readonly RULE_trimSpecification = 506;
    public static readonly RULE_trimCharacterOrByteString = 507;
    public static readonly RULE_normalForm = 508;
    public static readonly RULE_stringLength = 509;
    public static readonly RULE_datetimeValueExpression = 510;
    public static readonly RULE_datetimeValueFunction = 511;
    public static readonly RULE_dateFunction = 512;
    public static readonly RULE_timeFunction = 513;
    public static readonly RULE_localtimeFunction = 514;
    public static readonly RULE_datetimeFunction = 515;
    public static readonly RULE_localdatetimeFunction = 516;
    public static readonly RULE_dateFunctionParameters = 517;
    public static readonly RULE_timeFunctionParameters = 518;
    public static readonly RULE_datetimeFunctionParameters = 519;
    public static readonly RULE_durationValueExpression = 520;
    public static readonly RULE_datetimeSubtraction = 521;
    public static readonly RULE_datetimeSubtractionParameters = 522;
    public static readonly RULE_datetimeValueExpression1 = 523;
    public static readonly RULE_datetimeValueExpression2 = 524;
    public static readonly RULE_durationValueFunction = 525;
    public static readonly RULE_durationFunction = 526;
    public static readonly RULE_durationFunctionParameters = 527;
    public static readonly RULE_objectName = 528;
    public static readonly RULE_objectNameOrBindingVariable = 529;
    public static readonly RULE_directoryName = 530;
    public static readonly RULE_schemaName = 531;
    public static readonly RULE_graphName = 532;
    public static readonly RULE_delimitedGraphName = 533;
    public static readonly RULE_graphTypeName = 534;
    public static readonly RULE_nodeTypeName = 535;
    public static readonly RULE_edgeTypeName = 536;
    public static readonly RULE_bindingTableName = 537;
    public static readonly RULE_delimitedBindingTableName = 538;
    public static readonly RULE_procedureName = 539;
    public static readonly RULE_labelName = 540;
    public static readonly RULE_propertyName = 541;
    public static readonly RULE_fieldName = 542;
    public static readonly RULE_elementVariable = 543;
    public static readonly RULE_pathVariable = 544;
    public static readonly RULE_subpathVariable = 545;
    public static readonly RULE_bindingVariable = 546;
    public static readonly RULE_unsignedLiteral = 547;
    public static readonly RULE_generalLiteral = 548;
    public static readonly RULE_temporalLiteral = 549;
    public static readonly RULE_dateLiteral = 550;
    public static readonly RULE_timeLiteral = 551;
    public static readonly RULE_datetimeLiteral = 552;
    public static readonly RULE_listLiteral = 553;
    public static readonly RULE_recordLiteral = 554;
    public static readonly RULE_identifier = 555;
    public static readonly RULE_regularIdentifier = 556;
    public static readonly RULE_timeZoneString = 557;
    public static readonly RULE_characterStringLiteral = 558;
    public static readonly RULE_unsignedNumericLiteral = 559;
    public static readonly RULE_exactNumericLiteral = 560;
    public static readonly RULE_approximateNumericLiteral = 561;
    public static readonly RULE_unsignedInteger = 562;
    public static readonly RULE_unsignedDecimalInteger = 563;
    public static readonly RULE_nullLiteral = 564;
    public static readonly RULE_dateString = 565;
    public static readonly RULE_timeString = 566;
    public static readonly RULE_datetimeString = 567;
    public static readonly RULE_durationLiteral = 568;
    public static readonly RULE_durationString = 569;
    public static readonly RULE_nodeSynonym = 570;
    public static readonly RULE_edgesSynonym = 571;
    public static readonly RULE_edgeSynonym = 572;
    public static readonly RULE_nonReservedWords = 573;

    public static readonly literalNames = [
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, "'ABS'", "'ACOS'", 
        "'ALL'", "'ALL_DIFFERENT'", "'AND'", "'ANY'", "'ARRAY'", "'AS'", 
        "'ASC'", "'ASCENDING'", "'ASIN'", "'AT'", "'ATAN'", "'AVG'", "'BIG'", 
        "'BIGINT'", "'BINARY'", "'BOOL'", "'BOOLEAN'", "'BOTH'", "'BTRIM'", 
        "'BY'", "'BYTE_LENGTH'", "'BYTES'", "'CALL'", "'CARDINALITY'", "'CASE'", 
        "'CAST'", "'CEIL'", "'CEILING'", "'CHAR'", "'CHAR_LENGTH'", "'CHARACTER_LENGTH'", 
        "'CHARACTERISTICS'", "'CLOSE'", "'COALESCE'", "'COLLECT_LIST'", 
        "'COMMIT'", "'COPY'", "'COS'", "'COSH'", "'COT'", "'COUNT'", "'CREATE'", 
        "'CURRENT_DATE'", "'CURRENT_GRAPH'", "'CURRENT_PROPERTY_GRAPH'", 
        "'CURRENT_SCHEMA'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'DATE'", 
        "'DATETIME'", "'DAY'", "'DEC'", "'DECIMAL'", "'DEGREES'", "'DELETE'", 
        "'DESC'", "'DESCENDING'", "'DETACH'", "'DISTINCT'", "'DOUBLE'", 
        "'DROP'", "'DURATION'", "'DURATION_BETWEEN'", "'ELEMENT_ID'", "'ELSE'", 
        "'END'", "'EXCEPT'", "'EXISTS'", "'EXP'", "'FILTER'", "'FINISH'", 
        "'FLOAT'", "'FLOAT16'", "'FLOAT32'", "'FLOAT64'", "'FLOAT128'", 
        "'FLOAT256'", "'FLOOR'", "'FOR'", "'FROM'", "'GROUP'", "'HAVING'", 
        "'HOME_GRAPH'", "'HOME_PROPERTY_GRAPH'", "'HOME_SCHEMA'", "'HOUR'", 
        "'IF'", "'IN'", "'INSERT'", "'INT'", "'INTEGER'", "'INT8'", "'INTEGER8'", 
        "'INT16'", "'INTEGER16'", "'INT32'", "'INTEGER32'", "'INT64'", "'INTEGER64'", 
        "'INT128'", "'INTEGER128'", "'INT256'", "'INTEGER256'", "'INTERSECT'", 
        "'INTERVAL'", "'IS'", "'LEADING'", "'LEFT'", "'LET'", "'LIKE'", 
        "'LIMIT'", "'LIST'", "'LN'", "'LOCAL'", "'LOCAL_DATETIME'", "'LOCAL_TIME'", 
        "'LOCAL_TIMESTAMP'", "'LOG'", "'LOG10'", "'LOWER'", "'LTRIM'", "'MATCH'", 
        "'MAX'", "'MIN'", "'MINUTE'", "'MOD'", "'MONTH'", "'NEXT'", "'NODETACH'", 
        "'NORMALIZE'", "'NOT'", "'NOTHING'", "'NULL'", "'NULLS'", "'NULLIF'", 
        "'OCTET_LENGTH'", "'OF'", "'OFFSET'", "'OPTIONAL'", "'OR'", "'ORDER'", 
        "'OTHERWISE'", "'PARAMETER'", "'PARAMETERS'", "'PATH'", "'PATH_LENGTH'", 
        "'PATHS'", "'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'POWER'", 
        "'PRECISION'", "'PROPERTY_EXISTS'", "'RADIANS'", "'REAL'", "'RECORD'", 
        "'REMOVE'", "'REPLACE'", "'RESET'", "'RETURN'", "'RIGHT'", "'ROLLBACK'", 
        "'RTRIM'", "'SAME'", "'SCHEMA'", "'SECOND'", "'SELECT'", "'SESSION'", 
        "'SESSION_USER'", "'SET'", "'SIGNED'", "'SIN'", "'SINH'", "'SIZE'", 
        "'SKIP'", "'SMALL'", "'SMALLINT'", "'SQRT'", "'START'", "'STDDEV_POP'", 
        "'STDDEV_SAMP'", "'STRING'", "'SUM'", "'TAN'", "'TANH'", "'THEN'", 
        "'TIME'", "'TIMESTAMP'", "'TRAILING'", "'TRIM'", "'TYPED'", "'UBIGINT'", 
        "'UINT'", "'UINT8'", "'UINT16'", "'UINT32'", "'UINT64'", "'UINT128'", 
        "'UINT256'", "'UNION'", "'UNSIGNED'", "'UPPER'", "'USE'", "'USMALLINT'", 
        "'VALUE'", "'VARBINARY'", "'VARCHAR'", "'VARIABLE'", "'WHEN'", "'WHERE'", 
        "'WITH'", "'XOR'", "'YEAR'", "'YIELD'", "'ZONED'", "'ZONED_DATETIME'", 
        "'ZONED_TIME'", "'ABSTRACT'", "'AGGREGATE'", "'AGGREGATES'", "'ALTER'", 
        "'CATALOG'", "'CLEAR'", "'CLONE'", "'CONSTRAINT'", "'CURRENT_ROLE'", 
        "'CURRENT_USER'", "'DATA'", "'DIRECTORY'", "'DRYRUN'", "'EXACT'", 
        "'EXISTING'", "'FUNCTION'", "'GQLSTATUS'", "'GRANT'", "'INSTANT'", 
        "'INFINITY'", "'NUMBER'", "'NUMERIC'", "'ON'", "'OPEN'", "'PARTITION'", 
        "'PROCEDURE'", "'PRODUCT'", "'PROJECT'", "'QUERY'", "'RECORDS'", 
        "'REFERENCE'", "'RENAME'", "'REVOKE'", "'SUBSTRING'", "'SYSTEM_USER'", 
        "'TEMPORAL'", "'UNIQUE'", "'UNIT'", "'VALUES'", "'ACYCLIC'", "'BINDING'", 
        "'BINDINGS'", "'CONNECTING'", "'DESTINATION'", "'DIFFERENT'", "'DIRECTED'", 
        "'EDGE'", "'EDGES'", "'ELEMENT'", "'ELEMENTS'", "'FIRST'", "'GRAPH'", 
        "'GROUPS'", "'KEEP'", "'LABEL'", "'LABELED'", "'LABELS'", "'LAST'", 
        "'NFC'", "'NFD'", "'NFKC'", "'NFKD'", "'NO'", "'NODE'", "'NORMALIZED'", 
        "'ONLY'", "'ORDINALITY'", "'PROPERTY'", "'READ'", "'RELATIONSHIP'", 
        "'RELATIONSHIPS'", "'REPEATABLE'", "'SHORTEST'", "'SIMPLE'", "'SOURCE'", 
        "'TABLE'", "'TEMP'", "'TO'", "'TRAIL'", "'TRANSACTION'", "'TYPE'", 
        "'UNDIRECTED'", "'VERTEX'", "'WALK'", "'WITHOUT'", "'WRITE'", "'ZONE'", 
        null, null, null, "'|+|'", "']->'", "']~>'", "'||'", "'::'", "'$$'", 
        "'..'", "'>='", "'<-'", "'<~'", "'<-['", "'<~['", "'<->'", "'<-/'", 
        "'<~/'", "'<='", "'-['", "'-/'", "'<>'", "'->'", "']-'", "']~'", 
        "'=>'", "'/-'", "'/->'", "'/~'", "'/~>'", "'~['", "'~>'", "'~/'", 
        "'&'", "'*'", "':'", "','", "'@'", "'$'", "'\"'", "'='", "'!'", 
        "'>'", "'`'", "'{'", "'['", "'('", "'<'", "'-'", "'%'", "'.'", "'+'", 
        "'?'", "'''", "'\\'", "'}'", "']'", "')'", "'/'", "'~'", "'_'", 
        "'|'"
    ];

    public static readonly symbolicNames = [
        null, "IMPLIES", "BOOLEAN_LITERAL", "SINGLE_QUOTED_CHARACTER_SEQUENCE", 
        "DOUBLE_QUOTED_CHARACTER_SEQUENCE", "ACCENT_QUOTED_CHARACTER_SEQUENCE", 
        "NO_ESCAPE", "BYTE_STRING_LITERAL", "UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX", 
        "UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX", "UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX", 
        "UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX", 
        "UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX", "UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX", 
        "UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX", "UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX", 
        "UNSIGNED_DECIMAL_INTEGER", "UNSIGNED_HEXADECIMAL_INTEGER", "UNSIGNED_OCTAL_INTEGER", 
        "UNSIGNED_BINARY_INTEGER", "ABS", "ACOS", "ALL", "ALL_DIFFERENT", 
        "AND", "ANY", "ARRAY", "AS", "ASC", "ASCENDING", "ASIN", "AT", "ATAN", 
        "AVG", "BIG", "BIGINT", "BINARY", "BOOL", "BOOLEAN", "BOTH", "BTRIM", 
        "BY", "BYTE_LENGTH", "BYTES", "CALL", "CARDINALITY", "CASE", "CAST", 
        "CEIL", "CEILING", "CHAR", "CHAR_LENGTH", "CHARACTER_LENGTH", "CHARACTERISTICS", 
        "CLOSE", "COALESCE", "COLLECT_LIST", "COMMIT", "COPY", "COS", "COSH", 
        "COT", "COUNT", "CREATE", "CURRENT_DATE", "CURRENT_GRAPH", "CURRENT_PROPERTY_GRAPH", 
        "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "DATE", "DATETIME", 
        "DAY", "DEC", "DECIMAL", "DEGREES", "DELETE", "DESC", "DESCENDING", 
        "DETACH", "DISTINCT", "DOUBLE", "DROP", "DURATION", "DURATION_BETWEEN", 
        "ELEMENT_ID", "ELSE", "END", "EXCEPT", "EXISTS", "EXP", "FILTER", 
        "FINISH", "FLOAT", "FLOAT16", "FLOAT32", "FLOAT64", "FLOAT128", 
        "FLOAT256", "FLOOR", "FOR", "FROM", "GROUP", "HAVING", "HOME_GRAPH", 
        "HOME_PROPERTY_GRAPH", "HOME_SCHEMA", "HOUR", "IF", "IN", "INSERT", 
        "INT", "INTEGER", "INT8", "INTEGER8", "INT16", "INTEGER16", "INT32", 
        "INTEGER32", "INT64", "INTEGER64", "INT128", "INTEGER128", "INT256", 
        "INTEGER256", "INTERSECT", "INTERVAL", "IS", "LEADING", "LEFT", 
        "LET", "LIKE", "LIMIT", "LIST", "LN", "LOCAL", "LOCAL_DATETIME", 
        "LOCAL_TIME", "LOCAL_TIMESTAMP", "LOG_KW", "LOG10", "LOWER", "LTRIM", 
        "MATCH", "MAX", "MIN", "MINUTE", "MOD", "MONTH", "NEXT", "NODETACH", 
        "NORMALIZE", "NOT", "NOTHING", "NULL_KW", "NULLS", "NULLIF", "OCTET_LENGTH", 
        "OF", "OFFSET", "OPTIONAL", "OR", "ORDER", "OTHERWISE", "PARAMETER", 
        "PARAMETERS", "PATH", "PATH_LENGTH", "PATHS", "PERCENTILE_CONT", 
        "PERCENTILE_DISC", "POWER", "PRECISION", "PROPERTY_EXISTS", "RADIANS", 
        "REAL", "RECORD", "REMOVE", "REPLACE", "RESET", "RETURN", "RIGHT", 
        "ROLLBACK", "RTRIM", "SAME", "SCHEMA", "SECOND", "SELECT", "SESSION", 
        "SESSION_USER", "SET", "SIGNED", "SIN", "SINH", "SIZE", "SKIP_RESERVED_WORD", 
        "SMALL", "SMALLINT", "SQRT", "START", "STDDEV_POP", "STDDEV_SAMP", 
        "STRING", "SUM", "TAN", "TANH", "THEN", "TIME", "TIMESTAMP", "TRAILING", 
        "TRIM", "TYPED", "UBIGINT", "UINT", "UINT8", "UINT16", "UINT32", 
        "UINT64", "UINT128", "UINT256", "UNION", "UNSIGNED", "UPPER", "USE", 
        "USMALLINT", "VALUE", "VARBINARY", "VARCHAR", "VARIABLE", "WHEN", 
        "WHERE", "WITH", "XOR", "YEAR", "YIELD", "ZONED", "ZONED_DATETIME", 
        "ZONED_TIME", "ABSTRACT", "AGGREGATE", "AGGREGATES", "ALTER", "CATALOG", 
        "CLEAR", "CLONE", "CONSTRAINT", "CURRENT_ROLE", "CURRENT_USER", 
        "DATA", "DIRECTORY", "DRYRUN", "EXACT", "EXISTING", "FUNCTION", 
        "GQLSTATUS", "GRANT", "INSTANT", "INFINITY_KW", "NUMBER", "NUMERIC", 
        "ON", "OPEN", "PARTITION", "PROCEDURE", "PRODUCT", "PROJECT", "QUERY", 
        "RECORDS", "REFERENCE", "RENAME", "REVOKE", "SUBSTRING", "SYSTEM_USER", 
        "TEMPORAL", "UNIQUE", "UNIT", "VALUES", "ACYCLIC", "BINDING", "BINDINGS", 
        "CONNECTING", "DESTINATION", "DIFFERENT", "DIRECTED", "EDGE", "EDGES", 
        "ELEMENT", "ELEMENTS", "FIRST", "GRAPH", "GROUPS", "KEEP", "LABEL", 
        "LABELED", "LABELS", "LAST", "NFC", "NFD", "NFKC", "NFKD", "NO", 
        "NODE", "NORMALIZED", "ONLY", "ORDINALITY", "PROPERTY", "READ", 
        "RELATIONSHIP", "RELATIONSHIPS", "REPEATABLE", "SHORTEST", "SIMPLE", 
        "SOURCE", "TABLE", "TEMP", "TO", "TRAIL", "TRANSACTION", "TYPE", 
        "UNDIRECTED", "VERTEX", "WALK", "WITHOUT", "WRITE", "ZONE", "REGULAR_IDENTIFIER", 
        "SUBSTITUTED_PARAMETER_REFERENCE", "GENERAL_PARAMETER_REFERENCE", 
        "MULTISET_ALTERNATION_OPERATOR", "BRACKET_RIGHT_ARROW", "BRACKET_TILDE_RIGHT_ARROW", 
        "CONCATENATION_OPERATOR", "DOUBLE_COLON", "DOUBLE_DOLLAR_SIGN", 
        "DOUBLE_PERIOD", "GREATER_THAN_OR_EQUALS_OPERATOR", "LEFT_ARROW", 
        "LEFT_ARROW_TILDE", "LEFT_ARROW_BRACKET", "LEFT_ARROW_TILDE_BRACKET", 
        "LEFT_MINUS_RIGHT", "LEFT_MINUS_SLASH", "LEFT_TILDE_SLASH", "LESS_THAN_OR_EQUALS_OPERATOR", 
        "MINUS_LEFT_BRACKET", "MINUS_SLASH", "NOT_EQUALS_OPERATOR", "RIGHT_ARROW", 
        "RIGHT_BRACKET_MINUS", "RIGHT_BRACKET_TILDE", "RIGHT_DOUBLE_ARROW", 
        "SLASH_MINUS", "SLASH_MINUS_RIGHT", "SLASH_TILDE", "SLASH_TILDE_RIGHT", 
        "TILDE_LEFT_BRACKET", "TILDE_RIGHT_ARROW", "TILDE_SLASH", "AMPERSAND", 
        "ASTERISK", "COLON", "COMMA", "COMMERCIAL_AT", "DOLLAR_SIGN", "DOUBLE_QUOTE", 
        "EQUALS_OPERATOR", "EXCLAMATION_MARK", "RIGHT_ANGLE_BRACKET", "GRAVE_ACCENT", 
        "LEFT_BRACE", "LEFT_BRACKET", "LEFT_PAREN", "LEFT_ANGLE_BRACKET", 
        "MINUS_SIGN", "PERCENT", "PERIOD", "PLUS_SIGN", "QUESTION_MARK", 
        "QUOTE", "REVERSE_SOLIDUS", "RIGHT_BRACE", "RIGHT_BRACKET", "RIGHT_PAREN", 
        "SOLIDUS", "TILDE", "UNDERSCORE", "VERTICAL_BAR", "SP", "WHITESPACE", 
        "BRACKETED_COMMENT", "SIMPLE_COMMENT_SOLIDUS", "SIMPLE_COMMENT_MINUS"
    ];
    public static readonly ruleNames = [
        "gqlProgram", "programActivity", "sessionActivity", "transactionActivity", 
        "endTransactionCommand", "sessionSetCommand", "sessionSetSchemaClause", 
        "sessionSetGraphClause", "sessionSetTimeZoneClause", "setTimeZoneValue", 
        "sessionSetParameterClause", "sessionSetGraphParameterClause", "sessionSetBindingTableParameterClause", 
        "sessionSetValueParameterClause", "sessionSetParameterName", "sessionResetCommand", 
        "sessionResetArguments", "sessionCloseCommand", "sessionParameterSpecification", 
        "startTransactionCommand", "transactionCharacteristics", "transactionMode", 
        "transactionAccessMode", "rollbackCommand", "commitCommand", "nestedProcedureSpecification", 
        "procedureSpecification", "nestedDataModifyingProcedureSpecification", 
        "nestedQuerySpecification", "procedureBody", "bindingVariableDefinitionBlock", 
        "bindingVariableDefinition", "statementBlock", "statement", "nextStatement", 
        "graphVariableDefinition", "optTypedGraphInitializer", "graphInitializer", 
        "bindingTableVariableDefinition", "optTypedBindingTableInitializer", 
        "bindingTableInitializer", "valueVariableDefinition", "optTypedValueInitializer", 
        "valueInitializer", "graphExpression", "currentGraph", "bindingTableExpression", 
        "nestedBindingTableQuerySpecification", "objectExpressionPrimary", 
        "linearCatalogModifyingStatement", "simpleCatalogModifyingStatement", 
        "primitiveCatalogModifyingStatement", "createSchemaStatement", "dropSchemaStatement", 
        "createGraphStatement", "openGraphType", "ofGraphType", "graphTypeLikeGraph", 
        "graphSource", "dropGraphStatement", "createGraphTypeStatement", 
        "graphTypeSource", "copyOfGraphType", "dropGraphTypeStatement", 
        "callCatalogModifyingProcedureStatement", "linearDataModifyingStatement", 
        "focusedLinearDataModifyingStatement", "focusedLinearDataModifyingStatementBody", 
        "focusedNestedDataModifyingProcedureSpecification", "ambientLinearDataModifyingStatement", 
        "ambientLinearDataModifyingStatementBody", "simpleLinearDataAccessingStatement", 
        "simpleDataAccessingStatement", "simpleDataModifyingStatement", 
        "primitiveDataModifyingStatement", "insertStatement", "setStatement", 
        "setItemList", "setItem", "setPropertyItem", "setAllPropertiesItem", 
        "setLabelItem", "removeStatement", "removeItemList", "removeItem", 
        "removePropertyItem", "removeLabelItem", "deleteStatement", "deleteItemList", 
        "deleteItem", "callDataModifyingProcedureStatement", "compositeQueryStatement", 
        "compositeQueryExpression", "queryConjunction", "setOperator", "compositeQueryPrimary", 
        "linearQueryStatement", "focusedLinearQueryStatement", "focusedLinearQueryStatementPart", 
        "focusedLinearQueryAndPrimitiveResultStatementPart", "focusedPrimitiveResultStatement", 
        "focusedNestedQuerySpecification", "ambientLinearQueryStatement", 
        "simpleLinearQueryStatement", "simpleQueryStatement", "primitiveQueryStatement", 
        "matchStatement", "simpleMatchStatement", "optionalMatchStatement", 
        "optionalOperand", "matchStatementBlock", "callQueryStatement", 
        "filterStatement", "letStatement", "letVariableDefinitionList", 
        "letVariableDefinition", "forStatement", "forItem", "forItemAlias", 
        "forItemSource", "forOrdinalityOrOffset", "orderByAndPageStatement", 
        "primitiveResultStatement", "returnStatement", "returnStatementBody", 
        "returnItemList", "returnItem", "returnItemAlias", "selectStatement", 
        "selectItemList", "selectItem", "selectItemAlias", "havingClause", 
        "selectStatementBody", "selectGraphMatchList", "selectGraphMatch", 
        "selectQuerySpecification", "callProcedureStatement", "procedureCall", 
        "inlineProcedureCall", "variableScopeClause", "bindingVariableReferenceList", 
        "namedProcedureCall", "procedureArgumentList", "procedureArgument", 
        "atSchemaClause", "useGraphClause", "graphPatternBindingTable", 
        "graphPatternYieldClause", "graphPatternYieldItemList", "graphPatternYieldItem", 
        "graphPattern", "matchMode", "repeatableElementsMatchMode", "differentEdgesMatchMode", 
        "elementBindingsOrElements", "edgeBindingsOrEdges", "pathPatternList", 
        "pathPattern", "pathVariableDeclaration", "keepClause", "graphPatternWhereClause", 
        "insertGraphPattern", "insertPathPatternList", "insertPathPattern", 
        "insertNodePattern", "insertEdgePattern", "insertEdgePointingLeft", 
        "insertEdgePointingRight", "insertEdgeUndirected", "insertElementPatternFiller", 
        "labelAndPropertySetSpecification", "pathPatternPrefix", "pathModePrefix", 
        "pathMode", "pathSearchPrefix", "allPathSearch", "pathOrPaths", 
        "anyPathSearch", "numberOfPaths", "shortestPathSearch", "allShortestPathSearch", 
        "anyShortestPathSearch", "countedShortestPathSearch", "countedShortestGroupSearch", 
        "numberOfGroups", "pathPatternExpression", "pathTerm", "pathFactor", 
        "pathPrimary", "elementPattern", "nodePattern", "elementPatternFiller", 
        "elementVariableDeclaration", "isLabelExpression", "isOrColon", 
        "elementPatternPredicate", "elementPatternWhereClause", "elementPropertySpecification", 
        "propertyKeyValuePairList", "propertyKeyValuePair", "edgePattern", 
        "fullEdgePattern", "fullEdgePointingLeft", "fullEdgeUndirected", 
        "fullEdgePointingRight", "fullEdgeLeftOrUndirected", "fullEdgeUndirectedOrRight", 
        "fullEdgeLeftOrRight", "fullEdgeAnyDirection", "abbreviatedEdgePattern", 
        "parenthesizedPathPatternExpression", "subpathVariableDeclaration", 
        "parenthesizedPathPatternWhereClause", "labelExpression", "pathVariableReference", 
        "elementVariableReference", "graphPatternQuantifier", "fixedQuantifier", 
        "generalQuantifier", "lowerBound", "upperBound", "simplifiedPathPatternExpression", 
        "simplifiedDefaultingLeft", "simplifiedDefaultingUndirected", "simplifiedDefaultingRight", 
        "simplifiedDefaultingLeftOrUndirected", "simplifiedDefaultingUndirectedOrRight", 
        "simplifiedDefaultingLeftOrRight", "simplifiedDefaultingAnyDirection", 
        "simplifiedContents", "simplifiedPathUnion", "simplifiedMultisetAlternation", 
        "simplifiedTerm", "simplifiedFactorLow", "simplifiedFactorHigh", 
        "simplifiedQuantified", "simplifiedQuestioned", "simplifiedTertiary", 
        "simplifiedDirectionOverride", "simplifiedOverrideLeft", "simplifiedOverrideUndirected", 
        "simplifiedOverrideRight", "simplifiedOverrideLeftOrUndirected", 
        "simplifiedOverrideUndirectedOrRight", "simplifiedOverrideLeftOrRight", 
        "simplifiedOverrideAnyDirection", "simplifiedSecondary", "simplifiedNegation", 
        "simplifiedPrimary", "whereClause", "yieldClause", "yieldItemList", 
        "yieldItem", "yieldItemName", "yieldItemAlias", "groupByClause", 
        "groupingElementList", "groupingElement", "emptyGroupingSet", "orderByClause", 
        "sortSpecificationList", "sortSpecification", "sortKey", "orderingSpecification", 
        "nullOrdering", "limitClause", "offsetClause", "offsetSynonym", 
        "schemaReference", "absoluteCatalogSchemaReference", "catalogSchemaParentAndName", 
        "relativeCatalogSchemaReference", "predefinedSchemaReference", "absoluteDirectoryPath", 
        "relativeDirectoryPath", "simpleDirectoryPath", "graphReference", 
        "catalogGraphParentAndName", "homeGraph", "graphTypeReference", 
        "catalogGraphTypeParentAndName", "bindingTableReference", "procedureReference", 
        "catalogProcedureParentAndName", "catalogObjectParentReference", 
        "referenceParameterSpecification", "nestedGraphTypeSpecification", 
        "graphTypeSpecificationBody", "elementTypeList", "elementTypeSpecification", 
        "nodeTypeSpecification", "nodeTypePattern", "nodeTypePhrase", "nodeTypePhraseFiller", 
        "nodeTypeFiller", "localNodeTypeAlias", "nodeTypeImpliedContent", 
        "nodeTypeKeyLabelSet", "nodeTypeLabelSet", "nodeTypePropertyTypes", 
        "edgeTypeSpecification", "edgeTypePattern", "edgeTypePhrase", "edgeTypePhraseFiller", 
        "edgeTypeFiller", "edgeTypeImpliedContent", "edgeTypeKeyLabelSet", 
        "edgeTypeLabelSet", "edgeTypePropertyTypes", "edgeTypePatternDirected", 
        "edgeTypePatternPointingRight", "edgeTypePatternPointingLeft", "edgeTypePatternUndirected", 
        "arcTypePointingRight", "arcTypePointingLeft", "arcTypeUndirected", 
        "sourceNodeTypeReference", "destinationNodeTypeReference", "edgeKind", 
        "endpointPairPhrase", "endpointPair", "endpointPairDirected", "endpointPairPointingRight", 
        "endpointPairPointingLeft", "endpointPairUndirected", "connectorPointingRight", 
        "connectorUndirected", "sourceNodeTypeAlias", "destinationNodeTypeAlias", 
        "labelSetPhrase", "labelSetSpecification", "propertyTypesSpecification", 
        "propertyTypeList", "propertyType", "propertyValueType", "bindingTableType", 
        "valueType", "typed", "predefinedType", "booleanType", "characterStringType", 
        "byteStringType", "minLength", "maxLength", "fixedLength", "numericType", 
        "exactNumericType", "binaryExactNumericType", "signedBinaryExactNumericType", 
        "unsignedBinaryExactNumericType", "verboseBinaryExactNumericType", 
        "decimalExactNumericType", "precision", "scale", "approximateNumericType", 
        "temporalType", "temporalInstantType", "datetimeType", "localdatetimeType", 
        "dateType", "timeType", "localtimeType", "temporalDurationType", 
        "temporalDurationQualifier", "referenceValueType", "immaterialValueType", 
        "nullType", "emptyType", "graphReferenceValueType", "closedGraphReferenceValueType", 
        "openGraphReferenceValueType", "bindingTableReferenceValueType", 
        "nodeReferenceValueType", "closedNodeReferenceValueType", "openNodeReferenceValueType", 
        "edgeReferenceValueType", "closedEdgeReferenceValueType", "openEdgeReferenceValueType", 
        "pathValueType", "listValueTypeName", "listValueTypeNameSynonym", 
        "recordType", "fieldTypesSpecification", "fieldTypeList", "notNull", 
        "fieldType", "searchCondition", "predicate", "compOp", "existsPredicate", 
        "nullPredicate", "nullPredicatePart2", "valueTypePredicate", "valueTypePredicatePart2", 
        "normalizedPredicatePart2", "directedPredicate", "directedPredicatePart2", 
        "labeledPredicate", "labeledPredicatePart2", "isLabeledOrColon", 
        "sourceDestinationPredicate", "nodeReference", "sourcePredicatePart2", 
        "destinationPredicatePart2", "edgeReference", "all_differentPredicate", 
        "samePredicate", "property_existsPredicate", "valueExpression", 
        "valueFunction", "booleanValueExpression", "characterOrByteStringFunction", 
        "subCharacterOrByteString", "trimSingleCharacterOrByteString", "foldCharacterString", 
        "trimMultiCharacterCharacterString", "normalizeCharacterString", 
        "nodeReferenceValueExpression", "edgeReferenceValueExpression", 
        "aggregatingValueExpression", "valueExpressionPrimary", "parenthesizedValueExpression", 
        "nonParenthesizedValueExpressionPrimary", "nonParenthesizedValueExpressionPrimarySpecialCase", 
        "unsignedValueSpecification", "nonNegativeIntegerSpecification", 
        "generalValueSpecification", "dynamicParameterSpecification", "letValueExpression", 
        "valueQueryExpression", "caseExpression", "caseAbbreviation", "caseSpecification", 
        "simpleCase", "searchedCase", "simpleWhenClause", "searchedWhenClause", 
        "elseClause", "caseOperand", "whenOperandList", "whenOperand", "result", 
        "resultExpression", "castSpecification", "castOperand", "castTarget", 
        "aggregateFunction", "generalSetFunction", "binarySetFunction", 
        "generalSetFunctionType", "setQuantifier", "binarySetFunctionType", 
        "dependentValueExpression", "independentValueExpression", "element_idFunction", 
        "bindingVariableReference", "pathValueExpression", "pathValueConstructor", 
        "pathValueConstructorByEnumeration", "pathElementList", "pathElementListStart", 
        "pathElementListStep", "listValueExpression", "listValueFunction", 
        "trimListFunction", "elementsFunction", "listValueConstructor", 
        "listValueConstructorByEnumeration", "listElementList", "listElement", 
        "recordConstructor", "fieldsSpecification", "fieldList", "field", 
        "truthValue", "numericValueExpression", "numericValueFunction", 
        "lengthExpression", "cardinalityExpression", "cardinalityExpressionArgument", 
        "charLengthExpression", "byteLengthExpression", "pathLengthExpression", 
        "absoluteValueExpression", "modulusExpression", "numericValueExpressionDividend", 
        "numericValueExpressionDivisor", "trigonometricFunction", "trigonometricFunctionName", 
        "generalLogarithmFunction", "generalLogarithmBase", "generalLogarithmArgument", 
        "commonLogarithm", "naturalLogarithm", "exponentialFunction", "powerFunction", 
        "numericValueExpressionBase", "numericValueExpressionExponent", 
        "squareRoot", "floorFunction", "ceilingFunction", "characterStringValueExpression", 
        "byteStringValueExpression", "trimOperands", "trimCharacterOrByteStringSource", 
        "trimSpecification", "trimCharacterOrByteString", "normalForm", 
        "stringLength", "datetimeValueExpression", "datetimeValueFunction", 
        "dateFunction", "timeFunction", "localtimeFunction", "datetimeFunction", 
        "localdatetimeFunction", "dateFunctionParameters", "timeFunctionParameters", 
        "datetimeFunctionParameters", "durationValueExpression", "datetimeSubtraction", 
        "datetimeSubtractionParameters", "datetimeValueExpression1", "datetimeValueExpression2", 
        "durationValueFunction", "durationFunction", "durationFunctionParameters", 
        "objectName", "objectNameOrBindingVariable", "directoryName", "schemaName", 
        "graphName", "delimitedGraphName", "graphTypeName", "nodeTypeName", 
        "edgeTypeName", "bindingTableName", "delimitedBindingTableName", 
        "procedureName", "labelName", "propertyName", "fieldName", "elementVariable", 
        "pathVariable", "subpathVariable", "bindingVariable", "unsignedLiteral", 
        "generalLiteral", "temporalLiteral", "dateLiteral", "timeLiteral", 
        "datetimeLiteral", "listLiteral", "recordLiteral", "identifier", 
        "regularIdentifier", "timeZoneString", "characterStringLiteral", 
        "unsignedNumericLiteral", "exactNumericLiteral", "approximateNumericLiteral", 
        "unsignedInteger", "unsignedDecimalInteger", "nullLiteral", "dateString", 
        "timeString", "datetimeString", "durationLiteral", "durationString", 
        "nodeSynonym", "edgesSynonym", "edgeSynonym", "nonReservedWords",
    ];

    public get grammarFileName(): string { return "GQL.g4"; }
    public get literalNames(): (string | null)[] { return GQLParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return GQLParser.symbolicNames; }
    public get ruleNames(): string[] { return GQLParser.ruleNames; }
    public get serializedATN(): number[] { return GQLParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, GQLParser._ATN, GQLParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public gqlProgram(): GqlProgramContext {
        let localContext = new GqlProgramContext(this.context, this.state);
        this.enterRule(localContext, 0, GQLParser.RULE_gqlProgram);
        let _la: number;
        try {
            this.state = 1157;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1148;
                this.programActivity();
                this.state = 1150;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188) {
                    {
                    this.state = 1149;
                    this.sessionCloseCommand();
                    }
                }

                this.state = 1152;
                this.match(GQLParser.EOF);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1154;
                this.sessionCloseCommand();
                this.state = 1155;
                this.match(GQLParser.EOF);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public programActivity(): ProgramActivityContext {
        let localContext = new ProgramActivityContext(this.context, this.state);
        this.enterRule(localContext, 2, GQLParser.RULE_programActivity);
        try {
            this.state = 1161;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.SESSION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1159;
                this.sessionActivity();
                }
                break;
            case GQLParser.AT:
            case GQLParser.CALL:
            case GQLParser.COMMIT:
            case GQLParser.CREATE:
            case GQLParser.DELETE:
            case GQLParser.DETACH:
            case GQLParser.DROP:
            case GQLParser.FILTER:
            case GQLParser.FINISH:
            case GQLParser.FOR:
            case GQLParser.INSERT:
            case GQLParser.LET:
            case GQLParser.LIMIT:
            case GQLParser.MATCH:
            case GQLParser.NODETACH:
            case GQLParser.OFFSET:
            case GQLParser.OPTIONAL:
            case GQLParser.ORDER:
            case GQLParser.REMOVE:
            case GQLParser.RETURN:
            case GQLParser.ROLLBACK:
            case GQLParser.SELECT:
            case GQLParser.SET:
            case GQLParser.SKIP_RESERVED_WORD:
            case GQLParser.START:
            case GQLParser.USE:
            case GQLParser.VALUE:
            case GQLParser.BINDING:
            case GQLParser.GRAPH:
            case GQLParser.PROPERTY:
            case GQLParser.TABLE:
            case GQLParser.LEFT_BRACE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1160;
                this.transactionActivity();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sessionActivity(): SessionActivityContext {
        let localContext = new SessionActivityContext(this.context, this.state);
        this.enterRule(localContext, 4, GQLParser.RULE_sessionActivity);
        try {
            let alternative: number;
            this.state = 1179;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 6, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1164;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 1163;
                        this.sessionResetCommand();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 1166;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 3, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1169;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 1168;
                        this.sessionSetCommand();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 1171;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 4, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                this.state = 1176;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 5, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1173;
                        this.sessionResetCommand();
                        }
                        }
                    }
                    this.state = 1178;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 5, this.context);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionActivity(): TransactionActivityContext {
        let localContext = new TransactionActivityContext(this.context, this.state);
        this.enterRule(localContext, 6, GQLParser.RULE_transactionActivity);
        let _la: number;
        try {
            this.state = 1193;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.START:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1181;
                this.startTransactionCommand();
                this.state = 1186;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 31 || _la === 44 || ((((_la - 63)) & ~0x1F) === 0 && ((1 << (_la - 63)) & 805904385) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & 1073742849) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 1476659201) !== 0) || ((((_la - 177)) & ~0x1F) === 0 && ((1 << (_la - 177)) & 271369) !== 0) || _la === 223 || _la === 225 || ((((_la - 278)) & ~0x1F) === 0 && ((1 << (_la - 278)) & 134219777) !== 0) || _la === 313 || _la === 369) {
                    {
                    this.state = 1182;
                    this.procedureSpecification();
                    this.state = 1184;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 57 || _la === 182) {
                        {
                        this.state = 1183;
                        this.endTransactionCommand();
                        }
                    }

                    }
                }

                }
                break;
            case GQLParser.AT:
            case GQLParser.CALL:
            case GQLParser.CREATE:
            case GQLParser.DELETE:
            case GQLParser.DETACH:
            case GQLParser.DROP:
            case GQLParser.FILTER:
            case GQLParser.FINISH:
            case GQLParser.FOR:
            case GQLParser.INSERT:
            case GQLParser.LET:
            case GQLParser.LIMIT:
            case GQLParser.MATCH:
            case GQLParser.NODETACH:
            case GQLParser.OFFSET:
            case GQLParser.OPTIONAL:
            case GQLParser.ORDER:
            case GQLParser.REMOVE:
            case GQLParser.RETURN:
            case GQLParser.SELECT:
            case GQLParser.SET:
            case GQLParser.SKIP_RESERVED_WORD:
            case GQLParser.USE:
            case GQLParser.VALUE:
            case GQLParser.BINDING:
            case GQLParser.GRAPH:
            case GQLParser.PROPERTY:
            case GQLParser.TABLE:
            case GQLParser.LEFT_BRACE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1188;
                this.procedureSpecification();
                this.state = 1190;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 57 || _la === 182) {
                    {
                    this.state = 1189;
                    this.endTransactionCommand();
                    }
                }

                }
                break;
            case GQLParser.COMMIT:
            case GQLParser.ROLLBACK:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1192;
                this.endTransactionCommand();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public endTransactionCommand(): EndTransactionCommandContext {
        let localContext = new EndTransactionCommandContext(this.context, this.state);
        this.enterRule(localContext, 8, GQLParser.RULE_endTransactionCommand);
        try {
            this.state = 1197;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.ROLLBACK:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1195;
                this.rollbackCommand();
                }
                break;
            case GQLParser.COMMIT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1196;
                this.commitCommand();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sessionSetCommand(): SessionSetCommandContext {
        let localContext = new SessionSetCommandContext(this.context, this.state);
        this.enterRule(localContext, 10, GQLParser.RULE_sessionSetCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1199;
            this.match(GQLParser.SESSION);
            this.state = 1200;
            this.match(GQLParser.SET);
            this.state = 1205;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 12, this.context) ) {
            case 1:
                {
                this.state = 1201;
                this.sessionSetSchemaClause();
                }
                break;
            case 2:
                {
                this.state = 1202;
                this.sessionSetGraphClause();
                }
                break;
            case 3:
                {
                this.state = 1203;
                this.sessionSetTimeZoneClause();
                }
                break;
            case 4:
                {
                this.state = 1204;
                this.sessionSetParameterClause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sessionSetSchemaClause(): SessionSetSchemaClauseContext {
        let localContext = new SessionSetSchemaClauseContext(this.context, this.state);
        this.enterRule(localContext, 12, GQLParser.RULE_sessionSetSchemaClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1207;
            this.match(GQLParser.SCHEMA);
            this.state = 1208;
            this.schemaReference();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sessionSetGraphClause(): SessionSetGraphClauseContext {
        let localContext = new SessionSetGraphClauseContext(this.context, this.state);
        this.enterRule(localContext, 14, GQLParser.RULE_sessionSetGraphClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1211;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 305) {
                {
                this.state = 1210;
                this.match(GQLParser.PROPERTY);
                }
            }

            this.state = 1213;
            this.match(GQLParser.GRAPH);
            this.state = 1214;
            this.graphExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sessionSetTimeZoneClause(): SessionSetTimeZoneClauseContext {
        let localContext = new SessionSetTimeZoneClauseContext(this.context, this.state);
        this.enterRule(localContext, 16, GQLParser.RULE_sessionSetTimeZoneClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1216;
            this.match(GQLParser.TIME);
            this.state = 1217;
            this.match(GQLParser.ZONE);
            this.state = 1218;
            this.setTimeZoneValue();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setTimeZoneValue(): SetTimeZoneValueContext {
        let localContext = new SetTimeZoneValueContext(this.context, this.state);
        this.enterRule(localContext, 18, GQLParser.RULE_setTimeZoneValue);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1220;
            this.timeZoneString();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sessionSetParameterClause(): SessionSetParameterClauseContext {
        let localContext = new SessionSetParameterClauseContext(this.context, this.state);
        this.enterRule(localContext, 20, GQLParser.RULE_sessionSetParameterClause);
        try {
            this.state = 1225;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.GRAPH:
            case GQLParser.PROPERTY:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1222;
                this.sessionSetGraphParameterClause();
                }
                break;
            case GQLParser.BINDING:
            case GQLParser.TABLE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1223;
                this.sessionSetBindingTableParameterClause();
                }
                break;
            case GQLParser.VALUE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1224;
                this.sessionSetValueParameterClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sessionSetGraphParameterClause(): SessionSetGraphParameterClauseContext {
        let localContext = new SessionSetGraphParameterClauseContext(this.context, this.state);
        this.enterRule(localContext, 22, GQLParser.RULE_sessionSetGraphParameterClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1228;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 305) {
                {
                this.state = 1227;
                this.match(GQLParser.PROPERTY);
                }
            }

            this.state = 1230;
            this.match(GQLParser.GRAPH);
            this.state = 1231;
            this.sessionSetParameterName();
            this.state = 1232;
            this.optTypedGraphInitializer();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sessionSetBindingTableParameterClause(): SessionSetBindingTableParameterClauseContext {
        let localContext = new SessionSetBindingTableParameterClauseContext(this.context, this.state);
        this.enterRule(localContext, 24, GQLParser.RULE_sessionSetBindingTableParameterClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1235;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 278) {
                {
                this.state = 1234;
                this.match(GQLParser.BINDING);
                }
            }

            this.state = 1237;
            this.match(GQLParser.TABLE);
            this.state = 1238;
            this.sessionSetParameterName();
            this.state = 1239;
            this.optTypedBindingTableInitializer();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sessionSetValueParameterClause(): SessionSetValueParameterClauseContext {
        let localContext = new SessionSetValueParameterClauseContext(this.context, this.state);
        this.enterRule(localContext, 26, GQLParser.RULE_sessionSetValueParameterClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1241;
            this.match(GQLParser.VALUE);
            this.state = 1242;
            this.sessionSetParameterName();
            this.state = 1243;
            this.optTypedValueInitializer();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sessionSetParameterName(): SessionSetParameterNameContext {
        let localContext = new SessionSetParameterNameContext(this.context, this.state);
        this.enterRule(localContext, 28, GQLParser.RULE_sessionSetParameterName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1248;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 108) {
                {
                this.state = 1245;
                this.match(GQLParser.IF);
                this.state = 1246;
                this.match(GQLParser.NOT);
                this.state = 1247;
                this.match(GQLParser.EXISTS);
                }
            }

            this.state = 1250;
            this.sessionParameterSpecification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sessionResetCommand(): SessionResetCommandContext {
        let localContext = new SessionResetCommandContext(this.context, this.state);
        this.enterRule(localContext, 30, GQLParser.RULE_sessionResetCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1252;
            this.match(GQLParser.SESSION);
            this.state = 1253;
            this.match(GQLParser.RESET);
            this.state = 1255;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 22 || _la === 53 || ((((_la - 164)) & ~0x1F) === 0 && ((1 << (_la - 164)) & 2097155) !== 0) || _la === 207 || _la === 289 || _la === 305 || _la === 327) {
                {
                this.state = 1254;
                this.sessionResetArguments();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sessionResetArguments(): SessionResetArgumentsContext {
        let localContext = new SessionResetArgumentsContext(this.context, this.state);
        this.enterRule(localContext, 32, GQLParser.RULE_sessionResetArguments);
        let _la: number;
        try {
            this.state = 1272;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.ALL:
            case GQLParser.CHARACTERISTICS:
            case GQLParser.PARAMETERS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1258;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 22) {
                    {
                    this.state = 1257;
                    this.match(GQLParser.ALL);
                    }
                }

                this.state = 1260;
                _la = this.tokenStream.LA(1);
                if(!(_la === 53 || _la === 165)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case GQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1261;
                this.match(GQLParser.SCHEMA);
                }
                break;
            case GQLParser.GRAPH:
            case GQLParser.PROPERTY:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1263;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 305) {
                    {
                    this.state = 1262;
                    this.match(GQLParser.PROPERTY);
                    }
                }

                this.state = 1265;
                this.match(GQLParser.GRAPH);
                }
                break;
            case GQLParser.TIME:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1266;
                this.match(GQLParser.TIME);
                this.state = 1267;
                this.match(GQLParser.ZONE);
                }
                break;
            case GQLParser.PARAMETER:
            case GQLParser.GENERAL_PARAMETER_REFERENCE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1269;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 164) {
                    {
                    this.state = 1268;
                    this.match(GQLParser.PARAMETER);
                    }
                }

                this.state = 1271;
                this.sessionParameterSpecification();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sessionCloseCommand(): SessionCloseCommandContext {
        let localContext = new SessionCloseCommandContext(this.context, this.state);
        this.enterRule(localContext, 34, GQLParser.RULE_sessionCloseCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1274;
            this.match(GQLParser.SESSION);
            this.state = 1275;
            this.match(GQLParser.CLOSE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sessionParameterSpecification(): SessionParameterSpecificationContext {
        let localContext = new SessionParameterSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 36, GQLParser.RULE_sessionParameterSpecification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1277;
            this.match(GQLParser.GENERAL_PARAMETER_REFERENCE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public startTransactionCommand(): StartTransactionCommandContext {
        let localContext = new StartTransactionCommandContext(this.context, this.state);
        this.enterRule(localContext, 38, GQLParser.RULE_startTransactionCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1279;
            this.match(GQLParser.START);
            this.state = 1280;
            this.match(GQLParser.TRANSACTION);
            this.state = 1282;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 306) {
                {
                this.state = 1281;
                this.transactionCharacteristics();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionCharacteristics(): TransactionCharacteristicsContext {
        let localContext = new TransactionCharacteristicsContext(this.context, this.state);
        this.enterRule(localContext, 40, GQLParser.RULE_transactionCharacteristics);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1284;
            this.transactionMode();
            this.state = 1289;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 361) {
                {
                {
                this.state = 1285;
                this.match(GQLParser.COMMA);
                this.state = 1286;
                this.transactionMode();
                }
                }
                this.state = 1291;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionMode(): TransactionModeContext {
        let localContext = new TransactionModeContext(this.context, this.state);
        this.enterRule(localContext, 42, GQLParser.RULE_transactionMode);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1292;
            this.transactionAccessMode();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionAccessMode(): TransactionAccessModeContext {
        let localContext = new TransactionAccessModeContext(this.context, this.state);
        this.enterRule(localContext, 44, GQLParser.RULE_transactionAccessMode);
        try {
            this.state = 1298;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 25, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1294;
                this.match(GQLParser.READ);
                this.state = 1295;
                this.match(GQLParser.ONLY);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1296;
                this.match(GQLParser.READ);
                this.state = 1297;
                this.match(GQLParser.WRITE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rollbackCommand(): RollbackCommandContext {
        let localContext = new RollbackCommandContext(this.context, this.state);
        this.enterRule(localContext, 46, GQLParser.RULE_rollbackCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1300;
            this.match(GQLParser.ROLLBACK);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commitCommand(): CommitCommandContext {
        let localContext = new CommitCommandContext(this.context, this.state);
        this.enterRule(localContext, 48, GQLParser.RULE_commitCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1302;
            this.match(GQLParser.COMMIT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nestedProcedureSpecification(): NestedProcedureSpecificationContext {
        let localContext = new NestedProcedureSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 50, GQLParser.RULE_nestedProcedureSpecification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1304;
            this.match(GQLParser.LEFT_BRACE);
            this.state = 1305;
            this.procedureSpecification();
            this.state = 1306;
            this.match(GQLParser.RIGHT_BRACE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedureSpecification(): ProcedureSpecificationContext {
        let localContext = new ProcedureSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 52, GQLParser.RULE_procedureSpecification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1308;
            this.procedureBody();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nestedDataModifyingProcedureSpecification(): NestedDataModifyingProcedureSpecificationContext {
        let localContext = new NestedDataModifyingProcedureSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 54, GQLParser.RULE_nestedDataModifyingProcedureSpecification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1310;
            this.match(GQLParser.LEFT_BRACE);
            this.state = 1311;
            this.procedureBody();
            this.state = 1312;
            this.match(GQLParser.RIGHT_BRACE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nestedQuerySpecification(): NestedQuerySpecificationContext {
        let localContext = new NestedQuerySpecificationContext(this.context, this.state);
        this.enterRule(localContext, 56, GQLParser.RULE_nestedQuerySpecification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1314;
            this.match(GQLParser.LEFT_BRACE);
            this.state = 1315;
            this.procedureBody();
            this.state = 1316;
            this.match(GQLParser.RIGHT_BRACE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedureBody(): ProcedureBodyContext {
        let localContext = new ProcedureBodyContext(this.context, this.state);
        this.enterRule(localContext, 58, GQLParser.RULE_procedureBody);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1319;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 31) {
                {
                this.state = 1318;
                this.atSchemaClause();
                }
            }

            this.state = 1322;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 225 || ((((_la - 278)) & ~0x1F) === 0 && ((1 << (_la - 278)) & 134219777) !== 0) || _la === 313) {
                {
                this.state = 1321;
                this.bindingVariableDefinitionBlock();
                }
            }

            this.state = 1324;
            this.statementBlock();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bindingVariableDefinitionBlock(): BindingVariableDefinitionBlockContext {
        let localContext = new BindingVariableDefinitionBlockContext(this.context, this.state);
        this.enterRule(localContext, 60, GQLParser.RULE_bindingVariableDefinitionBlock);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1327;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 1326;
                this.bindingVariableDefinition();
                }
                }
                this.state = 1329;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 225 || ((((_la - 278)) & ~0x1F) === 0 && ((1 << (_la - 278)) & 134219777) !== 0) || _la === 313);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bindingVariableDefinition(): BindingVariableDefinitionContext {
        let localContext = new BindingVariableDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 62, GQLParser.RULE_bindingVariableDefinition);
        try {
            this.state = 1334;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.GRAPH:
            case GQLParser.PROPERTY:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1331;
                this.graphVariableDefinition();
                }
                break;
            case GQLParser.BINDING:
            case GQLParser.TABLE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1332;
                this.bindingTableVariableDefinition();
                }
                break;
            case GQLParser.VALUE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1333;
                this.valueVariableDefinition();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statementBlock(): StatementBlockContext {
        let localContext = new StatementBlockContext(this.context, this.state);
        this.enterRule(localContext, 64, GQLParser.RULE_statementBlock);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1336;
            this.statement();
            this.state = 1340;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 149) {
                {
                {
                this.state = 1337;
                this.nextStatement();
                }
                }
                this.state = 1342;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statement(): StatementContext {
        let localContext = new StatementContext(this.context, this.state);
        this.enterRule(localContext, 66, GQLParser.RULE_statement);
        try {
            this.state = 1346;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 31, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1343;
                this.linearCatalogModifyingStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1344;
                this.linearDataModifyingStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1345;
                this.compositeQueryStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nextStatement(): NextStatementContext {
        let localContext = new NextStatementContext(this.context, this.state);
        this.enterRule(localContext, 68, GQLParser.RULE_nextStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1348;
            this.match(GQLParser.NEXT);
            this.state = 1350;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 234) {
                {
                this.state = 1349;
                this.yieldClause();
                }
            }

            this.state = 1352;
            this.statement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public graphVariableDefinition(): GraphVariableDefinitionContext {
        let localContext = new GraphVariableDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 70, GQLParser.RULE_graphVariableDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1355;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 305) {
                {
                this.state = 1354;
                this.match(GQLParser.PROPERTY);
                }
            }

            this.state = 1357;
            this.match(GQLParser.GRAPH);
            this.state = 1358;
            this.bindingVariable();
            this.state = 1359;
            this.optTypedGraphInitializer();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optTypedGraphInitializer(): OptTypedGraphInitializerContext {
        let localContext = new OptTypedGraphInitializerContext(this.context, this.state);
        this.enterRule(localContext, 72, GQLParser.RULE_optTypedGraphInitializer);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1365;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25 || _la === 211 || _la === 289 || _la === 305 || _la === 332) {
                {
                this.state = 1362;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 211 || _la === 332) {
                    {
                    this.state = 1361;
                    this.typed();
                    }
                }

                this.state = 1364;
                this.graphReferenceValueType();
                }
            }

            this.state = 1367;
            this.graphInitializer();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public graphInitializer(): GraphInitializerContext {
        let localContext = new GraphInitializerContext(this.context, this.state);
        this.enterRule(localContext, 74, GQLParser.RULE_graphInitializer);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1369;
            this.match(GQLParser.EQUALS_OPERATOR);
            this.state = 1370;
            this.graphExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bindingTableVariableDefinition(): BindingTableVariableDefinitionContext {
        let localContext = new BindingTableVariableDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 76, GQLParser.RULE_bindingTableVariableDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1373;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 278) {
                {
                this.state = 1372;
                this.match(GQLParser.BINDING);
                }
            }

            this.state = 1375;
            this.match(GQLParser.TABLE);
            this.state = 1376;
            this.bindingVariable();
            this.state = 1377;
            this.optTypedBindingTableInitializer();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optTypedBindingTableInitializer(): OptTypedBindingTableInitializerContext {
        let localContext = new OptTypedBindingTableInitializerContext(this.context, this.state);
        this.enterRule(localContext, 78, GQLParser.RULE_optTypedBindingTableInitializer);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1383;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 211 || _la === 278 || _la === 313 || _la === 332) {
                {
                this.state = 1380;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 211 || _la === 332) {
                    {
                    this.state = 1379;
                    this.typed();
                    }
                }

                this.state = 1382;
                this.bindingTableReferenceValueType();
                }
            }

            this.state = 1385;
            this.bindingTableInitializer();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bindingTableInitializer(): BindingTableInitializerContext {
        let localContext = new BindingTableInitializerContext(this.context, this.state);
        this.enterRule(localContext, 80, GQLParser.RULE_bindingTableInitializer);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1387;
            this.match(GQLParser.EQUALS_OPERATOR);
            this.state = 1388;
            this.bindingTableExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valueVariableDefinition(): ValueVariableDefinitionContext {
        let localContext = new ValueVariableDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 82, GQLParser.RULE_valueVariableDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1390;
            this.match(GQLParser.VALUE);
            this.state = 1391;
            this.bindingVariable();
            this.state = 1392;
            this.optTypedValueInitializer();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optTypedValueInitializer(): OptTypedValueInitializerContext {
        let localContext = new OptTypedValueInitializerContext(this.context, this.state);
        this.enterRule(localContext, 84, GQLParser.RULE_optTypedValueInitializer);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1398;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 25)) & ~0x1F) === 0 && ((1 << (_la - 25)) & 33832451) !== 0) || ((((_la - 70)) & ~0x1F) === 0 && ((1 << (_la - 70)) & 528492569) !== 0) || ((((_la - 102)) & ~0x1F) === 0 && ((1 << (_la - 102)) & 2155871745) !== 0) || ((((_la - 135)) & ~0x1F) === 0 && ((1 << (_la - 135)) & 2148270081) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & 140574723) !== 0) || ((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & 270163955) !== 0) || ((((_la - 278)) & ~0x1F) === 0 && ((1 << (_la - 278)) & 679479393) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & 524481) !== 0) || _la === 369 || _la === 371) {
                {
                this.state = 1395;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 211 || _la === 332) {
                    {
                    this.state = 1394;
                    this.typed();
                    }
                }

                this.state = 1397;
                this.valueType(0);
                }
            }

            this.state = 1400;
            this.valueInitializer();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valueInitializer(): ValueInitializerContext {
        let localContext = new ValueInitializerContext(this.context, this.state);
        this.enterRule(localContext, 86, GQLParser.RULE_valueInitializer);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1402;
            this.match(GQLParser.EQUALS_OPERATOR);
            this.state = 1403;
            this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public graphExpression(): GraphExpressionContext {
        let localContext = new GraphExpressionContext(this.context, this.state);
        this.enterRule(localContext, 88, GQLParser.RULE_graphExpression);
        try {
            this.state = 1409;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 41, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1405;
                this.graphReference();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1406;
                this.objectExpressionPrimary();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1407;
                this.objectNameOrBindingVariable();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1408;
                this.currentGraph();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public currentGraph(): CurrentGraphContext {
        let localContext = new CurrentGraphContext(this.context, this.state);
        this.enterRule(localContext, 90, GQLParser.RULE_currentGraph);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1411;
            _la = this.tokenStream.LA(1);
            if(!(_la === 65 || _la === 66)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bindingTableExpression(): BindingTableExpressionContext {
        let localContext = new BindingTableExpressionContext(this.context, this.state);
        this.enterRule(localContext, 92, GQLParser.RULE_bindingTableExpression);
        try {
            this.state = 1417;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 42, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1413;
                this.nestedBindingTableQuerySpecification();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1414;
                this.bindingTableReference();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1415;
                this.objectExpressionPrimary();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1416;
                this.objectNameOrBindingVariable();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nestedBindingTableQuerySpecification(): NestedBindingTableQuerySpecificationContext {
        let localContext = new NestedBindingTableQuerySpecificationContext(this.context, this.state);
        this.enterRule(localContext, 94, GQLParser.RULE_nestedBindingTableQuerySpecification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1419;
            this.nestedQuerySpecification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public objectExpressionPrimary(): ObjectExpressionPrimaryContext {
        let localContext = new ObjectExpressionPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 96, GQLParser.RULE_objectExpressionPrimary);
        try {
            this.state = 1425;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 43, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1421;
                this.match(GQLParser.VARIABLE);
                this.state = 1422;
                this.valueExpressionPrimary(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1423;
                this.parenthesizedValueExpression();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1424;
                this.nonParenthesizedValueExpressionPrimarySpecialCase();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public linearCatalogModifyingStatement(): LinearCatalogModifyingStatementContext {
        let localContext = new LinearCatalogModifyingStatementContext(this.context, this.state);
        this.enterRule(localContext, 98, GQLParser.RULE_linearCatalogModifyingStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1428;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 1427;
                this.simpleCatalogModifyingStatement();
                }
                }
                this.state = 1430;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 44 || _la === 63 || _la === 82 || _la === 160);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleCatalogModifyingStatement(): SimpleCatalogModifyingStatementContext {
        let localContext = new SimpleCatalogModifyingStatementContext(this.context, this.state);
        this.enterRule(localContext, 100, GQLParser.RULE_simpleCatalogModifyingStatement);
        try {
            this.state = 1434;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.CREATE:
            case GQLParser.DROP:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1432;
                this.primitiveCatalogModifyingStatement();
                }
                break;
            case GQLParser.CALL:
            case GQLParser.OPTIONAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1433;
                this.callCatalogModifyingProcedureStatement();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public primitiveCatalogModifyingStatement(): PrimitiveCatalogModifyingStatementContext {
        let localContext = new PrimitiveCatalogModifyingStatementContext(this.context, this.state);
        this.enterRule(localContext, 102, GQLParser.RULE_primitiveCatalogModifyingStatement);
        try {
            this.state = 1442;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 46, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1436;
                this.createSchemaStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1437;
                this.dropSchemaStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1438;
                this.createGraphStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1439;
                this.dropGraphStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1440;
                this.createGraphTypeStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1441;
                this.dropGraphTypeStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createSchemaStatement(): CreateSchemaStatementContext {
        let localContext = new CreateSchemaStatementContext(this.context, this.state);
        this.enterRule(localContext, 104, GQLParser.RULE_createSchemaStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1444;
            this.match(GQLParser.CREATE);
            this.state = 1445;
            this.match(GQLParser.SCHEMA);
            this.state = 1449;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 108) {
                {
                this.state = 1446;
                this.match(GQLParser.IF);
                this.state = 1447;
                this.match(GQLParser.NOT);
                this.state = 1448;
                this.match(GQLParser.EXISTS);
                }
            }

            this.state = 1451;
            this.catalogSchemaParentAndName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropSchemaStatement(): DropSchemaStatementContext {
        let localContext = new DropSchemaStatementContext(this.context, this.state);
        this.enterRule(localContext, 106, GQLParser.RULE_dropSchemaStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1453;
            this.match(GQLParser.DROP);
            this.state = 1454;
            this.match(GQLParser.SCHEMA);
            this.state = 1457;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 108) {
                {
                this.state = 1455;
                this.match(GQLParser.IF);
                this.state = 1456;
                this.match(GQLParser.EXISTS);
                }
            }

            this.state = 1459;
            this.catalogSchemaParentAndName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createGraphStatement(): CreateGraphStatementContext {
        let localContext = new CreateGraphStatementContext(this.context, this.state);
        this.enterRule(localContext, 108, GQLParser.RULE_createGraphStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1461;
            this.match(GQLParser.CREATE);
            this.state = 1477;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.GRAPH:
            case GQLParser.PROPERTY:
                {
                this.state = 1463;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 305) {
                    {
                    this.state = 1462;
                    this.match(GQLParser.PROPERTY);
                    }
                }

                this.state = 1465;
                this.match(GQLParser.GRAPH);
                this.state = 1469;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 108) {
                    {
                    this.state = 1466;
                    this.match(GQLParser.IF);
                    this.state = 1467;
                    this.match(GQLParser.NOT);
                    this.state = 1468;
                    this.match(GQLParser.EXISTS);
                    }
                }

                }
                break;
            case GQLParser.OR:
                {
                this.state = 1471;
                this.match(GQLParser.OR);
                this.state = 1472;
                this.match(GQLParser.REPLACE);
                this.state = 1474;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 305) {
                    {
                    this.state = 1473;
                    this.match(GQLParser.PROPERTY);
                    }
                }

                this.state = 1476;
                this.match(GQLParser.GRAPH);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1479;
            this.catalogGraphParentAndName();
            this.state = 1482;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 53, this.context) ) {
            case 1:
                {
                this.state = 1480;
                this.openGraphType();
                }
                break;
            case 2:
                {
                this.state = 1481;
                this.ofGraphType();
                }
                break;
            }
            this.state = 1485;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 27) {
                {
                this.state = 1484;
                this.graphSource();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public openGraphType(): OpenGraphTypeContext {
        let localContext = new OpenGraphTypeContext(this.context, this.state);
        this.enterRule(localContext, 110, GQLParser.RULE_openGraphType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1488;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 211 || _la === 332) {
                {
                this.state = 1487;
                this.typed();
                }
            }

            this.state = 1490;
            this.match(GQLParser.ANY);
            this.state = 1495;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 289 || _la === 305) {
                {
                this.state = 1492;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 305) {
                    {
                    this.state = 1491;
                    this.match(GQLParser.PROPERTY);
                    }
                }

                this.state = 1494;
                this.match(GQLParser.GRAPH);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ofGraphType(): OfGraphTypeContext {
        let localContext = new OfGraphTypeContext(this.context, this.state);
        this.enterRule(localContext, 112, GQLParser.RULE_ofGraphType);
        let _la: number;
        try {
            this.state = 1512;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 62, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1497;
                this.graphTypeLikeGraph();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1499;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 211 || _la === 332) {
                    {
                    this.state = 1498;
                    this.typed();
                    }
                }

                this.state = 1501;
                this.graphTypeReference();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1503;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 211 || _la === 332) {
                    {
                    this.state = 1502;
                    this.typed();
                    }
                }

                this.state = 1509;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 289 || _la === 305) {
                    {
                    this.state = 1506;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 305) {
                        {
                        this.state = 1505;
                        this.match(GQLParser.PROPERTY);
                        }
                    }

                    this.state = 1508;
                    this.match(GQLParser.GRAPH);
                    }
                }

                this.state = 1511;
                this.nestedGraphTypeSpecification();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public graphTypeLikeGraph(): GraphTypeLikeGraphContext {
        let localContext = new GraphTypeLikeGraphContext(this.context, this.state);
        this.enterRule(localContext, 114, GQLParser.RULE_graphTypeLikeGraph);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1514;
            this.match(GQLParser.LIKE);
            this.state = 1515;
            this.graphExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public graphSource(): GraphSourceContext {
        let localContext = new GraphSourceContext(this.context, this.state);
        this.enterRule(localContext, 116, GQLParser.RULE_graphSource);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1517;
            this.match(GQLParser.AS);
            this.state = 1518;
            this.match(GQLParser.COPY);
            this.state = 1519;
            this.match(GQLParser.OF);
            this.state = 1520;
            this.graphExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropGraphStatement(): DropGraphStatementContext {
        let localContext = new DropGraphStatementContext(this.context, this.state);
        this.enterRule(localContext, 118, GQLParser.RULE_dropGraphStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1522;
            this.match(GQLParser.DROP);
            this.state = 1524;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 305) {
                {
                this.state = 1523;
                this.match(GQLParser.PROPERTY);
                }
            }

            this.state = 1526;
            this.match(GQLParser.GRAPH);
            this.state = 1529;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 108) {
                {
                this.state = 1527;
                this.match(GQLParser.IF);
                this.state = 1528;
                this.match(GQLParser.EXISTS);
                }
            }

            this.state = 1531;
            this.catalogGraphParentAndName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createGraphTypeStatement(): CreateGraphTypeStatementContext {
        let localContext = new CreateGraphTypeStatementContext(this.context, this.state);
        this.enterRule(localContext, 120, GQLParser.RULE_createGraphTypeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1533;
            this.match(GQLParser.CREATE);
            this.state = 1551;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.GRAPH:
            case GQLParser.PROPERTY:
                {
                this.state = 1535;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 305) {
                    {
                    this.state = 1534;
                    this.match(GQLParser.PROPERTY);
                    }
                }

                this.state = 1537;
                this.match(GQLParser.GRAPH);
                this.state = 1538;
                this.match(GQLParser.TYPE);
                this.state = 1542;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 108) {
                    {
                    this.state = 1539;
                    this.match(GQLParser.IF);
                    this.state = 1540;
                    this.match(GQLParser.NOT);
                    this.state = 1541;
                    this.match(GQLParser.EXISTS);
                    }
                }

                }
                break;
            case GQLParser.OR:
                {
                this.state = 1544;
                this.match(GQLParser.OR);
                this.state = 1545;
                this.match(GQLParser.REPLACE);
                this.state = 1547;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 305) {
                    {
                    this.state = 1546;
                    this.match(GQLParser.PROPERTY);
                    }
                }

                this.state = 1549;
                this.match(GQLParser.GRAPH);
                this.state = 1550;
                this.match(GQLParser.TYPE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1553;
            this.catalogGraphTypeParentAndName();
            this.state = 1554;
            this.graphTypeSource();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public graphTypeSource(): GraphTypeSourceContext {
        let localContext = new GraphTypeSourceContext(this.context, this.state);
        this.enterRule(localContext, 122, GQLParser.RULE_graphTypeSource);
        let _la: number;
        try {
            this.state = 1565;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 71, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1557;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 27) {
                    {
                    this.state = 1556;
                    this.match(GQLParser.AS);
                    }
                }

                this.state = 1559;
                this.copyOfGraphType();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1560;
                this.graphTypeLikeGraph();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1562;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 27) {
                    {
                    this.state = 1561;
                    this.match(GQLParser.AS);
                    }
                }

                this.state = 1564;
                this.nestedGraphTypeSpecification();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copyOfGraphType(): CopyOfGraphTypeContext {
        let localContext = new CopyOfGraphTypeContext(this.context, this.state);
        this.enterRule(localContext, 124, GQLParser.RULE_copyOfGraphType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1567;
            this.match(GQLParser.COPY);
            this.state = 1568;
            this.match(GQLParser.OF);
            this.state = 1569;
            this.graphTypeReference();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropGraphTypeStatement(): DropGraphTypeStatementContext {
        let localContext = new DropGraphTypeStatementContext(this.context, this.state);
        this.enterRule(localContext, 126, GQLParser.RULE_dropGraphTypeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1571;
            this.match(GQLParser.DROP);
            this.state = 1573;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 305) {
                {
                this.state = 1572;
                this.match(GQLParser.PROPERTY);
                }
            }

            this.state = 1575;
            this.match(GQLParser.GRAPH);
            this.state = 1576;
            this.match(GQLParser.TYPE);
            this.state = 1579;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 108) {
                {
                this.state = 1577;
                this.match(GQLParser.IF);
                this.state = 1578;
                this.match(GQLParser.EXISTS);
                }
            }

            this.state = 1581;
            this.catalogGraphTypeParentAndName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public callCatalogModifyingProcedureStatement(): CallCatalogModifyingProcedureStatementContext {
        let localContext = new CallCatalogModifyingProcedureStatementContext(this.context, this.state);
        this.enterRule(localContext, 128, GQLParser.RULE_callCatalogModifyingProcedureStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1583;
            this.callProcedureStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public linearDataModifyingStatement(): LinearDataModifyingStatementContext {
        let localContext = new LinearDataModifyingStatementContext(this.context, this.state);
        this.enterRule(localContext, 130, GQLParser.RULE_linearDataModifyingStatement);
        try {
            this.state = 1587;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.USE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1585;
                this.focusedLinearDataModifyingStatement();
                }
                break;
            case GQLParser.CALL:
            case GQLParser.DELETE:
            case GQLParser.DETACH:
            case GQLParser.FILTER:
            case GQLParser.FOR:
            case GQLParser.INSERT:
            case GQLParser.LET:
            case GQLParser.LIMIT:
            case GQLParser.MATCH:
            case GQLParser.NODETACH:
            case GQLParser.OFFSET:
            case GQLParser.OPTIONAL:
            case GQLParser.ORDER:
            case GQLParser.REMOVE:
            case GQLParser.SET:
            case GQLParser.SKIP_RESERVED_WORD:
            case GQLParser.LEFT_BRACE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1586;
                this.ambientLinearDataModifyingStatement();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public focusedLinearDataModifyingStatement(): FocusedLinearDataModifyingStatementContext {
        let localContext = new FocusedLinearDataModifyingStatementContext(this.context, this.state);
        this.enterRule(localContext, 132, GQLParser.RULE_focusedLinearDataModifyingStatement);
        try {
            this.state = 1591;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 75, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1589;
                this.focusedLinearDataModifyingStatementBody();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1590;
                this.focusedNestedDataModifyingProcedureSpecification();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public focusedLinearDataModifyingStatementBody(): FocusedLinearDataModifyingStatementBodyContext {
        let localContext = new FocusedLinearDataModifyingStatementBodyContext(this.context, this.state);
        this.enterRule(localContext, 134, GQLParser.RULE_focusedLinearDataModifyingStatementBody);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1593;
            this.useGraphClause();
            this.state = 1594;
            this.simpleLinearDataAccessingStatement();
            this.state = 1596;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 92 || _la === 180) {
                {
                this.state = 1595;
                this.primitiveResultStatement();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public focusedNestedDataModifyingProcedureSpecification(): FocusedNestedDataModifyingProcedureSpecificationContext {
        let localContext = new FocusedNestedDataModifyingProcedureSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 136, GQLParser.RULE_focusedNestedDataModifyingProcedureSpecification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1598;
            this.useGraphClause();
            this.state = 1599;
            this.nestedDataModifyingProcedureSpecification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ambientLinearDataModifyingStatement(): AmbientLinearDataModifyingStatementContext {
        let localContext = new AmbientLinearDataModifyingStatementContext(this.context, this.state);
        this.enterRule(localContext, 138, GQLParser.RULE_ambientLinearDataModifyingStatement);
        try {
            this.state = 1603;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.CALL:
            case GQLParser.DELETE:
            case GQLParser.DETACH:
            case GQLParser.FILTER:
            case GQLParser.FOR:
            case GQLParser.INSERT:
            case GQLParser.LET:
            case GQLParser.LIMIT:
            case GQLParser.MATCH:
            case GQLParser.NODETACH:
            case GQLParser.OFFSET:
            case GQLParser.OPTIONAL:
            case GQLParser.ORDER:
            case GQLParser.REMOVE:
            case GQLParser.SET:
            case GQLParser.SKIP_RESERVED_WORD:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1601;
                this.ambientLinearDataModifyingStatementBody();
                }
                break;
            case GQLParser.LEFT_BRACE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1602;
                this.nestedDataModifyingProcedureSpecification();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ambientLinearDataModifyingStatementBody(): AmbientLinearDataModifyingStatementBodyContext {
        let localContext = new AmbientLinearDataModifyingStatementBodyContext(this.context, this.state);
        this.enterRule(localContext, 140, GQLParser.RULE_ambientLinearDataModifyingStatementBody);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1605;
            this.simpleLinearDataAccessingStatement();
            this.state = 1607;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 92 || _la === 180) {
                {
                this.state = 1606;
                this.primitiveResultStatement();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleLinearDataAccessingStatement(): SimpleLinearDataAccessingStatementContext {
        let localContext = new SimpleLinearDataAccessingStatementContext(this.context, this.state);
        this.enterRule(localContext, 142, GQLParser.RULE_simpleLinearDataAccessingStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1610;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 1609;
                this.simpleDataAccessingStatement();
                }
                }
                this.state = 1612;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 44 || ((((_la - 76)) & ~0x1F) === 0 && ((1 << (_la - 76)) & 16809993) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & 5242881) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & 721025) !== 0) || ((((_la - 177)) & ~0x1F) === 0 && ((1 << (_la - 177)) & 270337) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleDataAccessingStatement(): SimpleDataAccessingStatementContext {
        let localContext = new SimpleDataAccessingStatementContext(this.context, this.state);
        this.enterRule(localContext, 144, GQLParser.RULE_simpleDataAccessingStatement);
        try {
            this.state = 1616;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 80, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1614;
                this.simpleQueryStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1615;
                this.simpleDataModifyingStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleDataModifyingStatement(): SimpleDataModifyingStatementContext {
        let localContext = new SimpleDataModifyingStatementContext(this.context, this.state);
        this.enterRule(localContext, 146, GQLParser.RULE_simpleDataModifyingStatement);
        try {
            this.state = 1620;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.DELETE:
            case GQLParser.DETACH:
            case GQLParser.INSERT:
            case GQLParser.NODETACH:
            case GQLParser.REMOVE:
            case GQLParser.SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1618;
                this.primitiveDataModifyingStatement();
                }
                break;
            case GQLParser.CALL:
            case GQLParser.OPTIONAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1619;
                this.callDataModifyingProcedureStatement();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public primitiveDataModifyingStatement(): PrimitiveDataModifyingStatementContext {
        let localContext = new PrimitiveDataModifyingStatementContext(this.context, this.state);
        this.enterRule(localContext, 148, GQLParser.RULE_primitiveDataModifyingStatement);
        try {
            this.state = 1626;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.INSERT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1622;
                this.insertStatement();
                }
                break;
            case GQLParser.SET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1623;
                this.setStatement();
                }
                break;
            case GQLParser.REMOVE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1624;
                this.removeStatement();
                }
                break;
            case GQLParser.DELETE:
            case GQLParser.DETACH:
            case GQLParser.NODETACH:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1625;
                this.deleteStatement();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertStatement(): InsertStatementContext {
        let localContext = new InsertStatementContext(this.context, this.state);
        this.enterRule(localContext, 150, GQLParser.RULE_insertStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1628;
            this.match(GQLParser.INSERT);
            this.state = 1629;
            this.insertGraphPattern();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setStatement(): SetStatementContext {
        let localContext = new SetStatementContext(this.context, this.state);
        this.enterRule(localContext, 152, GQLParser.RULE_setStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1631;
            this.match(GQLParser.SET);
            this.state = 1632;
            this.setItemList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setItemList(): SetItemListContext {
        let localContext = new SetItemListContext(this.context, this.state);
        this.enterRule(localContext, 154, GQLParser.RULE_setItemList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1634;
            this.setItem();
            this.state = 1639;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 361) {
                {
                {
                this.state = 1635;
                this.match(GQLParser.COMMA);
                this.state = 1636;
                this.setItem();
                }
                }
                this.state = 1641;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setItem(): SetItemContext {
        let localContext = new SetItemContext(this.context, this.state);
        this.enterRule(localContext, 156, GQLParser.RULE_setItem);
        try {
            this.state = 1645;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 84, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1642;
                this.setPropertyItem();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1643;
                this.setAllPropertiesItem();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1644;
                this.setLabelItem();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setPropertyItem(): SetPropertyItemContext {
        let localContext = new SetPropertyItemContext(this.context, this.state);
        this.enterRule(localContext, 158, GQLParser.RULE_setPropertyItem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1647;
            this.bindingVariableReference();
            this.state = 1648;
            this.match(GQLParser.PERIOD);
            this.state = 1649;
            this.propertyName();
            this.state = 1650;
            this.match(GQLParser.EQUALS_OPERATOR);
            this.state = 1651;
            this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setAllPropertiesItem(): SetAllPropertiesItemContext {
        let localContext = new SetAllPropertiesItemContext(this.context, this.state);
        this.enterRule(localContext, 160, GQLParser.RULE_setAllPropertiesItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1653;
            this.bindingVariableReference();
            this.state = 1654;
            this.match(GQLParser.EQUALS_OPERATOR);
            this.state = 1655;
            this.match(GQLParser.LEFT_BRACE);
            this.state = 1657;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 4 || _la === 5 || ((((_la - 277)) & ~0x1F) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1F) === 0 && ((1 << (_la - 309)) & 131071) !== 0)) {
                {
                this.state = 1656;
                this.propertyKeyValuePairList();
                }
            }

            this.state = 1659;
            this.match(GQLParser.RIGHT_BRACE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setLabelItem(): SetLabelItemContext {
        let localContext = new SetLabelItemContext(this.context, this.state);
        this.enterRule(localContext, 162, GQLParser.RULE_setLabelItem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1661;
            this.bindingVariableReference();
            this.state = 1662;
            this.isOrColon();
            this.state = 1663;
            this.labelName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public removeStatement(): RemoveStatementContext {
        let localContext = new RemoveStatementContext(this.context, this.state);
        this.enterRule(localContext, 164, GQLParser.RULE_removeStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1665;
            this.match(GQLParser.REMOVE);
            this.state = 1666;
            this.removeItemList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public removeItemList(): RemoveItemListContext {
        let localContext = new RemoveItemListContext(this.context, this.state);
        this.enterRule(localContext, 166, GQLParser.RULE_removeItemList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1668;
            this.removeItem();
            this.state = 1673;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 361) {
                {
                {
                this.state = 1669;
                this.match(GQLParser.COMMA);
                this.state = 1670;
                this.removeItem();
                }
                }
                this.state = 1675;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public removeItem(): RemoveItemContext {
        let localContext = new RemoveItemContext(this.context, this.state);
        this.enterRule(localContext, 168, GQLParser.RULE_removeItem);
        try {
            this.state = 1678;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 87, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1676;
                this.removePropertyItem();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1677;
                this.removeLabelItem();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public removePropertyItem(): RemovePropertyItemContext {
        let localContext = new RemovePropertyItemContext(this.context, this.state);
        this.enterRule(localContext, 170, GQLParser.RULE_removePropertyItem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1680;
            this.bindingVariableReference();
            this.state = 1681;
            this.match(GQLParser.PERIOD);
            this.state = 1682;
            this.propertyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public removeLabelItem(): RemoveLabelItemContext {
        let localContext = new RemoveLabelItemContext(this.context, this.state);
        this.enterRule(localContext, 172, GQLParser.RULE_removeLabelItem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1684;
            this.bindingVariableReference();
            this.state = 1685;
            this.isOrColon();
            this.state = 1686;
            this.labelName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deleteStatement(): DeleteStatementContext {
        let localContext = new DeleteStatementContext(this.context, this.state);
        this.enterRule(localContext, 174, GQLParser.RULE_deleteStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1689;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 79 || _la === 150) {
                {
                this.state = 1688;
                _la = this.tokenStream.LA(1);
                if(!(_la === 79 || _la === 150)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 1691;
            this.match(GQLParser.DELETE);
            this.state = 1692;
            this.deleteItemList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deleteItemList(): DeleteItemListContext {
        let localContext = new DeleteItemListContext(this.context, this.state);
        this.enterRule(localContext, 176, GQLParser.RULE_deleteItemList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1694;
            this.deleteItem();
            this.state = 1699;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 361) {
                {
                {
                this.state = 1695;
                this.match(GQLParser.COMMA);
                this.state = 1696;
                this.deleteItem();
                }
                }
                this.state = 1701;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deleteItem(): DeleteItemContext {
        let localContext = new DeleteItemContext(this.context, this.state);
        this.enterRule(localContext, 178, GQLParser.RULE_deleteItem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1702;
            this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public callDataModifyingProcedureStatement(): CallDataModifyingProcedureStatementContext {
        let localContext = new CallDataModifyingProcedureStatementContext(this.context, this.state);
        this.enterRule(localContext, 180, GQLParser.RULE_callDataModifyingProcedureStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1704;
            this.callProcedureStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public compositeQueryStatement(): CompositeQueryStatementContext {
        let localContext = new CompositeQueryStatementContext(this.context, this.state);
        this.enterRule(localContext, 182, GQLParser.RULE_compositeQueryStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1706;
            this.compositeQueryExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public compositeQueryExpression(): CompositeQueryExpressionContext;
    public compositeQueryExpression(_p: number): CompositeQueryExpressionContext;
    public compositeQueryExpression(_p?: number): CompositeQueryExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new CompositeQueryExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 184;
        this.enterRecursionRule(localContext, 184, GQLParser.RULE_compositeQueryExpression, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            this.state = 1709;
            this.compositeQueryPrimary();
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 1717;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 90, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new CompositeQueryExpressionContext(parentContext, parentState);
                    this.pushNewRecursionContext(localContext, _startState, GQLParser.RULE_compositeQueryExpression);
                    this.state = 1711;
                    if (!(this.precpred(this.context, 2))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                    }
                    this.state = 1712;
                    this.queryConjunction();
                    this.state = 1713;
                    this.compositeQueryPrimary();
                    }
                    }
                }
                this.state = 1719;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 90, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public queryConjunction(): QueryConjunctionContext {
        let localContext = new QueryConjunctionContext(this.context, this.state);
        this.enterRule(localContext, 186, GQLParser.RULE_queryConjunction);
        try {
            this.state = 1722;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.EXCEPT:
            case GQLParser.INTERSECT:
            case GQLParser.UNION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1720;
                this.setOperator();
                }
                break;
            case GQLParser.OTHERWISE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1721;
                this.match(GQLParser.OTHERWISE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setOperator(): SetOperatorContext {
        let localContext = new SetOperatorContext(this.context, this.state);
        this.enterRule(localContext, 188, GQLParser.RULE_setOperator);
        let _la: number;
        try {
            this.state = 1736;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.UNION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1724;
                this.match(GQLParser.UNION);
                this.state = 1726;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 22 || _la === 80) {
                    {
                    this.state = 1725;
                    this.setQuantifier();
                    }
                }

                }
                break;
            case GQLParser.EXCEPT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1728;
                this.match(GQLParser.EXCEPT);
                this.state = 1730;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 22 || _la === 80) {
                    {
                    this.state = 1729;
                    this.setQuantifier();
                    }
                }

                }
                break;
            case GQLParser.INTERSECT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1732;
                this.match(GQLParser.INTERSECT);
                this.state = 1734;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 22 || _la === 80) {
                    {
                    this.state = 1733;
                    this.setQuantifier();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public compositeQueryPrimary(): CompositeQueryPrimaryContext {
        let localContext = new CompositeQueryPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 190, GQLParser.RULE_compositeQueryPrimary);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1738;
            this.linearQueryStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public linearQueryStatement(): LinearQueryStatementContext {
        let localContext = new LinearQueryStatementContext(this.context, this.state);
        this.enterRule(localContext, 192, GQLParser.RULE_linearQueryStatement);
        try {
            this.state = 1742;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.SELECT:
            case GQLParser.USE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1740;
                this.focusedLinearQueryStatement();
                }
                break;
            case GQLParser.CALL:
            case GQLParser.FILTER:
            case GQLParser.FINISH:
            case GQLParser.FOR:
            case GQLParser.LET:
            case GQLParser.LIMIT:
            case GQLParser.MATCH:
            case GQLParser.OFFSET:
            case GQLParser.OPTIONAL:
            case GQLParser.ORDER:
            case GQLParser.RETURN:
            case GQLParser.SKIP_RESERVED_WORD:
            case GQLParser.LEFT_BRACE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1741;
                this.ambientLinearQueryStatement();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public focusedLinearQueryStatement(): FocusedLinearQueryStatementContext {
        let localContext = new FocusedLinearQueryStatementContext(this.context, this.state);
        this.enterRule(localContext, 194, GQLParser.RULE_focusedLinearQueryStatement);
        try {
            let alternative: number;
            this.state = 1754;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 98, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1747;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 97, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1744;
                        this.focusedLinearQueryStatementPart();
                        }
                        }
                    }
                    this.state = 1749;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 97, this.context);
                }
                this.state = 1750;
                this.focusedLinearQueryAndPrimitiveResultStatementPart();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1751;
                this.focusedPrimitiveResultStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1752;
                this.focusedNestedQuerySpecification();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1753;
                this.selectStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public focusedLinearQueryStatementPart(): FocusedLinearQueryStatementPartContext {
        let localContext = new FocusedLinearQueryStatementPartContext(this.context, this.state);
        this.enterRule(localContext, 196, GQLParser.RULE_focusedLinearQueryStatementPart);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1756;
            this.useGraphClause();
            this.state = 1757;
            this.simpleLinearQueryStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public focusedLinearQueryAndPrimitiveResultStatementPart(): FocusedLinearQueryAndPrimitiveResultStatementPartContext {
        let localContext = new FocusedLinearQueryAndPrimitiveResultStatementPartContext(this.context, this.state);
        this.enterRule(localContext, 198, GQLParser.RULE_focusedLinearQueryAndPrimitiveResultStatementPart);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1759;
            this.useGraphClause();
            this.state = 1760;
            this.simpleLinearQueryStatement();
            this.state = 1761;
            this.primitiveResultStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public focusedPrimitiveResultStatement(): FocusedPrimitiveResultStatementContext {
        let localContext = new FocusedPrimitiveResultStatementContext(this.context, this.state);
        this.enterRule(localContext, 200, GQLParser.RULE_focusedPrimitiveResultStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1763;
            this.useGraphClause();
            this.state = 1764;
            this.primitiveResultStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public focusedNestedQuerySpecification(): FocusedNestedQuerySpecificationContext {
        let localContext = new FocusedNestedQuerySpecificationContext(this.context, this.state);
        this.enterRule(localContext, 202, GQLParser.RULE_focusedNestedQuerySpecification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1766;
            this.useGraphClause();
            this.state = 1767;
            this.nestedQuerySpecification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ambientLinearQueryStatement(): AmbientLinearQueryStatementContext {
        let localContext = new AmbientLinearQueryStatementContext(this.context, this.state);
        this.enterRule(localContext, 204, GQLParser.RULE_ambientLinearQueryStatement);
        let _la: number;
        try {
            this.state = 1774;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.CALL:
            case GQLParser.FILTER:
            case GQLParser.FINISH:
            case GQLParser.FOR:
            case GQLParser.LET:
            case GQLParser.LIMIT:
            case GQLParser.MATCH:
            case GQLParser.OFFSET:
            case GQLParser.OPTIONAL:
            case GQLParser.ORDER:
            case GQLParser.RETURN:
            case GQLParser.SKIP_RESERVED_WORD:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1770;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 44 || _la === 91 || _la === 100 || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 1610620933) !== 0) || _la === 162 || _la === 195) {
                    {
                    this.state = 1769;
                    this.simpleLinearQueryStatement();
                    }
                }

                this.state = 1772;
                this.primitiveResultStatement();
                }
                break;
            case GQLParser.LEFT_BRACE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1773;
                this.nestedQuerySpecification();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleLinearQueryStatement(): SimpleLinearQueryStatementContext {
        let localContext = new SimpleLinearQueryStatementContext(this.context, this.state);
        this.enterRule(localContext, 206, GQLParser.RULE_simpleLinearQueryStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1777;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 1776;
                this.simpleQueryStatement();
                }
                }
                this.state = 1779;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 44 || _la === 91 || _la === 100 || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 1610620933) !== 0) || _la === 162 || _la === 195);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleQueryStatement(): SimpleQueryStatementContext {
        let localContext = new SimpleQueryStatementContext(this.context, this.state);
        this.enterRule(localContext, 208, GQLParser.RULE_simpleQueryStatement);
        try {
            this.state = 1783;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 102, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1781;
                this.primitiveQueryStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1782;
                this.callQueryStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public primitiveQueryStatement(): PrimitiveQueryStatementContext {
        let localContext = new PrimitiveQueryStatementContext(this.context, this.state);
        this.enterRule(localContext, 210, GQLParser.RULE_primitiveQueryStatement);
        try {
            this.state = 1790;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.MATCH:
            case GQLParser.OPTIONAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1785;
                this.matchStatement();
                }
                break;
            case GQLParser.LET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1786;
                this.letStatement();
                }
                break;
            case GQLParser.FOR:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1787;
                this.forStatement();
                }
                break;
            case GQLParser.FILTER:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1788;
                this.filterStatement();
                }
                break;
            case GQLParser.LIMIT:
            case GQLParser.OFFSET:
            case GQLParser.ORDER:
            case GQLParser.SKIP_RESERVED_WORD:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1789;
                this.orderByAndPageStatement();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public matchStatement(): MatchStatementContext {
        let localContext = new MatchStatementContext(this.context, this.state);
        this.enterRule(localContext, 212, GQLParser.RULE_matchStatement);
        try {
            this.state = 1794;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.MATCH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1792;
                this.simpleMatchStatement();
                }
                break;
            case GQLParser.OPTIONAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1793;
                this.optionalMatchStatement();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleMatchStatement(): SimpleMatchStatementContext {
        let localContext = new SimpleMatchStatementContext(this.context, this.state);
        this.enterRule(localContext, 214, GQLParser.RULE_simpleMatchStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1796;
            this.match(GQLParser.MATCH);
            this.state = 1797;
            this.graphPatternBindingTable();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optionalMatchStatement(): OptionalMatchStatementContext {
        let localContext = new OptionalMatchStatementContext(this.context, this.state);
        this.enterRule(localContext, 216, GQLParser.RULE_optionalMatchStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1799;
            this.match(GQLParser.OPTIONAL);
            this.state = 1800;
            this.optionalOperand();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optionalOperand(): OptionalOperandContext {
        let localContext = new OptionalOperandContext(this.context, this.state);
        this.enterRule(localContext, 218, GQLParser.RULE_optionalOperand);
        try {
            this.state = 1811;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.MATCH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1802;
                this.simpleMatchStatement();
                }
                break;
            case GQLParser.LEFT_BRACE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1803;
                this.match(GQLParser.LEFT_BRACE);
                this.state = 1804;
                this.matchStatementBlock();
                this.state = 1805;
                this.match(GQLParser.RIGHT_BRACE);
                }
                break;
            case GQLParser.LEFT_PAREN:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1807;
                this.match(GQLParser.LEFT_PAREN);
                this.state = 1808;
                this.matchStatementBlock();
                this.state = 1809;
                this.match(GQLParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public matchStatementBlock(): MatchStatementBlockContext {
        let localContext = new MatchStatementBlockContext(this.context, this.state);
        this.enterRule(localContext, 220, GQLParser.RULE_matchStatementBlock);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1814;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 1813;
                this.matchStatement();
                }
                }
                this.state = 1816;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 143 || _la === 160);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public callQueryStatement(): CallQueryStatementContext {
        let localContext = new CallQueryStatementContext(this.context, this.state);
        this.enterRule(localContext, 222, GQLParser.RULE_callQueryStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1818;
            this.callProcedureStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filterStatement(): FilterStatementContext {
        let localContext = new FilterStatementContext(this.context, this.state);
        this.enterRule(localContext, 224, GQLParser.RULE_filterStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1820;
            this.match(GQLParser.FILTER);
            this.state = 1823;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.WHERE:
                {
                this.state = 1821;
                this.whereClause();
                }
                break;
            case GQLParser.BOOLEAN_LITERAL:
            case GQLParser.SINGLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.BYTE_STRING_LITERAL:
            case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_INTEGER:
            case GQLParser.UNSIGNED_HEXADECIMAL_INTEGER:
            case GQLParser.UNSIGNED_OCTAL_INTEGER:
            case GQLParser.UNSIGNED_BINARY_INTEGER:
            case GQLParser.ABS:
            case GQLParser.ACOS:
            case GQLParser.ALL_DIFFERENT:
            case GQLParser.ARRAY:
            case GQLParser.ASIN:
            case GQLParser.ATAN:
            case GQLParser.AVG:
            case GQLParser.BTRIM:
            case GQLParser.BYTE_LENGTH:
            case GQLParser.CARDINALITY:
            case GQLParser.CASE:
            case GQLParser.CAST:
            case GQLParser.CEIL:
            case GQLParser.CEILING:
            case GQLParser.CHAR_LENGTH:
            case GQLParser.CHARACTER_LENGTH:
            case GQLParser.COALESCE:
            case GQLParser.COLLECT_LIST:
            case GQLParser.COS:
            case GQLParser.COSH:
            case GQLParser.COT:
            case GQLParser.COUNT:
            case GQLParser.CURRENT_DATE:
            case GQLParser.CURRENT_TIME:
            case GQLParser.CURRENT_TIMESTAMP:
            case GQLParser.DATE:
            case GQLParser.DATETIME:
            case GQLParser.DEGREES:
            case GQLParser.DURATION:
            case GQLParser.DURATION_BETWEEN:
            case GQLParser.ELEMENT_ID:
            case GQLParser.EXISTS:
            case GQLParser.EXP:
            case GQLParser.FLOOR:
            case GQLParser.GROUP:
            case GQLParser.LEFT:
            case GQLParser.LET:
            case GQLParser.LIST:
            case GQLParser.LN:
            case GQLParser.LOCAL_DATETIME:
            case GQLParser.LOCAL_TIME:
            case GQLParser.LOCAL_TIMESTAMP:
            case GQLParser.LOG_KW:
            case GQLParser.LOG10:
            case GQLParser.LOWER:
            case GQLParser.LTRIM:
            case GQLParser.MAX:
            case GQLParser.MIN:
            case GQLParser.MOD:
            case GQLParser.NORMALIZE:
            case GQLParser.NOT:
            case GQLParser.NULL_KW:
            case GQLParser.NULLIF:
            case GQLParser.OCTET_LENGTH:
            case GQLParser.PATH:
            case GQLParser.PATH_LENGTH:
            case GQLParser.PERCENTILE_CONT:
            case GQLParser.PERCENTILE_DISC:
            case GQLParser.POWER:
            case GQLParser.PROPERTY_EXISTS:
            case GQLParser.RADIANS:
            case GQLParser.RECORD:
            case GQLParser.RIGHT:
            case GQLParser.RTRIM:
            case GQLParser.SAME:
            case GQLParser.SESSION_USER:
            case GQLParser.SIN:
            case GQLParser.SINH:
            case GQLParser.SIZE:
            case GQLParser.SQRT:
            case GQLParser.STDDEV_POP:
            case GQLParser.STDDEV_SAMP:
            case GQLParser.SUM:
            case GQLParser.TAN:
            case GQLParser.TANH:
            case GQLParser.TIME:
            case GQLParser.TIMESTAMP:
            case GQLParser.TRIM:
            case GQLParser.UPPER:
            case GQLParser.VALUE:
            case GQLParser.ZONED_DATETIME:
            case GQLParser.ZONED_TIME:
            case GQLParser.ACYCLIC:
            case GQLParser.BINDING:
            case GQLParser.BINDINGS:
            case GQLParser.CONNECTING:
            case GQLParser.DESTINATION:
            case GQLParser.DIFFERENT:
            case GQLParser.DIRECTED:
            case GQLParser.EDGE:
            case GQLParser.EDGES:
            case GQLParser.ELEMENT:
            case GQLParser.ELEMENTS:
            case GQLParser.FIRST:
            case GQLParser.GRAPH:
            case GQLParser.GROUPS:
            case GQLParser.KEEP:
            case GQLParser.LABEL:
            case GQLParser.LABELED:
            case GQLParser.LABELS:
            case GQLParser.LAST:
            case GQLParser.NFC:
            case GQLParser.NFD:
            case GQLParser.NFKC:
            case GQLParser.NFKD:
            case GQLParser.NO:
            case GQLParser.NODE:
            case GQLParser.NORMALIZED:
            case GQLParser.ONLY:
            case GQLParser.ORDINALITY:
            case GQLParser.PROPERTY:
            case GQLParser.READ:
            case GQLParser.RELATIONSHIP:
            case GQLParser.RELATIONSHIPS:
            case GQLParser.REPEATABLE:
            case GQLParser.SHORTEST:
            case GQLParser.SIMPLE:
            case GQLParser.SOURCE:
            case GQLParser.TABLE:
            case GQLParser.TEMP:
            case GQLParser.TO:
            case GQLParser.TRAIL:
            case GQLParser.TRANSACTION:
            case GQLParser.TYPE:
            case GQLParser.UNDIRECTED:
            case GQLParser.VERTEX:
            case GQLParser.WALK:
            case GQLParser.WITHOUT:
            case GQLParser.WRITE:
            case GQLParser.ZONE:
            case GQLParser.REGULAR_IDENTIFIER:
            case GQLParser.GENERAL_PARAMETER_REFERENCE:
            case GQLParser.LEFT_BRACE:
            case GQLParser.LEFT_BRACKET:
            case GQLParser.LEFT_PAREN:
            case GQLParser.MINUS_SIGN:
            case GQLParser.PLUS_SIGN:
                {
                this.state = 1822;
                this.searchCondition();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public letStatement(): LetStatementContext {
        let localContext = new LetStatementContext(this.context, this.state);
        this.enterRule(localContext, 226, GQLParser.RULE_letStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1825;
            this.match(GQLParser.LET);
            this.state = 1826;
            this.letVariableDefinitionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public letVariableDefinitionList(): LetVariableDefinitionListContext {
        let localContext = new LetVariableDefinitionListContext(this.context, this.state);
        this.enterRule(localContext, 228, GQLParser.RULE_letVariableDefinitionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1828;
            this.letVariableDefinition();
            this.state = 1833;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 361) {
                {
                {
                this.state = 1829;
                this.match(GQLParser.COMMA);
                this.state = 1830;
                this.letVariableDefinition();
                }
                }
                this.state = 1835;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public letVariableDefinition(): LetVariableDefinitionContext {
        let localContext = new LetVariableDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 230, GQLParser.RULE_letVariableDefinition);
        try {
            this.state = 1841;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1836;
                this.valueVariableDefinition();
                }
                break;
            case GQLParser.ACYCLIC:
            case GQLParser.BINDING:
            case GQLParser.BINDINGS:
            case GQLParser.CONNECTING:
            case GQLParser.DESTINATION:
            case GQLParser.DIFFERENT:
            case GQLParser.DIRECTED:
            case GQLParser.EDGE:
            case GQLParser.EDGES:
            case GQLParser.ELEMENT:
            case GQLParser.ELEMENTS:
            case GQLParser.FIRST:
            case GQLParser.GRAPH:
            case GQLParser.GROUPS:
            case GQLParser.KEEP:
            case GQLParser.LABEL:
            case GQLParser.LABELED:
            case GQLParser.LABELS:
            case GQLParser.LAST:
            case GQLParser.NFC:
            case GQLParser.NFD:
            case GQLParser.NFKC:
            case GQLParser.NFKD:
            case GQLParser.NO:
            case GQLParser.NODE:
            case GQLParser.NORMALIZED:
            case GQLParser.ONLY:
            case GQLParser.ORDINALITY:
            case GQLParser.PROPERTY:
            case GQLParser.READ:
            case GQLParser.RELATIONSHIP:
            case GQLParser.RELATIONSHIPS:
            case GQLParser.REPEATABLE:
            case GQLParser.SHORTEST:
            case GQLParser.SIMPLE:
            case GQLParser.SOURCE:
            case GQLParser.TABLE:
            case GQLParser.TEMP:
            case GQLParser.TO:
            case GQLParser.TRAIL:
            case GQLParser.TRANSACTION:
            case GQLParser.TYPE:
            case GQLParser.UNDIRECTED:
            case GQLParser.VERTEX:
            case GQLParser.WALK:
            case GQLParser.WITHOUT:
            case GQLParser.WRITE:
            case GQLParser.ZONE:
            case GQLParser.REGULAR_IDENTIFIER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1837;
                this.bindingVariable();
                this.state = 1838;
                this.match(GQLParser.EQUALS_OPERATOR);
                this.state = 1839;
                this.valueExpression(0);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public forStatement(): ForStatementContext {
        let localContext = new ForStatementContext(this.context, this.state);
        this.enterRule(localContext, 232, GQLParser.RULE_forStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1843;
            this.match(GQLParser.FOR);
            this.state = 1844;
            this.forItem();
            this.state = 1846;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 231) {
                {
                this.state = 1845;
                this.forOrdinalityOrOffset();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public forItem(): ForItemContext {
        let localContext = new ForItemContext(this.context, this.state);
        this.enterRule(localContext, 234, GQLParser.RULE_forItem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1848;
            this.forItemAlias();
            this.state = 1849;
            this.forItemSource();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public forItemAlias(): ForItemAliasContext {
        let localContext = new ForItemAliasContext(this.context, this.state);
        this.enterRule(localContext, 236, GQLParser.RULE_forItemAlias);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1851;
            this.bindingVariable();
            this.state = 1852;
            this.match(GQLParser.IN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public forItemSource(): ForItemSourceContext {
        let localContext = new ForItemSourceContext(this.context, this.state);
        this.enterRule(localContext, 238, GQLParser.RULE_forItemSource);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1854;
            this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public forOrdinalityOrOffset(): ForOrdinalityOrOffsetContext {
        let localContext = new ForOrdinalityOrOffsetContext(this.context, this.state);
        this.enterRule(localContext, 240, GQLParser.RULE_forOrdinalityOrOffset);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1856;
            this.match(GQLParser.WITH);
            this.state = 1857;
            _la = this.tokenStream.LA(1);
            if(!(_la === 159 || _la === 304)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1858;
            this.bindingVariable();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderByAndPageStatement(): OrderByAndPageStatementContext {
        let localContext = new OrderByAndPageStatementContext(this.context, this.state);
        this.enterRule(localContext, 242, GQLParser.RULE_orderByAndPageStatement);
        try {
            this.state = 1872;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.ORDER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1860;
                this.orderByClause();
                this.state = 1862;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 111, this.context) ) {
                case 1:
                    {
                    this.state = 1861;
                    this.offsetClause();
                    }
                    break;
                }
                this.state = 1865;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 112, this.context) ) {
                case 1:
                    {
                    this.state = 1864;
                    this.limitClause();
                    }
                    break;
                }
                }
                break;
            case GQLParser.OFFSET:
            case GQLParser.SKIP_RESERVED_WORD:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1867;
                this.offsetClause();
                this.state = 1869;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 113, this.context) ) {
                case 1:
                    {
                    this.state = 1868;
                    this.limitClause();
                    }
                    break;
                }
                }
                break;
            case GQLParser.LIMIT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1871;
                this.limitClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public primitiveResultStatement(): PrimitiveResultStatementContext {
        let localContext = new PrimitiveResultStatementContext(this.context, this.state);
        this.enterRule(localContext, 244, GQLParser.RULE_primitiveResultStatement);
        try {
            this.state = 1879;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.RETURN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1874;
                this.returnStatement();
                this.state = 1876;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 115, this.context) ) {
                case 1:
                    {
                    this.state = 1875;
                    this.orderByAndPageStatement();
                    }
                    break;
                }
                }
                break;
            case GQLParser.FINISH:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1878;
                this.match(GQLParser.FINISH);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returnStatement(): ReturnStatementContext {
        let localContext = new ReturnStatementContext(this.context, this.state);
        this.enterRule(localContext, 246, GQLParser.RULE_returnStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1881;
            this.match(GQLParser.RETURN);
            this.state = 1882;
            this.returnStatementBody();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returnStatementBody(): ReturnStatementBodyContext {
        let localContext = new ReturnStatementBodyContext(this.context, this.state);
        this.enterRule(localContext, 248, GQLParser.RULE_returnStatementBody);
        let _la: number;
        try {
            this.state = 1896;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 120, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1885;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 22 || _la === 80) {
                    {
                    this.state = 1884;
                    this.setQuantifier();
                    }
                }

                this.state = 1889;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case GQLParser.ASTERISK:
                    {
                    this.state = 1887;
                    this.match(GQLParser.ASTERISK);
                    }
                    break;
                case GQLParser.BOOLEAN_LITERAL:
                case GQLParser.SINGLE_QUOTED_CHARACTER_SEQUENCE:
                case GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE:
                case GQLParser.BYTE_STRING_LITERAL:
                case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
                case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
                case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
                case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
                case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
                case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
                case GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
                case GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
                case GQLParser.UNSIGNED_DECIMAL_INTEGER:
                case GQLParser.UNSIGNED_HEXADECIMAL_INTEGER:
                case GQLParser.UNSIGNED_OCTAL_INTEGER:
                case GQLParser.UNSIGNED_BINARY_INTEGER:
                case GQLParser.ABS:
                case GQLParser.ACOS:
                case GQLParser.ALL_DIFFERENT:
                case GQLParser.ARRAY:
                case GQLParser.ASIN:
                case GQLParser.ATAN:
                case GQLParser.AVG:
                case GQLParser.BTRIM:
                case GQLParser.BYTE_LENGTH:
                case GQLParser.CARDINALITY:
                case GQLParser.CASE:
                case GQLParser.CAST:
                case GQLParser.CEIL:
                case GQLParser.CEILING:
                case GQLParser.CHAR_LENGTH:
                case GQLParser.CHARACTER_LENGTH:
                case GQLParser.COALESCE:
                case GQLParser.COLLECT_LIST:
                case GQLParser.COS:
                case GQLParser.COSH:
                case GQLParser.COT:
                case GQLParser.COUNT:
                case GQLParser.CURRENT_DATE:
                case GQLParser.CURRENT_TIME:
                case GQLParser.CURRENT_TIMESTAMP:
                case GQLParser.DATE:
                case GQLParser.DATETIME:
                case GQLParser.DEGREES:
                case GQLParser.DURATION:
                case GQLParser.DURATION_BETWEEN:
                case GQLParser.ELEMENT_ID:
                case GQLParser.EXISTS:
                case GQLParser.EXP:
                case GQLParser.FLOOR:
                case GQLParser.GROUP:
                case GQLParser.LEFT:
                case GQLParser.LET:
                case GQLParser.LIST:
                case GQLParser.LN:
                case GQLParser.LOCAL_DATETIME:
                case GQLParser.LOCAL_TIME:
                case GQLParser.LOCAL_TIMESTAMP:
                case GQLParser.LOG_KW:
                case GQLParser.LOG10:
                case GQLParser.LOWER:
                case GQLParser.LTRIM:
                case GQLParser.MAX:
                case GQLParser.MIN:
                case GQLParser.MOD:
                case GQLParser.NORMALIZE:
                case GQLParser.NOT:
                case GQLParser.NULL_KW:
                case GQLParser.NULLIF:
                case GQLParser.OCTET_LENGTH:
                case GQLParser.PATH:
                case GQLParser.PATH_LENGTH:
                case GQLParser.PERCENTILE_CONT:
                case GQLParser.PERCENTILE_DISC:
                case GQLParser.POWER:
                case GQLParser.PROPERTY_EXISTS:
                case GQLParser.RADIANS:
                case GQLParser.RECORD:
                case GQLParser.RIGHT:
                case GQLParser.RTRIM:
                case GQLParser.SAME:
                case GQLParser.SESSION_USER:
                case GQLParser.SIN:
                case GQLParser.SINH:
                case GQLParser.SIZE:
                case GQLParser.SQRT:
                case GQLParser.STDDEV_POP:
                case GQLParser.STDDEV_SAMP:
                case GQLParser.SUM:
                case GQLParser.TAN:
                case GQLParser.TANH:
                case GQLParser.TIME:
                case GQLParser.TIMESTAMP:
                case GQLParser.TRIM:
                case GQLParser.UPPER:
                case GQLParser.VALUE:
                case GQLParser.ZONED_DATETIME:
                case GQLParser.ZONED_TIME:
                case GQLParser.ACYCLIC:
                case GQLParser.BINDING:
                case GQLParser.BINDINGS:
                case GQLParser.CONNECTING:
                case GQLParser.DESTINATION:
                case GQLParser.DIFFERENT:
                case GQLParser.DIRECTED:
                case GQLParser.EDGE:
                case GQLParser.EDGES:
                case GQLParser.ELEMENT:
                case GQLParser.ELEMENTS:
                case GQLParser.FIRST:
                case GQLParser.GRAPH:
                case GQLParser.GROUPS:
                case GQLParser.KEEP:
                case GQLParser.LABEL:
                case GQLParser.LABELED:
                case GQLParser.LABELS:
                case GQLParser.LAST:
                case GQLParser.NFC:
                case GQLParser.NFD:
                case GQLParser.NFKC:
                case GQLParser.NFKD:
                case GQLParser.NO:
                case GQLParser.NODE:
                case GQLParser.NORMALIZED:
                case GQLParser.ONLY:
                case GQLParser.ORDINALITY:
                case GQLParser.PROPERTY:
                case GQLParser.READ:
                case GQLParser.RELATIONSHIP:
                case GQLParser.RELATIONSHIPS:
                case GQLParser.REPEATABLE:
                case GQLParser.SHORTEST:
                case GQLParser.SIMPLE:
                case GQLParser.SOURCE:
                case GQLParser.TABLE:
                case GQLParser.TEMP:
                case GQLParser.TO:
                case GQLParser.TRAIL:
                case GQLParser.TRANSACTION:
                case GQLParser.TYPE:
                case GQLParser.UNDIRECTED:
                case GQLParser.VERTEX:
                case GQLParser.WALK:
                case GQLParser.WITHOUT:
                case GQLParser.WRITE:
                case GQLParser.ZONE:
                case GQLParser.REGULAR_IDENTIFIER:
                case GQLParser.GENERAL_PARAMETER_REFERENCE:
                case GQLParser.LEFT_BRACE:
                case GQLParser.LEFT_BRACKET:
                case GQLParser.LEFT_PAREN:
                case GQLParser.MINUS_SIGN:
                case GQLParser.PLUS_SIGN:
                    {
                    this.state = 1888;
                    this.returnItemList();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1892;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 119, this.context) ) {
                case 1:
                    {
                    this.state = 1891;
                    this.groupByClause();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1894;
                this.match(GQLParser.NO);
                this.state = 1895;
                this.match(GQLParser.BINDINGS);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returnItemList(): ReturnItemListContext {
        let localContext = new ReturnItemListContext(this.context, this.state);
        this.enterRule(localContext, 250, GQLParser.RULE_returnItemList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1898;
            this.returnItem();
            this.state = 1903;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 121, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1899;
                    this.match(GQLParser.COMMA);
                    this.state = 1900;
                    this.returnItem();
                    }
                    }
                }
                this.state = 1905;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 121, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returnItem(): ReturnItemContext {
        let localContext = new ReturnItemContext(this.context, this.state);
        this.enterRule(localContext, 252, GQLParser.RULE_returnItem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1906;
            this.aggregatingValueExpression();
            this.state = 1908;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 122, this.context) ) {
            case 1:
                {
                this.state = 1907;
                this.returnItemAlias();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returnItemAlias(): ReturnItemAliasContext {
        let localContext = new ReturnItemAliasContext(this.context, this.state);
        this.enterRule(localContext, 254, GQLParser.RULE_returnItemAlias);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1910;
            this.match(GQLParser.AS);
            this.state = 1911;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectStatement(): SelectStatementContext {
        let localContext = new SelectStatementContext(this.context, this.state);
        this.enterRule(localContext, 256, GQLParser.RULE_selectStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1913;
            this.match(GQLParser.SELECT);
            this.state = 1915;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 22 || _la === 80) {
                {
                this.state = 1914;
                this.setQuantifier();
                }
            }

            this.state = 1919;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.ASTERISK:
                {
                this.state = 1917;
                this.match(GQLParser.ASTERISK);
                }
                break;
            case GQLParser.BOOLEAN_LITERAL:
            case GQLParser.SINGLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.BYTE_STRING_LITERAL:
            case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_INTEGER:
            case GQLParser.UNSIGNED_HEXADECIMAL_INTEGER:
            case GQLParser.UNSIGNED_OCTAL_INTEGER:
            case GQLParser.UNSIGNED_BINARY_INTEGER:
            case GQLParser.ABS:
            case GQLParser.ACOS:
            case GQLParser.ALL_DIFFERENT:
            case GQLParser.ARRAY:
            case GQLParser.ASIN:
            case GQLParser.ATAN:
            case GQLParser.AVG:
            case GQLParser.BTRIM:
            case GQLParser.BYTE_LENGTH:
            case GQLParser.CARDINALITY:
            case GQLParser.CASE:
            case GQLParser.CAST:
            case GQLParser.CEIL:
            case GQLParser.CEILING:
            case GQLParser.CHAR_LENGTH:
            case GQLParser.CHARACTER_LENGTH:
            case GQLParser.COALESCE:
            case GQLParser.COLLECT_LIST:
            case GQLParser.COS:
            case GQLParser.COSH:
            case GQLParser.COT:
            case GQLParser.COUNT:
            case GQLParser.CURRENT_DATE:
            case GQLParser.CURRENT_TIME:
            case GQLParser.CURRENT_TIMESTAMP:
            case GQLParser.DATE:
            case GQLParser.DATETIME:
            case GQLParser.DEGREES:
            case GQLParser.DURATION:
            case GQLParser.DURATION_BETWEEN:
            case GQLParser.ELEMENT_ID:
            case GQLParser.EXISTS:
            case GQLParser.EXP:
            case GQLParser.FLOOR:
            case GQLParser.GROUP:
            case GQLParser.LEFT:
            case GQLParser.LET:
            case GQLParser.LIST:
            case GQLParser.LN:
            case GQLParser.LOCAL_DATETIME:
            case GQLParser.LOCAL_TIME:
            case GQLParser.LOCAL_TIMESTAMP:
            case GQLParser.LOG_KW:
            case GQLParser.LOG10:
            case GQLParser.LOWER:
            case GQLParser.LTRIM:
            case GQLParser.MAX:
            case GQLParser.MIN:
            case GQLParser.MOD:
            case GQLParser.NORMALIZE:
            case GQLParser.NOT:
            case GQLParser.NULL_KW:
            case GQLParser.NULLIF:
            case GQLParser.OCTET_LENGTH:
            case GQLParser.PATH:
            case GQLParser.PATH_LENGTH:
            case GQLParser.PERCENTILE_CONT:
            case GQLParser.PERCENTILE_DISC:
            case GQLParser.POWER:
            case GQLParser.PROPERTY_EXISTS:
            case GQLParser.RADIANS:
            case GQLParser.RECORD:
            case GQLParser.RIGHT:
            case GQLParser.RTRIM:
            case GQLParser.SAME:
            case GQLParser.SESSION_USER:
            case GQLParser.SIN:
            case GQLParser.SINH:
            case GQLParser.SIZE:
            case GQLParser.SQRT:
            case GQLParser.STDDEV_POP:
            case GQLParser.STDDEV_SAMP:
            case GQLParser.SUM:
            case GQLParser.TAN:
            case GQLParser.TANH:
            case GQLParser.TIME:
            case GQLParser.TIMESTAMP:
            case GQLParser.TRIM:
            case GQLParser.UPPER:
            case GQLParser.VALUE:
            case GQLParser.ZONED_DATETIME:
            case GQLParser.ZONED_TIME:
            case GQLParser.ACYCLIC:
            case GQLParser.BINDING:
            case GQLParser.BINDINGS:
            case GQLParser.CONNECTING:
            case GQLParser.DESTINATION:
            case GQLParser.DIFFERENT:
            case GQLParser.DIRECTED:
            case GQLParser.EDGE:
            case GQLParser.EDGES:
            case GQLParser.ELEMENT:
            case GQLParser.ELEMENTS:
            case GQLParser.FIRST:
            case GQLParser.GRAPH:
            case GQLParser.GROUPS:
            case GQLParser.KEEP:
            case GQLParser.LABEL:
            case GQLParser.LABELED:
            case GQLParser.LABELS:
            case GQLParser.LAST:
            case GQLParser.NFC:
            case GQLParser.NFD:
            case GQLParser.NFKC:
            case GQLParser.NFKD:
            case GQLParser.NO:
            case GQLParser.NODE:
            case GQLParser.NORMALIZED:
            case GQLParser.ONLY:
            case GQLParser.ORDINALITY:
            case GQLParser.PROPERTY:
            case GQLParser.READ:
            case GQLParser.RELATIONSHIP:
            case GQLParser.RELATIONSHIPS:
            case GQLParser.REPEATABLE:
            case GQLParser.SHORTEST:
            case GQLParser.SIMPLE:
            case GQLParser.SOURCE:
            case GQLParser.TABLE:
            case GQLParser.TEMP:
            case GQLParser.TO:
            case GQLParser.TRAIL:
            case GQLParser.TRANSACTION:
            case GQLParser.TYPE:
            case GQLParser.UNDIRECTED:
            case GQLParser.VERTEX:
            case GQLParser.WALK:
            case GQLParser.WITHOUT:
            case GQLParser.WRITE:
            case GQLParser.ZONE:
            case GQLParser.REGULAR_IDENTIFIER:
            case GQLParser.GENERAL_PARAMETER_REFERENCE:
            case GQLParser.LEFT_BRACE:
            case GQLParser.LEFT_BRACKET:
            case GQLParser.LEFT_PAREN:
            case GQLParser.MINUS_SIGN:
            case GQLParser.PLUS_SIGN:
                {
                this.state = 1918;
                this.selectItemList();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1940;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 131, this.context) ) {
            case 1:
                {
                this.state = 1921;
                this.selectStatementBody();
                this.state = 1923;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 125, this.context) ) {
                case 1:
                    {
                    this.state = 1922;
                    this.whereClause();
                    }
                    break;
                }
                this.state = 1926;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 126, this.context) ) {
                case 1:
                    {
                    this.state = 1925;
                    this.groupByClause();
                    }
                    break;
                }
                this.state = 1929;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 127, this.context) ) {
                case 1:
                    {
                    this.state = 1928;
                    this.havingClause();
                    }
                    break;
                }
                this.state = 1932;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 128, this.context) ) {
                case 1:
                    {
                    this.state = 1931;
                    this.orderByClause();
                    }
                    break;
                }
                this.state = 1935;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 129, this.context) ) {
                case 1:
                    {
                    this.state = 1934;
                    this.offsetClause();
                    }
                    break;
                }
                this.state = 1938;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 130, this.context) ) {
                case 1:
                    {
                    this.state = 1937;
                    this.limitClause();
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectItemList(): SelectItemListContext {
        let localContext = new SelectItemListContext(this.context, this.state);
        this.enterRule(localContext, 258, GQLParser.RULE_selectItemList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1942;
            this.selectItem();
            this.state = 1947;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 132, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1943;
                    this.match(GQLParser.COMMA);
                    this.state = 1944;
                    this.selectItem();
                    }
                    }
                }
                this.state = 1949;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 132, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectItem(): SelectItemContext {
        let localContext = new SelectItemContext(this.context, this.state);
        this.enterRule(localContext, 260, GQLParser.RULE_selectItem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1950;
            this.aggregatingValueExpression();
            this.state = 1952;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 133, this.context) ) {
            case 1:
                {
                this.state = 1951;
                this.selectItemAlias();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectItemAlias(): SelectItemAliasContext {
        let localContext = new SelectItemAliasContext(this.context, this.state);
        this.enterRule(localContext, 262, GQLParser.RULE_selectItemAlias);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1954;
            this.match(GQLParser.AS);
            this.state = 1955;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public havingClause(): HavingClauseContext {
        let localContext = new HavingClauseContext(this.context, this.state);
        this.enterRule(localContext, 264, GQLParser.RULE_havingClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1957;
            this.match(GQLParser.HAVING);
            this.state = 1958;
            this.searchCondition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectStatementBody(): SelectStatementBodyContext {
        let localContext = new SelectStatementBodyContext(this.context, this.state);
        this.enterRule(localContext, 266, GQLParser.RULE_selectStatementBody);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1960;
            this.match(GQLParser.FROM);
            this.state = 1963;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 134, this.context) ) {
            case 1:
                {
                this.state = 1961;
                this.selectGraphMatchList();
                }
                break;
            case 2:
                {
                this.state = 1962;
                this.selectQuerySpecification();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectGraphMatchList(): SelectGraphMatchListContext {
        let localContext = new SelectGraphMatchListContext(this.context, this.state);
        this.enterRule(localContext, 268, GQLParser.RULE_selectGraphMatchList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1965;
            this.selectGraphMatch();
            this.state = 1970;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 135, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1966;
                    this.match(GQLParser.COMMA);
                    this.state = 1967;
                    this.selectGraphMatch();
                    }
                    }
                }
                this.state = 1972;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 135, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectGraphMatch(): SelectGraphMatchContext {
        let localContext = new SelectGraphMatchContext(this.context, this.state);
        this.enterRule(localContext, 270, GQLParser.RULE_selectGraphMatch);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1973;
            this.graphExpression();
            this.state = 1974;
            this.matchStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectQuerySpecification(): SelectQuerySpecificationContext {
        let localContext = new SelectQuerySpecificationContext(this.context, this.state);
        this.enterRule(localContext, 272, GQLParser.RULE_selectQuerySpecification);
        try {
            this.state = 1980;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 136, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1976;
                this.nestedQuerySpecification();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1977;
                this.graphExpression();
                this.state = 1978;
                this.nestedQuerySpecification();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public callProcedureStatement(): CallProcedureStatementContext {
        let localContext = new CallProcedureStatementContext(this.context, this.state);
        this.enterRule(localContext, 274, GQLParser.RULE_callProcedureStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1983;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 160) {
                {
                this.state = 1982;
                this.match(GQLParser.OPTIONAL);
                }
            }

            this.state = 1985;
            this.match(GQLParser.CALL);
            this.state = 1986;
            this.procedureCall();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedureCall(): ProcedureCallContext {
        let localContext = new ProcedureCallContext(this.context, this.state);
        this.enterRule(localContext, 276, GQLParser.RULE_procedureCall);
        try {
            this.state = 1990;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.LEFT_BRACE:
            case GQLParser.LEFT_PAREN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1988;
                this.inlineProcedureCall();
                }
                break;
            case GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.ACCENT_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.CURRENT_SCHEMA:
            case GQLParser.HOME_SCHEMA:
            case GQLParser.ACYCLIC:
            case GQLParser.BINDING:
            case GQLParser.BINDINGS:
            case GQLParser.CONNECTING:
            case GQLParser.DESTINATION:
            case GQLParser.DIFFERENT:
            case GQLParser.DIRECTED:
            case GQLParser.EDGE:
            case GQLParser.EDGES:
            case GQLParser.ELEMENT:
            case GQLParser.ELEMENTS:
            case GQLParser.FIRST:
            case GQLParser.GRAPH:
            case GQLParser.GROUPS:
            case GQLParser.KEEP:
            case GQLParser.LABEL:
            case GQLParser.LABELED:
            case GQLParser.LABELS:
            case GQLParser.LAST:
            case GQLParser.NFC:
            case GQLParser.NFD:
            case GQLParser.NFKC:
            case GQLParser.NFKD:
            case GQLParser.NO:
            case GQLParser.NODE:
            case GQLParser.NORMALIZED:
            case GQLParser.ONLY:
            case GQLParser.ORDINALITY:
            case GQLParser.PROPERTY:
            case GQLParser.READ:
            case GQLParser.RELATIONSHIP:
            case GQLParser.RELATIONSHIPS:
            case GQLParser.REPEATABLE:
            case GQLParser.SHORTEST:
            case GQLParser.SIMPLE:
            case GQLParser.SOURCE:
            case GQLParser.TABLE:
            case GQLParser.TEMP:
            case GQLParser.TO:
            case GQLParser.TRAIL:
            case GQLParser.TRANSACTION:
            case GQLParser.TYPE:
            case GQLParser.UNDIRECTED:
            case GQLParser.VERTEX:
            case GQLParser.WALK:
            case GQLParser.WITHOUT:
            case GQLParser.WRITE:
            case GQLParser.ZONE:
            case GQLParser.REGULAR_IDENTIFIER:
            case GQLParser.SUBSTITUTED_PARAMETER_REFERENCE:
            case GQLParser.DOUBLE_PERIOD:
            case GQLParser.PERIOD:
            case GQLParser.SOLIDUS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1989;
                this.namedProcedureCall();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public inlineProcedureCall(): InlineProcedureCallContext {
        let localContext = new InlineProcedureCallContext(this.context, this.state);
        this.enterRule(localContext, 278, GQLParser.RULE_inlineProcedureCall);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1993;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 371) {
                {
                this.state = 1992;
                this.variableScopeClause();
                }
            }

            this.state = 1995;
            this.nestedProcedureSpecification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableScopeClause(): VariableScopeClauseContext {
        let localContext = new VariableScopeClauseContext(this.context, this.state);
        this.enterRule(localContext, 280, GQLParser.RULE_variableScopeClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1997;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 1999;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 277)) & ~0x1F) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1F) === 0 && ((1 << (_la - 309)) & 131071) !== 0)) {
                {
                this.state = 1998;
                this.bindingVariableReferenceList();
                }
            }

            this.state = 2001;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bindingVariableReferenceList(): BindingVariableReferenceListContext {
        let localContext = new BindingVariableReferenceListContext(this.context, this.state);
        this.enterRule(localContext, 282, GQLParser.RULE_bindingVariableReferenceList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2003;
            this.bindingVariableReference();
            this.state = 2008;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 361) {
                {
                {
                this.state = 2004;
                this.match(GQLParser.COMMA);
                this.state = 2005;
                this.bindingVariableReference();
                }
                }
                this.state = 2010;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedProcedureCall(): NamedProcedureCallContext {
        let localContext = new NamedProcedureCallContext(this.context, this.state);
        this.enterRule(localContext, 284, GQLParser.RULE_namedProcedureCall);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2011;
            this.procedureReference();
            this.state = 2012;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 2014;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 2)) & ~0x1F) === 0 && ((1 << (_la - 2)) & 3509583847) !== 0) || ((((_la - 40)) & ~0x1F) === 0 && ((1 << (_la - 40)) & 4051278821) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 151045889) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 449167283) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 478578107) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 151000813) !== 0) || _la === 236 || _la === 237 || ((((_la - 277)) & ~0x1F) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1F) === 0 && ((1 << (_la - 309)) & 393215) !== 0) || ((((_la - 369)) & ~0x1F) === 0 && ((1 << (_la - 369)) & 151) !== 0)) {
                {
                this.state = 2013;
                this.procedureArgumentList();
                }
            }

            this.state = 2016;
            this.match(GQLParser.RIGHT_PAREN);
            this.state = 2018;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 234) {
                {
                this.state = 2017;
                this.yieldClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedureArgumentList(): ProcedureArgumentListContext {
        let localContext = new ProcedureArgumentListContext(this.context, this.state);
        this.enterRule(localContext, 286, GQLParser.RULE_procedureArgumentList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2020;
            this.procedureArgument();
            this.state = 2025;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 361) {
                {
                {
                this.state = 2021;
                this.match(GQLParser.COMMA);
                this.state = 2022;
                this.procedureArgument();
                }
                }
                this.state = 2027;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedureArgument(): ProcedureArgumentContext {
        let localContext = new ProcedureArgumentContext(this.context, this.state);
        this.enterRule(localContext, 288, GQLParser.RULE_procedureArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2028;
            this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public atSchemaClause(): AtSchemaClauseContext {
        let localContext = new AtSchemaClauseContext(this.context, this.state);
        this.enterRule(localContext, 290, GQLParser.RULE_atSchemaClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2030;
            this.match(GQLParser.AT);
            this.state = 2031;
            this.schemaReference();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public useGraphClause(): UseGraphClauseContext {
        let localContext = new UseGraphClauseContext(this.context, this.state);
        this.enterRule(localContext, 292, GQLParser.RULE_useGraphClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2033;
            this.match(GQLParser.USE);
            this.state = 2034;
            this.graphExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public graphPatternBindingTable(): GraphPatternBindingTableContext {
        let localContext = new GraphPatternBindingTableContext(this.context, this.state);
        this.enterRule(localContext, 294, GQLParser.RULE_graphPatternBindingTable);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2036;
            this.graphPattern();
            this.state = 2038;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 145, this.context) ) {
            case 1:
                {
                this.state = 2037;
                this.graphPatternYieldClause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public graphPatternYieldClause(): GraphPatternYieldClauseContext {
        let localContext = new GraphPatternYieldClauseContext(this.context, this.state);
        this.enterRule(localContext, 296, GQLParser.RULE_graphPatternYieldClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2040;
            this.match(GQLParser.YIELD);
            this.state = 2041;
            this.graphPatternYieldItemList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public graphPatternYieldItemList(): GraphPatternYieldItemListContext {
        let localContext = new GraphPatternYieldItemListContext(this.context, this.state);
        this.enterRule(localContext, 298, GQLParser.RULE_graphPatternYieldItemList);
        try {
            let alternative: number;
            this.state = 2053;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 147, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2043;
                this.graphPatternYieldItem();
                this.state = 2048;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 146, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2044;
                        this.match(GQLParser.COMMA);
                        this.state = 2045;
                        this.graphPatternYieldItem();
                        }
                        }
                    }
                    this.state = 2050;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 146, this.context);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2051;
                this.match(GQLParser.NO);
                this.state = 2052;
                this.match(GQLParser.BINDINGS);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public graphPatternYieldItem(): GraphPatternYieldItemContext {
        let localContext = new GraphPatternYieldItemContext(this.context, this.state);
        this.enterRule(localContext, 300, GQLParser.RULE_graphPatternYieldItem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2055;
            this.bindingVariableReference();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public graphPattern(): GraphPatternContext {
        let localContext = new GraphPatternContext(this.context, this.state);
        this.enterRule(localContext, 302, GQLParser.RULE_graphPattern);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2058;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 148, this.context) ) {
            case 1:
                {
                this.state = 2057;
                this.matchMode();
                }
                break;
            }
            this.state = 2060;
            this.pathPatternList();
            this.state = 2062;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 149, this.context) ) {
            case 1:
                {
                this.state = 2061;
                this.keepClause();
                }
                break;
            }
            this.state = 2065;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 150, this.context) ) {
            case 1:
                {
                this.state = 2064;
                this.graphPatternWhereClause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public matchMode(): MatchModeContext {
        let localContext = new MatchModeContext(this.context, this.state);
        this.enterRule(localContext, 304, GQLParser.RULE_matchMode);
        try {
            this.state = 2069;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.REPEATABLE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2067;
                this.repeatableElementsMatchMode();
                }
                break;
            case GQLParser.DIFFERENT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2068;
                this.differentEdgesMatchMode();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public repeatableElementsMatchMode(): RepeatableElementsMatchModeContext {
        let localContext = new RepeatableElementsMatchModeContext(this.context, this.state);
        this.enterRule(localContext, 306, GQLParser.RULE_repeatableElementsMatchMode);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2071;
            this.match(GQLParser.REPEATABLE);
            this.state = 2072;
            this.elementBindingsOrElements();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public differentEdgesMatchMode(): DifferentEdgesMatchModeContext {
        let localContext = new DifferentEdgesMatchModeContext(this.context, this.state);
        this.enterRule(localContext, 308, GQLParser.RULE_differentEdgesMatchMode);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2074;
            this.match(GQLParser.DIFFERENT);
            this.state = 2075;
            this.edgeBindingsOrEdges();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elementBindingsOrElements(): ElementBindingsOrElementsContext {
        let localContext = new ElementBindingsOrElementsContext(this.context, this.state);
        this.enterRule(localContext, 310, GQLParser.RULE_elementBindingsOrElements);
        try {
            this.state = 2082;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.ELEMENT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2077;
                this.match(GQLParser.ELEMENT);
                this.state = 2079;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 152, this.context) ) {
                case 1:
                    {
                    this.state = 2078;
                    this.match(GQLParser.BINDINGS);
                    }
                    break;
                }
                }
                break;
            case GQLParser.ELEMENTS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2081;
                this.match(GQLParser.ELEMENTS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public edgeBindingsOrEdges(): EdgeBindingsOrEdgesContext {
        let localContext = new EdgeBindingsOrEdgesContext(this.context, this.state);
        this.enterRule(localContext, 312, GQLParser.RULE_edgeBindingsOrEdges);
        try {
            this.state = 2089;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.EDGE:
            case GQLParser.RELATIONSHIP:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2084;
                this.edgeSynonym();
                this.state = 2086;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 154, this.context) ) {
                case 1:
                    {
                    this.state = 2085;
                    this.match(GQLParser.BINDINGS);
                    }
                    break;
                }
                }
                break;
            case GQLParser.EDGES:
            case GQLParser.RELATIONSHIPS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2088;
                this.edgesSynonym();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathPatternList(): PathPatternListContext {
        let localContext = new PathPatternListContext(this.context, this.state);
        this.enterRule(localContext, 314, GQLParser.RULE_pathPatternList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2091;
            this.pathPattern();
            this.state = 2096;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 156, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2092;
                    this.match(GQLParser.COMMA);
                    this.state = 2093;
                    this.pathPattern();
                    }
                    }
                }
                this.state = 2098;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 156, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathPattern(): PathPatternContext {
        let localContext = new PathPatternContext(this.context, this.state);
        this.enterRule(localContext, 316, GQLParser.RULE_pathPattern);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2100;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 157, this.context) ) {
            case 1:
                {
                this.state = 2099;
                this.pathVariableDeclaration();
                }
                break;
            }
            this.state = 2103;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 22 || _la === 25 || _la === 277 || ((((_la - 310)) & ~0x1F) === 0 && ((1 << (_la - 310)) & 2115) !== 0)) {
                {
                this.state = 2102;
                this.pathPatternPrefix();
                }
            }

            this.state = 2105;
            this.pathPatternExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathVariableDeclaration(): PathVariableDeclarationContext {
        let localContext = new PathVariableDeclarationContext(this.context, this.state);
        this.enterRule(localContext, 318, GQLParser.RULE_pathVariableDeclaration);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2107;
            this.pathVariable();
            this.state = 2108;
            this.match(GQLParser.EQUALS_OPERATOR);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keepClause(): KeepClauseContext {
        let localContext = new KeepClauseContext(this.context, this.state);
        this.enterRule(localContext, 320, GQLParser.RULE_keepClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2110;
            this.match(GQLParser.KEEP);
            this.state = 2111;
            this.pathPatternPrefix();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public graphPatternWhereClause(): GraphPatternWhereClauseContext {
        let localContext = new GraphPatternWhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 322, GQLParser.RULE_graphPatternWhereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2113;
            this.match(GQLParser.WHERE);
            this.state = 2114;
            this.searchCondition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertGraphPattern(): InsertGraphPatternContext {
        let localContext = new InsertGraphPatternContext(this.context, this.state);
        this.enterRule(localContext, 324, GQLParser.RULE_insertGraphPattern);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2116;
            this.insertPathPatternList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertPathPatternList(): InsertPathPatternListContext {
        let localContext = new InsertPathPatternListContext(this.context, this.state);
        this.enterRule(localContext, 326, GQLParser.RULE_insertPathPatternList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2118;
            this.insertPathPattern();
            this.state = 2123;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 361) {
                {
                {
                this.state = 2119;
                this.match(GQLParser.COMMA);
                this.state = 2120;
                this.insertPathPattern();
                }
                }
                this.state = 2125;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertPathPattern(): InsertPathPatternContext {
        let localContext = new InsertPathPatternContext(this.context, this.state);
        this.enterRule(localContext, 328, GQLParser.RULE_insertPathPattern);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2126;
            this.insertNodePattern();
            this.state = 2132;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (((((_la - 338)) & ~0x1F) === 0 && ((1 << (_la - 338)) & 131137) !== 0)) {
                {
                {
                this.state = 2127;
                this.insertEdgePattern();
                this.state = 2128;
                this.insertNodePattern();
                }
                }
                this.state = 2134;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertNodePattern(): InsertNodePatternContext {
        let localContext = new InsertNodePatternContext(this.context, this.state);
        this.enterRule(localContext, 330, GQLParser.RULE_insertNodePattern);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2135;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 2137;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 127 || ((((_la - 277)) & ~0x1F) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1F) === 0 && ((1 << (_la - 309)) & 131071) !== 0) || _la === 360 || _la === 369) {
                {
                this.state = 2136;
                this.insertElementPatternFiller();
                }
            }

            this.state = 2139;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertEdgePattern(): InsertEdgePatternContext {
        let localContext = new InsertEdgePatternContext(this.context, this.state);
        this.enterRule(localContext, 332, GQLParser.RULE_insertEdgePattern);
        try {
            this.state = 2144;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.LEFT_ARROW_BRACKET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2141;
                this.insertEdgePointingLeft();
                }
                break;
            case GQLParser.MINUS_LEFT_BRACKET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2142;
                this.insertEdgePointingRight();
                }
                break;
            case GQLParser.TILDE_LEFT_BRACKET:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2143;
                this.insertEdgeUndirected();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertEdgePointingLeft(): InsertEdgePointingLeftContext {
        let localContext = new InsertEdgePointingLeftContext(this.context, this.state);
        this.enterRule(localContext, 334, GQLParser.RULE_insertEdgePointingLeft);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2146;
            this.match(GQLParser.LEFT_ARROW_BRACKET);
            this.state = 2148;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 127 || ((((_la - 277)) & ~0x1F) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1F) === 0 && ((1 << (_la - 309)) & 131071) !== 0) || _la === 360 || _la === 369) {
                {
                this.state = 2147;
                this.insertElementPatternFiller();
                }
            }

            this.state = 2150;
            this.match(GQLParser.RIGHT_BRACKET_MINUS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertEdgePointingRight(): InsertEdgePointingRightContext {
        let localContext = new InsertEdgePointingRightContext(this.context, this.state);
        this.enterRule(localContext, 336, GQLParser.RULE_insertEdgePointingRight);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2152;
            this.match(GQLParser.MINUS_LEFT_BRACKET);
            this.state = 2154;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 127 || ((((_la - 277)) & ~0x1F) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1F) === 0 && ((1 << (_la - 309)) & 131071) !== 0) || _la === 360 || _la === 369) {
                {
                this.state = 2153;
                this.insertElementPatternFiller();
                }
            }

            this.state = 2156;
            this.match(GQLParser.BRACKET_RIGHT_ARROW);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertEdgeUndirected(): InsertEdgeUndirectedContext {
        let localContext = new InsertEdgeUndirectedContext(this.context, this.state);
        this.enterRule(localContext, 338, GQLParser.RULE_insertEdgeUndirected);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2158;
            this.match(GQLParser.TILDE_LEFT_BRACKET);
            this.state = 2160;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 127 || ((((_la - 277)) & ~0x1F) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1F) === 0 && ((1 << (_la - 309)) & 131071) !== 0) || _la === 360 || _la === 369) {
                {
                this.state = 2159;
                this.insertElementPatternFiller();
                }
            }

            this.state = 2162;
            this.match(GQLParser.RIGHT_BRACKET_TILDE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertElementPatternFiller(): InsertElementPatternFillerContext {
        let localContext = new InsertElementPatternFillerContext(this.context, this.state);
        this.enterRule(localContext, 340, GQLParser.RULE_insertElementPatternFiller);
        let _la: number;
        try {
            this.state = 2172;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 168, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2164;
                this.elementVariableDeclaration();
                this.state = 2166;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 127 || _la === 360 || _la === 369) {
                    {
                    this.state = 2165;
                    this.labelAndPropertySetSpecification();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2169;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 277)) & ~0x1F) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1F) === 0 && ((1 << (_la - 309)) & 131071) !== 0)) {
                    {
                    this.state = 2168;
                    this.elementVariableDeclaration();
                    }
                }

                this.state = 2171;
                this.labelAndPropertySetSpecification();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public labelAndPropertySetSpecification(): LabelAndPropertySetSpecificationContext {
        let localContext = new LabelAndPropertySetSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 342, GQLParser.RULE_labelAndPropertySetSpecification);
        let _la: number;
        try {
            this.state = 2185;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 171, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2174;
                this.isOrColon();
                this.state = 2175;
                this.labelSetSpecification();
                this.state = 2177;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 369) {
                    {
                    this.state = 2176;
                    this.elementPropertySpecification();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2182;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 127 || _la === 360) {
                    {
                    this.state = 2179;
                    this.isOrColon();
                    this.state = 2180;
                    this.labelSetSpecification();
                    }
                }

                this.state = 2184;
                this.elementPropertySpecification();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathPatternPrefix(): PathPatternPrefixContext {
        let localContext = new PathPatternPrefixContext(this.context, this.state);
        this.enterRule(localContext, 344, GQLParser.RULE_pathPatternPrefix);
        try {
            this.state = 2189;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.ACYCLIC:
            case GQLParser.SIMPLE:
            case GQLParser.TRAIL:
            case GQLParser.WALK:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2187;
                this.pathModePrefix();
                }
                break;
            case GQLParser.ALL:
            case GQLParser.ANY:
            case GQLParser.SHORTEST:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2188;
                this.pathSearchPrefix();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathModePrefix(): PathModePrefixContext {
        let localContext = new PathModePrefixContext(this.context, this.state);
        this.enterRule(localContext, 346, GQLParser.RULE_pathModePrefix);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2191;
            this.pathMode();
            this.state = 2193;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 173, this.context) ) {
            case 1:
                {
                this.state = 2192;
                this.pathOrPaths();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathMode(): PathModeContext {
        let localContext = new PathModeContext(this.context, this.state);
        this.enterRule(localContext, 348, GQLParser.RULE_pathMode);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2195;
            _la = this.tokenStream.LA(1);
            if(!(_la === 277 || ((((_la - 311)) & ~0x1F) === 0 && ((1 << (_la - 311)) & 1057) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathSearchPrefix(): PathSearchPrefixContext {
        let localContext = new PathSearchPrefixContext(this.context, this.state);
        this.enterRule(localContext, 350, GQLParser.RULE_pathSearchPrefix);
        try {
            this.state = 2200;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 174, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2197;
                this.allPathSearch();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2198;
                this.anyPathSearch();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2199;
                this.shortestPathSearch();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public allPathSearch(): AllPathSearchContext {
        let localContext = new AllPathSearchContext(this.context, this.state);
        this.enterRule(localContext, 352, GQLParser.RULE_allPathSearch);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2202;
            this.match(GQLParser.ALL);
            this.state = 2204;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 175, this.context) ) {
            case 1:
                {
                this.state = 2203;
                this.pathMode();
                }
                break;
            }
            this.state = 2207;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 176, this.context) ) {
            case 1:
                {
                this.state = 2206;
                this.pathOrPaths();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathOrPaths(): PathOrPathsContext {
        let localContext = new PathOrPathsContext(this.context, this.state);
        this.enterRule(localContext, 354, GQLParser.RULE_pathOrPaths);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2209;
            _la = this.tokenStream.LA(1);
            if(!(_la === 166 || _la === 168)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public anyPathSearch(): AnyPathSearchContext {
        let localContext = new AnyPathSearchContext(this.context, this.state);
        this.enterRule(localContext, 356, GQLParser.RULE_anyPathSearch);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2211;
            this.match(GQLParser.ANY);
            this.state = 2213;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 177, this.context) ) {
            case 1:
                {
                this.state = 2212;
                this.numberOfPaths();
                }
                break;
            }
            this.state = 2216;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 178, this.context) ) {
            case 1:
                {
                this.state = 2215;
                this.pathMode();
                }
                break;
            }
            this.state = 2219;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 179, this.context) ) {
            case 1:
                {
                this.state = 2218;
                this.pathOrPaths();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numberOfPaths(): NumberOfPathsContext {
        let localContext = new NumberOfPathsContext(this.context, this.state);
        this.enterRule(localContext, 358, GQLParser.RULE_numberOfPaths);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2221;
            this.nonNegativeIntegerSpecification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public shortestPathSearch(): ShortestPathSearchContext {
        let localContext = new ShortestPathSearchContext(this.context, this.state);
        this.enterRule(localContext, 360, GQLParser.RULE_shortestPathSearch);
        try {
            this.state = 2227;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 180, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2223;
                this.allShortestPathSearch();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2224;
                this.anyShortestPathSearch();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2225;
                this.countedShortestPathSearch();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2226;
                this.countedShortestGroupSearch();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public allShortestPathSearch(): AllShortestPathSearchContext {
        let localContext = new AllShortestPathSearchContext(this.context, this.state);
        this.enterRule(localContext, 362, GQLParser.RULE_allShortestPathSearch);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2229;
            this.match(GQLParser.ALL);
            this.state = 2230;
            this.match(GQLParser.SHORTEST);
            this.state = 2232;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 181, this.context) ) {
            case 1:
                {
                this.state = 2231;
                this.pathMode();
                }
                break;
            }
            this.state = 2235;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 182, this.context) ) {
            case 1:
                {
                this.state = 2234;
                this.pathOrPaths();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public anyShortestPathSearch(): AnyShortestPathSearchContext {
        let localContext = new AnyShortestPathSearchContext(this.context, this.state);
        this.enterRule(localContext, 364, GQLParser.RULE_anyShortestPathSearch);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2237;
            this.match(GQLParser.ANY);
            this.state = 2238;
            this.match(GQLParser.SHORTEST);
            this.state = 2240;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 183, this.context) ) {
            case 1:
                {
                this.state = 2239;
                this.pathMode();
                }
                break;
            }
            this.state = 2243;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 184, this.context) ) {
            case 1:
                {
                this.state = 2242;
                this.pathOrPaths();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public countedShortestPathSearch(): CountedShortestPathSearchContext {
        let localContext = new CountedShortestPathSearchContext(this.context, this.state);
        this.enterRule(localContext, 366, GQLParser.RULE_countedShortestPathSearch);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2245;
            this.match(GQLParser.SHORTEST);
            this.state = 2246;
            this.numberOfPaths();
            this.state = 2248;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 185, this.context) ) {
            case 1:
                {
                this.state = 2247;
                this.pathMode();
                }
                break;
            }
            this.state = 2251;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 186, this.context) ) {
            case 1:
                {
                this.state = 2250;
                this.pathOrPaths();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public countedShortestGroupSearch(): CountedShortestGroupSearchContext {
        let localContext = new CountedShortestGroupSearchContext(this.context, this.state);
        this.enterRule(localContext, 368, GQLParser.RULE_countedShortestGroupSearch);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2253;
            this.match(GQLParser.SHORTEST);
            this.state = 2255;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 983040) !== 0) || _la === 327) {
                {
                this.state = 2254;
                this.numberOfGroups();
                }
            }

            this.state = 2258;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 277 || ((((_la - 311)) & ~0x1F) === 0 && ((1 << (_la - 311)) & 1057) !== 0)) {
                {
                this.state = 2257;
                this.pathMode();
                }
            }

            this.state = 2261;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 166 || _la === 168) {
                {
                this.state = 2260;
                this.pathOrPaths();
                }
            }

            this.state = 2263;
            _la = this.tokenStream.LA(1);
            if(!(_la === 102 || _la === 290)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numberOfGroups(): NumberOfGroupsContext {
        let localContext = new NumberOfGroupsContext(this.context, this.state);
        this.enterRule(localContext, 370, GQLParser.RULE_numberOfGroups);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2265;
            this.nonNegativeIntegerSpecification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathPatternExpression(): PathPatternExpressionContext {
        let localContext = new PathPatternExpressionContext(this.context, this.state);
        this.enterRule(localContext, 372, GQLParser.RULE_pathPatternExpression);
        try {
            let alternative: number;
            this.state = 2282;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 192, this.context) ) {
            case 1:
                localContext = new PpePathTermContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2267;
                this.pathTerm();
                }
                break;
            case 2:
                localContext = new PpeMultisetAlternationContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2268;
                this.pathTerm();
                this.state = 2271;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 2269;
                        this.match(GQLParser.MULTISET_ALTERNATION_OPERATOR);
                        this.state = 2270;
                        this.pathTerm();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 2273;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 190, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            case 3:
                localContext = new PpePatternUnionContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2275;
                this.pathTerm();
                this.state = 2278;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 2276;
                        this.match(GQLParser.VERTICAL_BAR);
                        this.state = 2277;
                        this.pathTerm();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 2280;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 191, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathTerm(): PathTermContext {
        let localContext = new PathTermContext(this.context, this.state);
        this.enterRule(localContext, 374, GQLParser.RULE_pathTerm);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2285;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 2284;
                    this.pathFactor();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2287;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 193, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathFactor(): PathFactorContext {
        let localContext = new PathFactorContext(this.context, this.state);
        this.enterRule(localContext, 376, GQLParser.RULE_pathFactor);
        try {
            this.state = 2296;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 194, this.context) ) {
            case 1:
                localContext = new PfPathPrimaryContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2289;
                this.pathPrimary();
                }
                break;
            case 2:
                localContext = new PfQuantifiedPathPrimaryContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2290;
                this.pathPrimary();
                this.state = 2291;
                this.graphPatternQuantifier();
                }
                break;
            case 3:
                localContext = new PfQuestionedPathPrimaryContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2293;
                this.pathPrimary();
                this.state = 2294;
                this.match(GQLParser.QUESTION_MARK);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathPrimary(): PathPrimaryContext {
        let localContext = new PathPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 378, GQLParser.RULE_pathPrimary);
        try {
            this.state = 2301;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 195, this.context) ) {
            case 1:
                localContext = new PpElementPatternContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2298;
                this.elementPattern();
                }
                break;
            case 2:
                localContext = new PpParenthesizedPathPatternExpressionContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2299;
                this.parenthesizedPathPatternExpression();
                }
                break;
            case 3:
                localContext = new PpSimplifiedPathPatternExpressionContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2300;
                this.simplifiedPathPatternExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elementPattern(): ElementPatternContext {
        let localContext = new ElementPatternContext(this.context, this.state);
        this.enterRule(localContext, 380, GQLParser.RULE_elementPattern);
        try {
            this.state = 2305;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.LEFT_PAREN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2303;
                this.nodePattern();
                }
                break;
            case GQLParser.LEFT_ARROW:
            case GQLParser.LEFT_ARROW_TILDE:
            case GQLParser.LEFT_ARROW_BRACKET:
            case GQLParser.LEFT_ARROW_TILDE_BRACKET:
            case GQLParser.LEFT_MINUS_RIGHT:
            case GQLParser.MINUS_LEFT_BRACKET:
            case GQLParser.RIGHT_ARROW:
            case GQLParser.TILDE_LEFT_BRACKET:
            case GQLParser.TILDE_RIGHT_ARROW:
            case GQLParser.MINUS_SIGN:
            case GQLParser.TILDE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2304;
                this.edgePattern();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nodePattern(): NodePatternContext {
        let localContext = new NodePatternContext(this.context, this.state);
        this.enterRule(localContext, 382, GQLParser.RULE_nodePattern);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2307;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 2308;
            this.elementPatternFiller();
            this.state = 2309;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elementPatternFiller(): ElementPatternFillerContext {
        let localContext = new ElementPatternFillerContext(this.context, this.state);
        this.enterRule(localContext, 384, GQLParser.RULE_elementPatternFiller);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2312;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 277)) & ~0x1F) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1F) === 0 && ((1 << (_la - 309)) & 131071) !== 0)) {
                {
                this.state = 2311;
                this.elementVariableDeclaration();
                }
            }

            this.state = 2315;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 127 || _la === 360) {
                {
                this.state = 2314;
                this.isLabelExpression();
                }
            }

            this.state = 2318;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 230 || _la === 369) {
                {
                this.state = 2317;
                this.elementPatternPredicate();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elementVariableDeclaration(): ElementVariableDeclarationContext {
        let localContext = new ElementVariableDeclarationContext(this.context, this.state);
        this.enterRule(localContext, 386, GQLParser.RULE_elementVariableDeclaration);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2321;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 200, this.context) ) {
            case 1:
                {
                this.state = 2320;
                this.match(GQLParser.TEMP);
                }
                break;
            }
            this.state = 2323;
            this.elementVariable();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public isLabelExpression(): IsLabelExpressionContext {
        let localContext = new IsLabelExpressionContext(this.context, this.state);
        this.enterRule(localContext, 388, GQLParser.RULE_isLabelExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2325;
            this.isOrColon();
            this.state = 2326;
            this.labelExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public isOrColon(): IsOrColonContext {
        let localContext = new IsOrColonContext(this.context, this.state);
        this.enterRule(localContext, 390, GQLParser.RULE_isOrColon);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2328;
            _la = this.tokenStream.LA(1);
            if(!(_la === 127 || _la === 360)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elementPatternPredicate(): ElementPatternPredicateContext {
        let localContext = new ElementPatternPredicateContext(this.context, this.state);
        this.enterRule(localContext, 392, GQLParser.RULE_elementPatternPredicate);
        try {
            this.state = 2332;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.WHERE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2330;
                this.elementPatternWhereClause();
                }
                break;
            case GQLParser.LEFT_BRACE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2331;
                this.elementPropertySpecification();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elementPatternWhereClause(): ElementPatternWhereClauseContext {
        let localContext = new ElementPatternWhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 394, GQLParser.RULE_elementPatternWhereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2334;
            this.match(GQLParser.WHERE);
            this.state = 2335;
            this.searchCondition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elementPropertySpecification(): ElementPropertySpecificationContext {
        let localContext = new ElementPropertySpecificationContext(this.context, this.state);
        this.enterRule(localContext, 396, GQLParser.RULE_elementPropertySpecification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2337;
            this.match(GQLParser.LEFT_BRACE);
            this.state = 2338;
            this.propertyKeyValuePairList();
            this.state = 2339;
            this.match(GQLParser.RIGHT_BRACE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyKeyValuePairList(): PropertyKeyValuePairListContext {
        let localContext = new PropertyKeyValuePairListContext(this.context, this.state);
        this.enterRule(localContext, 398, GQLParser.RULE_propertyKeyValuePairList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2341;
            this.propertyKeyValuePair();
            this.state = 2346;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 361) {
                {
                {
                this.state = 2342;
                this.match(GQLParser.COMMA);
                this.state = 2343;
                this.propertyKeyValuePair();
                }
                }
                this.state = 2348;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyKeyValuePair(): PropertyKeyValuePairContext {
        let localContext = new PropertyKeyValuePairContext(this.context, this.state);
        this.enterRule(localContext, 400, GQLParser.RULE_propertyKeyValuePair);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2349;
            this.propertyName();
            this.state = 2350;
            this.match(GQLParser.COLON);
            this.state = 2351;
            this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public edgePattern(): EdgePatternContext {
        let localContext = new EdgePatternContext(this.context, this.state);
        this.enterRule(localContext, 402, GQLParser.RULE_edgePattern);
        try {
            this.state = 2355;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.LEFT_ARROW_BRACKET:
            case GQLParser.LEFT_ARROW_TILDE_BRACKET:
            case GQLParser.MINUS_LEFT_BRACKET:
            case GQLParser.TILDE_LEFT_BRACKET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2353;
                this.fullEdgePattern();
                }
                break;
            case GQLParser.LEFT_ARROW:
            case GQLParser.LEFT_ARROW_TILDE:
            case GQLParser.LEFT_MINUS_RIGHT:
            case GQLParser.RIGHT_ARROW:
            case GQLParser.TILDE_RIGHT_ARROW:
            case GQLParser.MINUS_SIGN:
            case GQLParser.TILDE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2354;
                this.abbreviatedEdgePattern();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fullEdgePattern(): FullEdgePatternContext {
        let localContext = new FullEdgePatternContext(this.context, this.state);
        this.enterRule(localContext, 404, GQLParser.RULE_fullEdgePattern);
        try {
            this.state = 2364;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 204, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2357;
                this.fullEdgePointingLeft();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2358;
                this.fullEdgeUndirected();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2359;
                this.fullEdgePointingRight();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2360;
                this.fullEdgeLeftOrUndirected();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2361;
                this.fullEdgeUndirectedOrRight();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2362;
                this.fullEdgeLeftOrRight();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2363;
                this.fullEdgeAnyDirection();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fullEdgePointingLeft(): FullEdgePointingLeftContext {
        let localContext = new FullEdgePointingLeftContext(this.context, this.state);
        this.enterRule(localContext, 406, GQLParser.RULE_fullEdgePointingLeft);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2366;
            this.match(GQLParser.LEFT_ARROW_BRACKET);
            this.state = 2367;
            this.elementPatternFiller();
            this.state = 2368;
            this.match(GQLParser.RIGHT_BRACKET_MINUS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fullEdgeUndirected(): FullEdgeUndirectedContext {
        let localContext = new FullEdgeUndirectedContext(this.context, this.state);
        this.enterRule(localContext, 408, GQLParser.RULE_fullEdgeUndirected);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2370;
            this.match(GQLParser.TILDE_LEFT_BRACKET);
            this.state = 2371;
            this.elementPatternFiller();
            this.state = 2372;
            this.match(GQLParser.RIGHT_BRACKET_TILDE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fullEdgePointingRight(): FullEdgePointingRightContext {
        let localContext = new FullEdgePointingRightContext(this.context, this.state);
        this.enterRule(localContext, 410, GQLParser.RULE_fullEdgePointingRight);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2374;
            this.match(GQLParser.MINUS_LEFT_BRACKET);
            this.state = 2375;
            this.elementPatternFiller();
            this.state = 2376;
            this.match(GQLParser.BRACKET_RIGHT_ARROW);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fullEdgeLeftOrUndirected(): FullEdgeLeftOrUndirectedContext {
        let localContext = new FullEdgeLeftOrUndirectedContext(this.context, this.state);
        this.enterRule(localContext, 412, GQLParser.RULE_fullEdgeLeftOrUndirected);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2378;
            this.match(GQLParser.LEFT_ARROW_TILDE_BRACKET);
            this.state = 2379;
            this.elementPatternFiller();
            this.state = 2380;
            this.match(GQLParser.RIGHT_BRACKET_TILDE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fullEdgeUndirectedOrRight(): FullEdgeUndirectedOrRightContext {
        let localContext = new FullEdgeUndirectedOrRightContext(this.context, this.state);
        this.enterRule(localContext, 414, GQLParser.RULE_fullEdgeUndirectedOrRight);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2382;
            this.match(GQLParser.TILDE_LEFT_BRACKET);
            this.state = 2383;
            this.elementPatternFiller();
            this.state = 2384;
            this.match(GQLParser.BRACKET_TILDE_RIGHT_ARROW);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fullEdgeLeftOrRight(): FullEdgeLeftOrRightContext {
        let localContext = new FullEdgeLeftOrRightContext(this.context, this.state);
        this.enterRule(localContext, 416, GQLParser.RULE_fullEdgeLeftOrRight);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2386;
            this.match(GQLParser.LEFT_ARROW_BRACKET);
            this.state = 2387;
            this.elementPatternFiller();
            this.state = 2388;
            this.match(GQLParser.BRACKET_RIGHT_ARROW);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fullEdgeAnyDirection(): FullEdgeAnyDirectionContext {
        let localContext = new FullEdgeAnyDirectionContext(this.context, this.state);
        this.enterRule(localContext, 418, GQLParser.RULE_fullEdgeAnyDirection);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2390;
            this.match(GQLParser.MINUS_LEFT_BRACKET);
            this.state = 2391;
            this.elementPatternFiller();
            this.state = 2392;
            this.match(GQLParser.RIGHT_BRACKET_MINUS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public abbreviatedEdgePattern(): AbbreviatedEdgePatternContext {
        let localContext = new AbbreviatedEdgePatternContext(this.context, this.state);
        this.enterRule(localContext, 420, GQLParser.RULE_abbreviatedEdgePattern);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2394;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & 1050643) !== 0) || _la === 373 || _la === 384)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public parenthesizedPathPatternExpression(): ParenthesizedPathPatternExpressionContext {
        let localContext = new ParenthesizedPathPatternExpressionContext(this.context, this.state);
        this.enterRule(localContext, 422, GQLParser.RULE_parenthesizedPathPatternExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2396;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 2398;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 205, this.context) ) {
            case 1:
                {
                this.state = 2397;
                this.subpathVariableDeclaration();
                }
                break;
            }
            this.state = 2401;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 277 || ((((_la - 311)) & ~0x1F) === 0 && ((1 << (_la - 311)) & 1057) !== 0)) {
                {
                this.state = 2400;
                this.pathModePrefix();
                }
            }

            this.state = 2403;
            this.pathPatternExpression();
            this.state = 2405;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 230) {
                {
                this.state = 2404;
                this.parenthesizedPathPatternWhereClause();
                }
            }

            this.state = 2407;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subpathVariableDeclaration(): SubpathVariableDeclarationContext {
        let localContext = new SubpathVariableDeclarationContext(this.context, this.state);
        this.enterRule(localContext, 424, GQLParser.RULE_subpathVariableDeclaration);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2409;
            this.subpathVariable();
            this.state = 2410;
            this.match(GQLParser.EQUALS_OPERATOR);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public parenthesizedPathPatternWhereClause(): ParenthesizedPathPatternWhereClauseContext {
        let localContext = new ParenthesizedPathPatternWhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 426, GQLParser.RULE_parenthesizedPathPatternWhereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2412;
            this.match(GQLParser.WHERE);
            this.state = 2413;
            this.searchCondition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public labelExpression(): LabelExpressionContext;
    public labelExpression(_p: number): LabelExpressionContext;
    public labelExpression(_p?: number): LabelExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new LabelExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 428;
        this.enterRecursionRule(localContext, 428, GQLParser.RULE_labelExpression, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2424;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.EXCLAMATION_MARK:
                {
                localContext = new LabelExpressionNegationContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2416;
                this.match(GQLParser.EXCLAMATION_MARK);
                this.state = 2417;
                this.labelExpression(6);
                }
                break;
            case GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.ACCENT_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.ACYCLIC:
            case GQLParser.BINDING:
            case GQLParser.BINDINGS:
            case GQLParser.CONNECTING:
            case GQLParser.DESTINATION:
            case GQLParser.DIFFERENT:
            case GQLParser.DIRECTED:
            case GQLParser.EDGE:
            case GQLParser.EDGES:
            case GQLParser.ELEMENT:
            case GQLParser.ELEMENTS:
            case GQLParser.FIRST:
            case GQLParser.GRAPH:
            case GQLParser.GROUPS:
            case GQLParser.KEEP:
            case GQLParser.LABEL:
            case GQLParser.LABELED:
            case GQLParser.LABELS:
            case GQLParser.LAST:
            case GQLParser.NFC:
            case GQLParser.NFD:
            case GQLParser.NFKC:
            case GQLParser.NFKD:
            case GQLParser.NO:
            case GQLParser.NODE:
            case GQLParser.NORMALIZED:
            case GQLParser.ONLY:
            case GQLParser.ORDINALITY:
            case GQLParser.PROPERTY:
            case GQLParser.READ:
            case GQLParser.RELATIONSHIP:
            case GQLParser.RELATIONSHIPS:
            case GQLParser.REPEATABLE:
            case GQLParser.SHORTEST:
            case GQLParser.SIMPLE:
            case GQLParser.SOURCE:
            case GQLParser.TABLE:
            case GQLParser.TEMP:
            case GQLParser.TO:
            case GQLParser.TRAIL:
            case GQLParser.TRANSACTION:
            case GQLParser.TYPE:
            case GQLParser.UNDIRECTED:
            case GQLParser.VERTEX:
            case GQLParser.WALK:
            case GQLParser.WITHOUT:
            case GQLParser.WRITE:
            case GQLParser.ZONE:
            case GQLParser.REGULAR_IDENTIFIER:
                {
                localContext = new LabelExpressionNameContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2418;
                this.labelName();
                }
                break;
            case GQLParser.PERCENT:
                {
                localContext = new LabelExpressionWildcardContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2419;
                this.match(GQLParser.PERCENT);
                }
                break;
            case GQLParser.LEFT_PAREN:
                {
                localContext = new LabelExpressionParenthesizedContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2420;
                this.match(GQLParser.LEFT_PAREN);
                this.state = 2421;
                this.labelExpression(0);
                this.state = 2422;
                this.match(GQLParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2434;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 210, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2432;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 209, this.context) ) {
                    case 1:
                        {
                        localContext = new LabelExpressionConjunctionContext(new LabelExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, GQLParser.RULE_labelExpression);
                        this.state = 2426;
                        if (!(this.precpred(this.context, 5))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 5)");
                        }
                        this.state = 2427;
                        this.match(GQLParser.AMPERSAND);
                        this.state = 2428;
                        this.labelExpression(6);
                        }
                        break;
                    case 2:
                        {
                        localContext = new LabelExpressionDisjunctionContext(new LabelExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, GQLParser.RULE_labelExpression);
                        this.state = 2429;
                        if (!(this.precpred(this.context, 4))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 4)");
                        }
                        this.state = 2430;
                        this.match(GQLParser.VERTICAL_BAR);
                        this.state = 2431;
                        this.labelExpression(5);
                        }
                        break;
                    }
                    }
                }
                this.state = 2436;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 210, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public pathVariableReference(): PathVariableReferenceContext {
        let localContext = new PathVariableReferenceContext(this.context, this.state);
        this.enterRule(localContext, 430, GQLParser.RULE_pathVariableReference);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2437;
            this.bindingVariableReference();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elementVariableReference(): ElementVariableReferenceContext {
        let localContext = new ElementVariableReferenceContext(this.context, this.state);
        this.enterRule(localContext, 432, GQLParser.RULE_elementVariableReference);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2439;
            this.bindingVariableReference();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public graphPatternQuantifier(): GraphPatternQuantifierContext {
        let localContext = new GraphPatternQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 434, GQLParser.RULE_graphPatternQuantifier);
        try {
            this.state = 2445;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 211, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2441;
                this.match(GQLParser.ASTERISK);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2442;
                this.match(GQLParser.PLUS_SIGN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2443;
                this.fixedQuantifier();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2444;
                this.generalQuantifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fixedQuantifier(): FixedQuantifierContext {
        let localContext = new FixedQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 436, GQLParser.RULE_fixedQuantifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2447;
            this.match(GQLParser.LEFT_BRACE);
            this.state = 2448;
            this.unsignedInteger();
            this.state = 2449;
            this.match(GQLParser.RIGHT_BRACE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generalQuantifier(): GeneralQuantifierContext {
        let localContext = new GeneralQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 438, GQLParser.RULE_generalQuantifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2451;
            this.match(GQLParser.LEFT_BRACE);
            this.state = 2453;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 983040) !== 0)) {
                {
                this.state = 2452;
                this.lowerBound();
                }
            }

            this.state = 2455;
            this.match(GQLParser.COMMA);
            this.state = 2457;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 983040) !== 0)) {
                {
                this.state = 2456;
                this.upperBound();
                }
            }

            this.state = 2459;
            this.match(GQLParser.RIGHT_BRACE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lowerBound(): LowerBoundContext {
        let localContext = new LowerBoundContext(this.context, this.state);
        this.enterRule(localContext, 440, GQLParser.RULE_lowerBound);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2461;
            this.unsignedInteger();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public upperBound(): UpperBoundContext {
        let localContext = new UpperBoundContext(this.context, this.state);
        this.enterRule(localContext, 442, GQLParser.RULE_upperBound);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2463;
            this.unsignedInteger();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedPathPatternExpression(): SimplifiedPathPatternExpressionContext {
        let localContext = new SimplifiedPathPatternExpressionContext(this.context, this.state);
        this.enterRule(localContext, 444, GQLParser.RULE_simplifiedPathPatternExpression);
        try {
            this.state = 2472;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 214, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2465;
                this.simplifiedDefaultingLeft();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2466;
                this.simplifiedDefaultingUndirected();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2467;
                this.simplifiedDefaultingRight();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2468;
                this.simplifiedDefaultingLeftOrUndirected();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2469;
                this.simplifiedDefaultingUndirectedOrRight();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2470;
                this.simplifiedDefaultingLeftOrRight();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2471;
                this.simplifiedDefaultingAnyDirection();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedDefaultingLeft(): SimplifiedDefaultingLeftContext {
        let localContext = new SimplifiedDefaultingLeftContext(this.context, this.state);
        this.enterRule(localContext, 446, GQLParser.RULE_simplifiedDefaultingLeft);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2474;
            this.match(GQLParser.LEFT_MINUS_SLASH);
            this.state = 2475;
            this.simplifiedContents();
            this.state = 2476;
            this.match(GQLParser.SLASH_MINUS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedDefaultingUndirected(): SimplifiedDefaultingUndirectedContext {
        let localContext = new SimplifiedDefaultingUndirectedContext(this.context, this.state);
        this.enterRule(localContext, 448, GQLParser.RULE_simplifiedDefaultingUndirected);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2478;
            this.match(GQLParser.TILDE_SLASH);
            this.state = 2479;
            this.simplifiedContents();
            this.state = 2480;
            this.match(GQLParser.SLASH_TILDE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedDefaultingRight(): SimplifiedDefaultingRightContext {
        let localContext = new SimplifiedDefaultingRightContext(this.context, this.state);
        this.enterRule(localContext, 450, GQLParser.RULE_simplifiedDefaultingRight);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2482;
            this.match(GQLParser.MINUS_SLASH);
            this.state = 2483;
            this.simplifiedContents();
            this.state = 2484;
            this.match(GQLParser.SLASH_MINUS_RIGHT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedDefaultingLeftOrUndirected(): SimplifiedDefaultingLeftOrUndirectedContext {
        let localContext = new SimplifiedDefaultingLeftOrUndirectedContext(this.context, this.state);
        this.enterRule(localContext, 452, GQLParser.RULE_simplifiedDefaultingLeftOrUndirected);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2486;
            this.match(GQLParser.LEFT_TILDE_SLASH);
            this.state = 2487;
            this.simplifiedContents();
            this.state = 2488;
            this.match(GQLParser.SLASH_TILDE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedDefaultingUndirectedOrRight(): SimplifiedDefaultingUndirectedOrRightContext {
        let localContext = new SimplifiedDefaultingUndirectedOrRightContext(this.context, this.state);
        this.enterRule(localContext, 454, GQLParser.RULE_simplifiedDefaultingUndirectedOrRight);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2490;
            this.match(GQLParser.TILDE_SLASH);
            this.state = 2491;
            this.simplifiedContents();
            this.state = 2492;
            this.match(GQLParser.SLASH_TILDE_RIGHT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedDefaultingLeftOrRight(): SimplifiedDefaultingLeftOrRightContext {
        let localContext = new SimplifiedDefaultingLeftOrRightContext(this.context, this.state);
        this.enterRule(localContext, 456, GQLParser.RULE_simplifiedDefaultingLeftOrRight);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2494;
            this.match(GQLParser.LEFT_MINUS_SLASH);
            this.state = 2495;
            this.simplifiedContents();
            this.state = 2496;
            this.match(GQLParser.SLASH_MINUS_RIGHT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedDefaultingAnyDirection(): SimplifiedDefaultingAnyDirectionContext {
        let localContext = new SimplifiedDefaultingAnyDirectionContext(this.context, this.state);
        this.enterRule(localContext, 458, GQLParser.RULE_simplifiedDefaultingAnyDirection);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2498;
            this.match(GQLParser.MINUS_SLASH);
            this.state = 2499;
            this.simplifiedContents();
            this.state = 2500;
            this.match(GQLParser.SLASH_MINUS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedContents(): SimplifiedContentsContext {
        let localContext = new SimplifiedContentsContext(this.context, this.state);
        this.enterRule(localContext, 460, GQLParser.RULE_simplifiedContents);
        try {
            this.state = 2505;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 215, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2502;
                this.simplifiedTerm(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2503;
                this.simplifiedPathUnion();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2504;
                this.simplifiedMultisetAlternation();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedPathUnion(): SimplifiedPathUnionContext {
        let localContext = new SimplifiedPathUnionContext(this.context, this.state);
        this.enterRule(localContext, 462, GQLParser.RULE_simplifiedPathUnion);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2507;
            this.simplifiedTerm(0);
            this.state = 2508;
            this.match(GQLParser.VERTICAL_BAR);
            this.state = 2509;
            this.simplifiedTerm(0);
            this.state = 2514;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 386) {
                {
                {
                this.state = 2510;
                this.match(GQLParser.VERTICAL_BAR);
                this.state = 2511;
                this.simplifiedTerm(0);
                }
                }
                this.state = 2516;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedMultisetAlternation(): SimplifiedMultisetAlternationContext {
        let localContext = new SimplifiedMultisetAlternationContext(this.context, this.state);
        this.enterRule(localContext, 464, GQLParser.RULE_simplifiedMultisetAlternation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2517;
            this.simplifiedTerm(0);
            this.state = 2518;
            this.match(GQLParser.MULTISET_ALTERNATION_OPERATOR);
            this.state = 2519;
            this.simplifiedTerm(0);
            this.state = 2524;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 328) {
                {
                {
                this.state = 2520;
                this.match(GQLParser.MULTISET_ALTERNATION_OPERATOR);
                this.state = 2521;
                this.simplifiedTerm(0);
                }
                }
                this.state = 2526;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public simplifiedTerm(): SimplifiedTermContext;
    public simplifiedTerm(_p: number): SimplifiedTermContext;
    public simplifiedTerm(_p?: number): SimplifiedTermContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new SimplifiedTermContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 466;
        this.enterRecursionRule(localContext, 466, GQLParser.RULE_simplifiedTerm, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            localContext = new SimplifiedFactorLowLabelContext(localContext);
            this.context = localContext;
            previousContext = localContext;

            this.state = 2528;
            this.simplifiedFactorLow(0);
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2534;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 218, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new SimplifiedConcatenationLabelContext(new SimplifiedTermContext(parentContext, parentState));
                    this.pushNewRecursionContext(localContext, _startState, GQLParser.RULE_simplifiedTerm);
                    this.state = 2530;
                    if (!(this.precpred(this.context, 1))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                    }
                    this.state = 2531;
                    this.simplifiedFactorLow(0);
                    }
                    }
                }
                this.state = 2536;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 218, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }

    public simplifiedFactorLow(): SimplifiedFactorLowContext;
    public simplifiedFactorLow(_p: number): SimplifiedFactorLowContext;
    public simplifiedFactorLow(_p?: number): SimplifiedFactorLowContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new SimplifiedFactorLowContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 468;
        this.enterRecursionRule(localContext, 468, GQLParser.RULE_simplifiedFactorLow, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            localContext = new SimplifiedFactorHighLabelContext(localContext);
            this.context = localContext;
            previousContext = localContext;

            this.state = 2538;
            this.simplifiedFactorHigh();
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2545;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 219, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new SimplifiedConjunctionLabelContext(new SimplifiedFactorLowContext(parentContext, parentState));
                    this.pushNewRecursionContext(localContext, _startState, GQLParser.RULE_simplifiedFactorLow);
                    this.state = 2540;
                    if (!(this.precpred(this.context, 1))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                    }
                    this.state = 2541;
                    this.match(GQLParser.AMPERSAND);
                    this.state = 2542;
                    this.simplifiedFactorHigh();
                    }
                    }
                }
                this.state = 2547;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 219, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public simplifiedFactorHigh(): SimplifiedFactorHighContext {
        let localContext = new SimplifiedFactorHighContext(this.context, this.state);
        this.enterRule(localContext, 470, GQLParser.RULE_simplifiedFactorHigh);
        try {
            this.state = 2551;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 220, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2548;
                this.simplifiedTertiary();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2549;
                this.simplifiedQuantified();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2550;
                this.simplifiedQuestioned();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedQuantified(): SimplifiedQuantifiedContext {
        let localContext = new SimplifiedQuantifiedContext(this.context, this.state);
        this.enterRule(localContext, 472, GQLParser.RULE_simplifiedQuantified);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2553;
            this.simplifiedTertiary();
            this.state = 2554;
            this.graphPatternQuantifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedQuestioned(): SimplifiedQuestionedContext {
        let localContext = new SimplifiedQuestionedContext(this.context, this.state);
        this.enterRule(localContext, 474, GQLParser.RULE_simplifiedQuestioned);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2556;
            this.simplifiedTertiary();
            this.state = 2557;
            this.match(GQLParser.QUESTION_MARK);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedTertiary(): SimplifiedTertiaryContext {
        let localContext = new SimplifiedTertiaryContext(this.context, this.state);
        this.enterRule(localContext, 476, GQLParser.RULE_simplifiedTertiary);
        try {
            this.state = 2561;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 221, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2559;
                this.simplifiedDirectionOverride();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2560;
                this.simplifiedSecondary();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedDirectionOverride(): SimplifiedDirectionOverrideContext {
        let localContext = new SimplifiedDirectionOverrideContext(this.context, this.state);
        this.enterRule(localContext, 478, GQLParser.RULE_simplifiedDirectionOverride);
        try {
            this.state = 2570;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 222, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2563;
                this.simplifiedOverrideLeft();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2564;
                this.simplifiedOverrideUndirected();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2565;
                this.simplifiedOverrideRight();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2566;
                this.simplifiedOverrideLeftOrUndirected();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2567;
                this.simplifiedOverrideUndirectedOrRight();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2568;
                this.simplifiedOverrideLeftOrRight();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2569;
                this.simplifiedOverrideAnyDirection();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedOverrideLeft(): SimplifiedOverrideLeftContext {
        let localContext = new SimplifiedOverrideLeftContext(this.context, this.state);
        this.enterRule(localContext, 480, GQLParser.RULE_simplifiedOverrideLeft);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2572;
            this.match(GQLParser.LEFT_ANGLE_BRACKET);
            this.state = 2573;
            this.simplifiedSecondary();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedOverrideUndirected(): SimplifiedOverrideUndirectedContext {
        let localContext = new SimplifiedOverrideUndirectedContext(this.context, this.state);
        this.enterRule(localContext, 482, GQLParser.RULE_simplifiedOverrideUndirected);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2575;
            this.match(GQLParser.TILDE);
            this.state = 2576;
            this.simplifiedSecondary();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedOverrideRight(): SimplifiedOverrideRightContext {
        let localContext = new SimplifiedOverrideRightContext(this.context, this.state);
        this.enterRule(localContext, 484, GQLParser.RULE_simplifiedOverrideRight);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2578;
            this.simplifiedSecondary();
            this.state = 2579;
            this.match(GQLParser.RIGHT_ANGLE_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedOverrideLeftOrUndirected(): SimplifiedOverrideLeftOrUndirectedContext {
        let localContext = new SimplifiedOverrideLeftOrUndirectedContext(this.context, this.state);
        this.enterRule(localContext, 486, GQLParser.RULE_simplifiedOverrideLeftOrUndirected);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2581;
            this.match(GQLParser.LEFT_ARROW_TILDE);
            this.state = 2582;
            this.simplifiedSecondary();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedOverrideUndirectedOrRight(): SimplifiedOverrideUndirectedOrRightContext {
        let localContext = new SimplifiedOverrideUndirectedOrRightContext(this.context, this.state);
        this.enterRule(localContext, 488, GQLParser.RULE_simplifiedOverrideUndirectedOrRight);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2584;
            this.match(GQLParser.TILDE);
            this.state = 2585;
            this.simplifiedSecondary();
            this.state = 2586;
            this.match(GQLParser.RIGHT_ANGLE_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedOverrideLeftOrRight(): SimplifiedOverrideLeftOrRightContext {
        let localContext = new SimplifiedOverrideLeftOrRightContext(this.context, this.state);
        this.enterRule(localContext, 490, GQLParser.RULE_simplifiedOverrideLeftOrRight);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2588;
            this.match(GQLParser.LEFT_ANGLE_BRACKET);
            this.state = 2589;
            this.simplifiedSecondary();
            this.state = 2590;
            this.match(GQLParser.RIGHT_ANGLE_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedOverrideAnyDirection(): SimplifiedOverrideAnyDirectionContext {
        let localContext = new SimplifiedOverrideAnyDirectionContext(this.context, this.state);
        this.enterRule(localContext, 492, GQLParser.RULE_simplifiedOverrideAnyDirection);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2592;
            this.match(GQLParser.MINUS_SIGN);
            this.state = 2593;
            this.simplifiedSecondary();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedSecondary(): SimplifiedSecondaryContext {
        let localContext = new SimplifiedSecondaryContext(this.context, this.state);
        this.enterRule(localContext, 494, GQLParser.RULE_simplifiedSecondary);
        try {
            this.state = 2597;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.ACCENT_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.ACYCLIC:
            case GQLParser.BINDING:
            case GQLParser.BINDINGS:
            case GQLParser.CONNECTING:
            case GQLParser.DESTINATION:
            case GQLParser.DIFFERENT:
            case GQLParser.DIRECTED:
            case GQLParser.EDGE:
            case GQLParser.EDGES:
            case GQLParser.ELEMENT:
            case GQLParser.ELEMENTS:
            case GQLParser.FIRST:
            case GQLParser.GRAPH:
            case GQLParser.GROUPS:
            case GQLParser.KEEP:
            case GQLParser.LABEL:
            case GQLParser.LABELED:
            case GQLParser.LABELS:
            case GQLParser.LAST:
            case GQLParser.NFC:
            case GQLParser.NFD:
            case GQLParser.NFKC:
            case GQLParser.NFKD:
            case GQLParser.NO:
            case GQLParser.NODE:
            case GQLParser.NORMALIZED:
            case GQLParser.ONLY:
            case GQLParser.ORDINALITY:
            case GQLParser.PROPERTY:
            case GQLParser.READ:
            case GQLParser.RELATIONSHIP:
            case GQLParser.RELATIONSHIPS:
            case GQLParser.REPEATABLE:
            case GQLParser.SHORTEST:
            case GQLParser.SIMPLE:
            case GQLParser.SOURCE:
            case GQLParser.TABLE:
            case GQLParser.TEMP:
            case GQLParser.TO:
            case GQLParser.TRAIL:
            case GQLParser.TRANSACTION:
            case GQLParser.TYPE:
            case GQLParser.UNDIRECTED:
            case GQLParser.VERTEX:
            case GQLParser.WALK:
            case GQLParser.WITHOUT:
            case GQLParser.WRITE:
            case GQLParser.ZONE:
            case GQLParser.REGULAR_IDENTIFIER:
            case GQLParser.LEFT_PAREN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2595;
                this.simplifiedPrimary();
                }
                break;
            case GQLParser.EXCLAMATION_MARK:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2596;
                this.simplifiedNegation();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedNegation(): SimplifiedNegationContext {
        let localContext = new SimplifiedNegationContext(this.context, this.state);
        this.enterRule(localContext, 496, GQLParser.RULE_simplifiedNegation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2599;
            this.match(GQLParser.EXCLAMATION_MARK);
            this.state = 2600;
            this.simplifiedPrimary();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simplifiedPrimary(): SimplifiedPrimaryContext {
        let localContext = new SimplifiedPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 498, GQLParser.RULE_simplifiedPrimary);
        try {
            this.state = 2607;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.ACCENT_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.ACYCLIC:
            case GQLParser.BINDING:
            case GQLParser.BINDINGS:
            case GQLParser.CONNECTING:
            case GQLParser.DESTINATION:
            case GQLParser.DIFFERENT:
            case GQLParser.DIRECTED:
            case GQLParser.EDGE:
            case GQLParser.EDGES:
            case GQLParser.ELEMENT:
            case GQLParser.ELEMENTS:
            case GQLParser.FIRST:
            case GQLParser.GRAPH:
            case GQLParser.GROUPS:
            case GQLParser.KEEP:
            case GQLParser.LABEL:
            case GQLParser.LABELED:
            case GQLParser.LABELS:
            case GQLParser.LAST:
            case GQLParser.NFC:
            case GQLParser.NFD:
            case GQLParser.NFKC:
            case GQLParser.NFKD:
            case GQLParser.NO:
            case GQLParser.NODE:
            case GQLParser.NORMALIZED:
            case GQLParser.ONLY:
            case GQLParser.ORDINALITY:
            case GQLParser.PROPERTY:
            case GQLParser.READ:
            case GQLParser.RELATIONSHIP:
            case GQLParser.RELATIONSHIPS:
            case GQLParser.REPEATABLE:
            case GQLParser.SHORTEST:
            case GQLParser.SIMPLE:
            case GQLParser.SOURCE:
            case GQLParser.TABLE:
            case GQLParser.TEMP:
            case GQLParser.TO:
            case GQLParser.TRAIL:
            case GQLParser.TRANSACTION:
            case GQLParser.TYPE:
            case GQLParser.UNDIRECTED:
            case GQLParser.VERTEX:
            case GQLParser.WALK:
            case GQLParser.WITHOUT:
            case GQLParser.WRITE:
            case GQLParser.ZONE:
            case GQLParser.REGULAR_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2602;
                this.labelName();
                }
                break;
            case GQLParser.LEFT_PAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2603;
                this.match(GQLParser.LEFT_PAREN);
                this.state = 2604;
                this.simplifiedContents();
                this.state = 2605;
                this.match(GQLParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whereClause(): WhereClauseContext {
        let localContext = new WhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 500, GQLParser.RULE_whereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2609;
            this.match(GQLParser.WHERE);
            this.state = 2610;
            this.searchCondition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public yieldClause(): YieldClauseContext {
        let localContext = new YieldClauseContext(this.context, this.state);
        this.enterRule(localContext, 502, GQLParser.RULE_yieldClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2612;
            this.match(GQLParser.YIELD);
            this.state = 2613;
            this.yieldItemList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public yieldItemList(): YieldItemListContext {
        let localContext = new YieldItemListContext(this.context, this.state);
        this.enterRule(localContext, 504, GQLParser.RULE_yieldItemList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2615;
            this.yieldItem();
            this.state = 2620;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 361) {
                {
                {
                this.state = 2616;
                this.match(GQLParser.COMMA);
                this.state = 2617;
                this.yieldItem();
                }
                }
                this.state = 2622;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public yieldItem(): YieldItemContext {
        let localContext = new YieldItemContext(this.context, this.state);
        this.enterRule(localContext, 506, GQLParser.RULE_yieldItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            {
            this.state = 2623;
            this.yieldItemName();
            this.state = 2625;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 27) {
                {
                this.state = 2624;
                this.yieldItemAlias();
                }
            }

            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public yieldItemName(): YieldItemNameContext {
        let localContext = new YieldItemNameContext(this.context, this.state);
        this.enterRule(localContext, 508, GQLParser.RULE_yieldItemName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2627;
            this.fieldName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public yieldItemAlias(): YieldItemAliasContext {
        let localContext = new YieldItemAliasContext(this.context, this.state);
        this.enterRule(localContext, 510, GQLParser.RULE_yieldItemAlias);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2629;
            this.match(GQLParser.AS);
            this.state = 2630;
            this.bindingVariable();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupByClause(): GroupByClauseContext {
        let localContext = new GroupByClauseContext(this.context, this.state);
        this.enterRule(localContext, 512, GQLParser.RULE_groupByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2632;
            this.match(GQLParser.GROUP);
            this.state = 2633;
            this.match(GQLParser.BY);
            this.state = 2634;
            this.groupingElementList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingElementList(): GroupingElementListContext {
        let localContext = new GroupingElementListContext(this.context, this.state);
        this.enterRule(localContext, 514, GQLParser.RULE_groupingElementList);
        try {
            let alternative: number;
            this.state = 2645;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.ACYCLIC:
            case GQLParser.BINDING:
            case GQLParser.BINDINGS:
            case GQLParser.CONNECTING:
            case GQLParser.DESTINATION:
            case GQLParser.DIFFERENT:
            case GQLParser.DIRECTED:
            case GQLParser.EDGE:
            case GQLParser.EDGES:
            case GQLParser.ELEMENT:
            case GQLParser.ELEMENTS:
            case GQLParser.FIRST:
            case GQLParser.GRAPH:
            case GQLParser.GROUPS:
            case GQLParser.KEEP:
            case GQLParser.LABEL:
            case GQLParser.LABELED:
            case GQLParser.LABELS:
            case GQLParser.LAST:
            case GQLParser.NFC:
            case GQLParser.NFD:
            case GQLParser.NFKC:
            case GQLParser.NFKD:
            case GQLParser.NO:
            case GQLParser.NODE:
            case GQLParser.NORMALIZED:
            case GQLParser.ONLY:
            case GQLParser.ORDINALITY:
            case GQLParser.PROPERTY:
            case GQLParser.READ:
            case GQLParser.RELATIONSHIP:
            case GQLParser.RELATIONSHIPS:
            case GQLParser.REPEATABLE:
            case GQLParser.SHORTEST:
            case GQLParser.SIMPLE:
            case GQLParser.SOURCE:
            case GQLParser.TABLE:
            case GQLParser.TEMP:
            case GQLParser.TO:
            case GQLParser.TRAIL:
            case GQLParser.TRANSACTION:
            case GQLParser.TYPE:
            case GQLParser.UNDIRECTED:
            case GQLParser.VERTEX:
            case GQLParser.WALK:
            case GQLParser.WITHOUT:
            case GQLParser.WRITE:
            case GQLParser.ZONE:
            case GQLParser.REGULAR_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2636;
                this.groupingElement();
                this.state = 2641;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 227, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2637;
                        this.match(GQLParser.COMMA);
                        this.state = 2638;
                        this.groupingElement();
                        }
                        }
                    }
                    this.state = 2643;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 227, this.context);
                }
                }
                break;
            case GQLParser.LEFT_PAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2644;
                this.emptyGroupingSet();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingElement(): GroupingElementContext {
        let localContext = new GroupingElementContext(this.context, this.state);
        this.enterRule(localContext, 516, GQLParser.RULE_groupingElement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2647;
            this.bindingVariableReference();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public emptyGroupingSet(): EmptyGroupingSetContext {
        let localContext = new EmptyGroupingSetContext(this.context, this.state);
        this.enterRule(localContext, 518, GQLParser.RULE_emptyGroupingSet);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2649;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 2650;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderByClause(): OrderByClauseContext {
        let localContext = new OrderByClauseContext(this.context, this.state);
        this.enterRule(localContext, 520, GQLParser.RULE_orderByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2652;
            this.match(GQLParser.ORDER);
            this.state = 2653;
            this.match(GQLParser.BY);
            this.state = 2654;
            this.sortSpecificationList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortSpecificationList(): SortSpecificationListContext {
        let localContext = new SortSpecificationListContext(this.context, this.state);
        this.enterRule(localContext, 522, GQLParser.RULE_sortSpecificationList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2656;
            this.sortSpecification();
            this.state = 2661;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 229, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2657;
                    this.match(GQLParser.COMMA);
                    this.state = 2658;
                    this.sortSpecification();
                    }
                    }
                }
                this.state = 2663;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 229, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortSpecification(): SortSpecificationContext {
        let localContext = new SortSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 524, GQLParser.RULE_sortSpecification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2664;
            this.sortKey();
            this.state = 2666;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 230, this.context) ) {
            case 1:
                {
                this.state = 2665;
                this.orderingSpecification();
                }
                break;
            }
            this.state = 2669;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 231, this.context) ) {
            case 1:
                {
                this.state = 2668;
                this.nullOrdering();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortKey(): SortKeyContext {
        let localContext = new SortKeyContext(this.context, this.state);
        this.enterRule(localContext, 526, GQLParser.RULE_sortKey);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2671;
            this.aggregatingValueExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderingSpecification(): OrderingSpecificationContext {
        let localContext = new OrderingSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 528, GQLParser.RULE_orderingSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2673;
            _la = this.tokenStream.LA(1);
            if(!(_la === 28 || _la === 29 || _la === 77 || _la === 78)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nullOrdering(): NullOrderingContext {
        let localContext = new NullOrderingContext(this.context, this.state);
        this.enterRule(localContext, 530, GQLParser.RULE_nullOrdering);
        try {
            this.state = 2679;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 232, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2675;
                this.match(GQLParser.NULLS);
                this.state = 2676;
                this.match(GQLParser.FIRST);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2677;
                this.match(GQLParser.NULLS);
                this.state = 2678;
                this.match(GQLParser.LAST);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitClause(): LimitClauseContext {
        let localContext = new LimitClauseContext(this.context, this.state);
        this.enterRule(localContext, 532, GQLParser.RULE_limitClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2681;
            this.match(GQLParser.LIMIT);
            this.state = 2682;
            this.nonNegativeIntegerSpecification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public offsetClause(): OffsetClauseContext {
        let localContext = new OffsetClauseContext(this.context, this.state);
        this.enterRule(localContext, 534, GQLParser.RULE_offsetClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2684;
            this.offsetSynonym();
            this.state = 2685;
            this.nonNegativeIntegerSpecification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public offsetSynonym(): OffsetSynonymContext {
        let localContext = new OffsetSynonymContext(this.context, this.state);
        this.enterRule(localContext, 536, GQLParser.RULE_offsetSynonym);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2687;
            _la = this.tokenStream.LA(1);
            if(!(_la === 159 || _la === 195)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schemaReference(): SchemaReferenceContext {
        let localContext = new SchemaReferenceContext(this.context, this.state);
        this.enterRule(localContext, 538, GQLParser.RULE_schemaReference);
        try {
            this.state = 2692;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.SOLIDUS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2689;
                this.absoluteCatalogSchemaReference();
                }
                break;
            case GQLParser.CURRENT_SCHEMA:
            case GQLParser.HOME_SCHEMA:
            case GQLParser.DOUBLE_PERIOD:
            case GQLParser.PERIOD:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2690;
                this.relativeCatalogSchemaReference();
                }
                break;
            case GQLParser.SUBSTITUTED_PARAMETER_REFERENCE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2691;
                this.referenceParameterSpecification();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public absoluteCatalogSchemaReference(): AbsoluteCatalogSchemaReferenceContext {
        let localContext = new AbsoluteCatalogSchemaReferenceContext(this.context, this.state);
        this.enterRule(localContext, 540, GQLParser.RULE_absoluteCatalogSchemaReference);
        try {
            this.state = 2698;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 234, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2694;
                this.match(GQLParser.SOLIDUS);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2695;
                this.absoluteDirectoryPath();
                this.state = 2696;
                this.schemaName();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public catalogSchemaParentAndName(): CatalogSchemaParentAndNameContext {
        let localContext = new CatalogSchemaParentAndNameContext(this.context, this.state);
        this.enterRule(localContext, 542, GQLParser.RULE_catalogSchemaParentAndName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2700;
            this.absoluteDirectoryPath();
            this.state = 2701;
            this.schemaName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relativeCatalogSchemaReference(): RelativeCatalogSchemaReferenceContext {
        let localContext = new RelativeCatalogSchemaReferenceContext(this.context, this.state);
        this.enterRule(localContext, 544, GQLParser.RULE_relativeCatalogSchemaReference);
        try {
            this.state = 2707;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.CURRENT_SCHEMA:
            case GQLParser.HOME_SCHEMA:
            case GQLParser.PERIOD:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2703;
                this.predefinedSchemaReference();
                }
                break;
            case GQLParser.DOUBLE_PERIOD:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2704;
                this.relativeDirectoryPath();
                this.state = 2705;
                this.schemaName();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public predefinedSchemaReference(): PredefinedSchemaReferenceContext {
        let localContext = new PredefinedSchemaReferenceContext(this.context, this.state);
        this.enterRule(localContext, 546, GQLParser.RULE_predefinedSchemaReference);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2709;
            _la = this.tokenStream.LA(1);
            if(!(_la === 67 || _la === 106 || _la === 375)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public absoluteDirectoryPath(): AbsoluteDirectoryPathContext {
        let localContext = new AbsoluteDirectoryPathContext(this.context, this.state);
        this.enterRule(localContext, 548, GQLParser.RULE_absoluteDirectoryPath);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2711;
            this.match(GQLParser.SOLIDUS);
            this.state = 2713;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 236, this.context) ) {
            case 1:
                {
                this.state = 2712;
                this.simpleDirectoryPath();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relativeDirectoryPath(): RelativeDirectoryPathContext {
        let localContext = new RelativeDirectoryPathContext(this.context, this.state);
        this.enterRule(localContext, 550, GQLParser.RULE_relativeDirectoryPath);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2715;
            this.match(GQLParser.DOUBLE_PERIOD);
            this.state = 2720;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 237, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2716;
                    this.match(GQLParser.SOLIDUS);
                    this.state = 2717;
                    this.match(GQLParser.DOUBLE_PERIOD);
                    }
                    }
                }
                this.state = 2722;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 237, this.context);
            }
            this.state = 2723;
            this.match(GQLParser.SOLIDUS);
            this.state = 2725;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 238, this.context) ) {
            case 1:
                {
                this.state = 2724;
                this.simpleDirectoryPath();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleDirectoryPath(): SimpleDirectoryPathContext {
        let localContext = new SimpleDirectoryPathContext(this.context, this.state);
        this.enterRule(localContext, 552, GQLParser.RULE_simpleDirectoryPath);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2730;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 2727;
                    this.directoryName();
                    this.state = 2728;
                    this.match(GQLParser.SOLIDUS);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2732;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 239, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public graphReference(): GraphReferenceContext {
        let localContext = new GraphReferenceContext(this.context, this.state);
        this.enterRule(localContext, 554, GQLParser.RULE_graphReference);
        try {
            this.state = 2740;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 240, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2734;
                this.catalogObjectParentReference();
                this.state = 2735;
                this.graphName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2737;
                this.delimitedGraphName();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2738;
                this.homeGraph();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2739;
                this.referenceParameterSpecification();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public catalogGraphParentAndName(): CatalogGraphParentAndNameContext {
        let localContext = new CatalogGraphParentAndNameContext(this.context, this.state);
        this.enterRule(localContext, 556, GQLParser.RULE_catalogGraphParentAndName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2743;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 241, this.context) ) {
            case 1:
                {
                this.state = 2742;
                this.catalogObjectParentReference();
                }
                break;
            }
            this.state = 2745;
            this.graphName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public homeGraph(): HomeGraphContext {
        let localContext = new HomeGraphContext(this.context, this.state);
        this.enterRule(localContext, 558, GQLParser.RULE_homeGraph);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2747;
            _la = this.tokenStream.LA(1);
            if(!(_la === 104 || _la === 105)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public graphTypeReference(): GraphTypeReferenceContext {
        let localContext = new GraphTypeReferenceContext(this.context, this.state);
        this.enterRule(localContext, 560, GQLParser.RULE_graphTypeReference);
        try {
            this.state = 2751;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 242, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2749;
                this.catalogGraphTypeParentAndName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2750;
                this.referenceParameterSpecification();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public catalogGraphTypeParentAndName(): CatalogGraphTypeParentAndNameContext {
        let localContext = new CatalogGraphTypeParentAndNameContext(this.context, this.state);
        this.enterRule(localContext, 562, GQLParser.RULE_catalogGraphTypeParentAndName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2754;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 243, this.context) ) {
            case 1:
                {
                this.state = 2753;
                this.catalogObjectParentReference();
                }
                break;
            }
            this.state = 2756;
            this.graphTypeName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bindingTableReference(): BindingTableReferenceContext {
        let localContext = new BindingTableReferenceContext(this.context, this.state);
        this.enterRule(localContext, 564, GQLParser.RULE_bindingTableReference);
        try {
            this.state = 2763;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 244, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2758;
                this.catalogObjectParentReference();
                this.state = 2759;
                this.bindingTableName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2761;
                this.delimitedBindingTableName();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2762;
                this.referenceParameterSpecification();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedureReference(): ProcedureReferenceContext {
        let localContext = new ProcedureReferenceContext(this.context, this.state);
        this.enterRule(localContext, 566, GQLParser.RULE_procedureReference);
        try {
            this.state = 2767;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 245, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2765;
                this.catalogProcedureParentAndName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2766;
                this.referenceParameterSpecification();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public catalogProcedureParentAndName(): CatalogProcedureParentAndNameContext {
        let localContext = new CatalogProcedureParentAndNameContext(this.context, this.state);
        this.enterRule(localContext, 568, GQLParser.RULE_catalogProcedureParentAndName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2770;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 246, this.context) ) {
            case 1:
                {
                this.state = 2769;
                this.catalogObjectParentReference();
                }
                break;
            }
            this.state = 2772;
            this.procedureName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public catalogObjectParentReference(): CatalogObjectParentReferenceContext {
        let localContext = new CatalogObjectParentReferenceContext(this.context, this.state);
        this.enterRule(localContext, 570, GQLParser.RULE_catalogObjectParentReference);
        let _la: number;
        try {
            let alternative: number;
            this.state = 2793;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.CURRENT_SCHEMA:
            case GQLParser.HOME_SCHEMA:
            case GQLParser.SUBSTITUTED_PARAMETER_REFERENCE:
            case GQLParser.DOUBLE_PERIOD:
            case GQLParser.PERIOD:
            case GQLParser.SOLIDUS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2774;
                this.schemaReference();
                this.state = 2776;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 383) {
                    {
                    this.state = 2775;
                    this.match(GQLParser.SOLIDUS);
                    }
                }

                this.state = 2783;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 248, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2778;
                        this.objectName();
                        this.state = 2779;
                        this.match(GQLParser.PERIOD);
                        }
                        }
                    }
                    this.state = 2785;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 248, this.context);
                }
                }
                break;
            case GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.ACCENT_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.ACYCLIC:
            case GQLParser.BINDING:
            case GQLParser.BINDINGS:
            case GQLParser.CONNECTING:
            case GQLParser.DESTINATION:
            case GQLParser.DIFFERENT:
            case GQLParser.DIRECTED:
            case GQLParser.EDGE:
            case GQLParser.EDGES:
            case GQLParser.ELEMENT:
            case GQLParser.ELEMENTS:
            case GQLParser.FIRST:
            case GQLParser.GRAPH:
            case GQLParser.GROUPS:
            case GQLParser.KEEP:
            case GQLParser.LABEL:
            case GQLParser.LABELED:
            case GQLParser.LABELS:
            case GQLParser.LAST:
            case GQLParser.NFC:
            case GQLParser.NFD:
            case GQLParser.NFKC:
            case GQLParser.NFKD:
            case GQLParser.NO:
            case GQLParser.NODE:
            case GQLParser.NORMALIZED:
            case GQLParser.ONLY:
            case GQLParser.ORDINALITY:
            case GQLParser.PROPERTY:
            case GQLParser.READ:
            case GQLParser.RELATIONSHIP:
            case GQLParser.RELATIONSHIPS:
            case GQLParser.REPEATABLE:
            case GQLParser.SHORTEST:
            case GQLParser.SIMPLE:
            case GQLParser.SOURCE:
            case GQLParser.TABLE:
            case GQLParser.TEMP:
            case GQLParser.TO:
            case GQLParser.TRAIL:
            case GQLParser.TRANSACTION:
            case GQLParser.TYPE:
            case GQLParser.UNDIRECTED:
            case GQLParser.VERTEX:
            case GQLParser.WALK:
            case GQLParser.WITHOUT:
            case GQLParser.WRITE:
            case GQLParser.ZONE:
            case GQLParser.REGULAR_IDENTIFIER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2789;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 2786;
                        this.objectName();
                        this.state = 2787;
                        this.match(GQLParser.PERIOD);
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 2791;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 249, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public referenceParameterSpecification(): ReferenceParameterSpecificationContext {
        let localContext = new ReferenceParameterSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 572, GQLParser.RULE_referenceParameterSpecification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2795;
            this.match(GQLParser.SUBSTITUTED_PARAMETER_REFERENCE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nestedGraphTypeSpecification(): NestedGraphTypeSpecificationContext {
        let localContext = new NestedGraphTypeSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 574, GQLParser.RULE_nestedGraphTypeSpecification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2797;
            this.match(GQLParser.LEFT_BRACE);
            this.state = 2798;
            this.graphTypeSpecificationBody();
            this.state = 2799;
            this.match(GQLParser.RIGHT_BRACE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public graphTypeSpecificationBody(): GraphTypeSpecificationBodyContext {
        let localContext = new GraphTypeSpecificationBodyContext(this.context, this.state);
        this.enterRule(localContext, 576, GQLParser.RULE_graphTypeSpecificationBody);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2801;
            this.elementTypeList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elementTypeList(): ElementTypeListContext {
        let localContext = new ElementTypeListContext(this.context, this.state);
        this.enterRule(localContext, 578, GQLParser.RULE_elementTypeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2803;
            this.elementTypeSpecification();
            this.state = 2808;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 361) {
                {
                {
                this.state = 2804;
                this.match(GQLParser.COMMA);
                this.state = 2805;
                this.elementTypeSpecification();
                }
                }
                this.state = 2810;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elementTypeSpecification(): ElementTypeSpecificationContext {
        let localContext = new ElementTypeSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 580, GQLParser.RULE_elementTypeSpecification);
        try {
            this.state = 2813;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 252, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2811;
                this.nodeTypeSpecification();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2812;
                this.edgeTypeSpecification();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nodeTypeSpecification(): NodeTypeSpecificationContext {
        let localContext = new NodeTypeSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 582, GQLParser.RULE_nodeTypeSpecification);
        try {
            this.state = 2817;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 253, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2815;
                this.nodeTypePattern();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2816;
                this.nodeTypePhrase();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nodeTypePattern(): NodeTypePatternContext {
        let localContext = new NodeTypePatternContext(this.context, this.state);
        this.enterRule(localContext, 584, GQLParser.RULE_nodeTypePattern);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2825;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 301 || _la === 320) {
                {
                this.state = 2819;
                this.nodeSynonym();
                this.state = 2821;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 254, this.context) ) {
                case 1:
                    {
                    this.state = 2820;
                    this.match(GQLParser.TYPE);
                    }
                    break;
                }
                this.state = 2823;
                this.nodeTypeName();
                }
            }

            this.state = 2827;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 2829;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 256, this.context) ) {
            case 1:
                {
                this.state = 2828;
                this.localNodeTypeAlias();
                }
                break;
            }
            this.state = 2832;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1 || _la === 127 || _la === 292 || _la === 294 || _la === 360 || _la === 369) {
                {
                this.state = 2831;
                this.nodeTypeFiller();
                }
            }

            this.state = 2834;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nodeTypePhrase(): NodeTypePhraseContext {
        let localContext = new NodeTypePhraseContext(this.context, this.state);
        this.enterRule(localContext, 586, GQLParser.RULE_nodeTypePhrase);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2836;
            this.nodeSynonym();
            this.state = 2838;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 258, this.context) ) {
            case 1:
                {
                this.state = 2837;
                this.match(GQLParser.TYPE);
                }
                break;
            }
            this.state = 2840;
            this.nodeTypePhraseFiller();
            this.state = 2843;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 259, this.context) ) {
            case 1:
                {
                this.state = 2841;
                this.match(GQLParser.AS);
                this.state = 2842;
                this.localNodeTypeAlias();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nodeTypePhraseFiller(): NodeTypePhraseFillerContext {
        let localContext = new NodeTypePhraseFillerContext(this.context, this.state);
        this.enterRule(localContext, 588, GQLParser.RULE_nodeTypePhraseFiller);
        try {
            this.state = 2850;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 261, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2845;
                this.nodeTypeName();
                this.state = 2847;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 260, this.context) ) {
                case 1:
                    {
                    this.state = 2846;
                    this.nodeTypeFiller();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2849;
                this.nodeTypeFiller();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nodeTypeFiller(): NodeTypeFillerContext {
        let localContext = new NodeTypeFillerContext(this.context, this.state);
        this.enterRule(localContext, 590, GQLParser.RULE_nodeTypeFiller);
        try {
            this.state = 2857;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 263, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2852;
                this.nodeTypeKeyLabelSet();
                this.state = 2854;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 262, this.context) ) {
                case 1:
                    {
                    this.state = 2853;
                    this.nodeTypeImpliedContent();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2856;
                this.nodeTypeImpliedContent();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public localNodeTypeAlias(): LocalNodeTypeAliasContext {
        let localContext = new LocalNodeTypeAliasContext(this.context, this.state);
        this.enterRule(localContext, 592, GQLParser.RULE_localNodeTypeAlias);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2859;
            this.regularIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nodeTypeImpliedContent(): NodeTypeImpliedContentContext {
        let localContext = new NodeTypeImpliedContentContext(this.context, this.state);
        this.enterRule(localContext, 594, GQLParser.RULE_nodeTypeImpliedContent);
        try {
            this.state = 2866;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 264, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2861;
                this.nodeTypeLabelSet();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2862;
                this.nodeTypePropertyTypes();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2863;
                this.nodeTypeLabelSet();
                this.state = 2864;
                this.nodeTypePropertyTypes();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nodeTypeKeyLabelSet(): NodeTypeKeyLabelSetContext {
        let localContext = new NodeTypeKeyLabelSetContext(this.context, this.state);
        this.enterRule(localContext, 596, GQLParser.RULE_nodeTypeKeyLabelSet);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2869;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 127 || _la === 292 || _la === 294 || _la === 360) {
                {
                this.state = 2868;
                this.labelSetPhrase();
                }
            }

            this.state = 2871;
            this.match(GQLParser.IMPLIES);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nodeTypeLabelSet(): NodeTypeLabelSetContext {
        let localContext = new NodeTypeLabelSetContext(this.context, this.state);
        this.enterRule(localContext, 598, GQLParser.RULE_nodeTypeLabelSet);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2873;
            this.labelSetPhrase();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nodeTypePropertyTypes(): NodeTypePropertyTypesContext {
        let localContext = new NodeTypePropertyTypesContext(this.context, this.state);
        this.enterRule(localContext, 600, GQLParser.RULE_nodeTypePropertyTypes);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2875;
            this.propertyTypesSpecification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public edgeTypeSpecification(): EdgeTypeSpecificationContext {
        let localContext = new EdgeTypeSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 602, GQLParser.RULE_edgeTypeSpecification);
        try {
            this.state = 2879;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 266, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2877;
                this.edgeTypePattern();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2878;
                this.edgeTypePhrase();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public edgeTypePattern(): EdgeTypePatternContext {
        let localContext = new EdgeTypePatternContext(this.context, this.state);
        this.enterRule(localContext, 604, GQLParser.RULE_edgeTypePattern);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2890;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 16777219) !== 0) || _la === 319) {
                {
                this.state = 2882;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 283 || _la === 319) {
                    {
                    this.state = 2881;
                    this.edgeKind();
                    }
                }

                this.state = 2884;
                this.edgeSynonym();
                this.state = 2886;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 268, this.context) ) {
                case 1:
                    {
                    this.state = 2885;
                    this.match(GQLParser.TYPE);
                    }
                    break;
                }
                this.state = 2888;
                this.edgeTypeName();
                }
            }

            this.state = 2894;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 270, this.context) ) {
            case 1:
                {
                this.state = 2892;
                this.edgeTypePatternDirected();
                }
                break;
            case 2:
                {
                this.state = 2893;
                this.edgeTypePatternUndirected();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public edgeTypePhrase(): EdgeTypePhraseContext {
        let localContext = new EdgeTypePhraseContext(this.context, this.state);
        this.enterRule(localContext, 606, GQLParser.RULE_edgeTypePhrase);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2896;
            this.edgeKind();
            this.state = 2897;
            this.edgeSynonym();
            this.state = 2899;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 271, this.context) ) {
            case 1:
                {
                this.state = 2898;
                this.match(GQLParser.TYPE);
                }
                break;
            }
            this.state = 2901;
            this.edgeTypePhraseFiller();
            this.state = 2902;
            this.endpointPairPhrase();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public edgeTypePhraseFiller(): EdgeTypePhraseFillerContext {
        let localContext = new EdgeTypePhraseFillerContext(this.context, this.state);
        this.enterRule(localContext, 608, GQLParser.RULE_edgeTypePhraseFiller);
        let _la: number;
        try {
            this.state = 2909;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 273, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2904;
                this.edgeTypeName();
                this.state = 2906;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1 || _la === 127 || _la === 292 || _la === 294 || _la === 360 || _la === 369) {
                    {
                    this.state = 2905;
                    this.edgeTypeFiller();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2908;
                this.edgeTypeFiller();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public edgeTypeFiller(): EdgeTypeFillerContext {
        let localContext = new EdgeTypeFillerContext(this.context, this.state);
        this.enterRule(localContext, 610, GQLParser.RULE_edgeTypeFiller);
        let _la: number;
        try {
            this.state = 2916;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 275, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2911;
                this.edgeTypeKeyLabelSet();
                this.state = 2913;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 127 || _la === 292 || _la === 294 || _la === 360 || _la === 369) {
                    {
                    this.state = 2912;
                    this.edgeTypeImpliedContent();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2915;
                this.edgeTypeImpliedContent();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public edgeTypeImpliedContent(): EdgeTypeImpliedContentContext {
        let localContext = new EdgeTypeImpliedContentContext(this.context, this.state);
        this.enterRule(localContext, 612, GQLParser.RULE_edgeTypeImpliedContent);
        try {
            this.state = 2923;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 276, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2918;
                this.edgeTypeLabelSet();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2919;
                this.edgeTypePropertyTypes();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2920;
                this.edgeTypeLabelSet();
                this.state = 2921;
                this.edgeTypePropertyTypes();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public edgeTypeKeyLabelSet(): EdgeTypeKeyLabelSetContext {
        let localContext = new EdgeTypeKeyLabelSetContext(this.context, this.state);
        this.enterRule(localContext, 614, GQLParser.RULE_edgeTypeKeyLabelSet);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2926;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 127 || _la === 292 || _la === 294 || _la === 360) {
                {
                this.state = 2925;
                this.labelSetPhrase();
                }
            }

            this.state = 2928;
            this.match(GQLParser.IMPLIES);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public edgeTypeLabelSet(): EdgeTypeLabelSetContext {
        let localContext = new EdgeTypeLabelSetContext(this.context, this.state);
        this.enterRule(localContext, 616, GQLParser.RULE_edgeTypeLabelSet);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2930;
            this.labelSetPhrase();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public edgeTypePropertyTypes(): EdgeTypePropertyTypesContext {
        let localContext = new EdgeTypePropertyTypesContext(this.context, this.state);
        this.enterRule(localContext, 618, GQLParser.RULE_edgeTypePropertyTypes);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2932;
            this.propertyTypesSpecification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public edgeTypePatternDirected(): EdgeTypePatternDirectedContext {
        let localContext = new EdgeTypePatternDirectedContext(this.context, this.state);
        this.enterRule(localContext, 620, GQLParser.RULE_edgeTypePatternDirected);
        try {
            this.state = 2936;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 278, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2934;
                this.edgeTypePatternPointingRight();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2935;
                this.edgeTypePatternPointingLeft();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public edgeTypePatternPointingRight(): EdgeTypePatternPointingRightContext {
        let localContext = new EdgeTypePatternPointingRightContext(this.context, this.state);
        this.enterRule(localContext, 622, GQLParser.RULE_edgeTypePatternPointingRight);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2938;
            this.sourceNodeTypeReference();
            this.state = 2939;
            this.arcTypePointingRight();
            this.state = 2940;
            this.destinationNodeTypeReference();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public edgeTypePatternPointingLeft(): EdgeTypePatternPointingLeftContext {
        let localContext = new EdgeTypePatternPointingLeftContext(this.context, this.state);
        this.enterRule(localContext, 624, GQLParser.RULE_edgeTypePatternPointingLeft);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2942;
            this.destinationNodeTypeReference();
            this.state = 2943;
            this.arcTypePointingLeft();
            this.state = 2944;
            this.sourceNodeTypeReference();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public edgeTypePatternUndirected(): EdgeTypePatternUndirectedContext {
        let localContext = new EdgeTypePatternUndirectedContext(this.context, this.state);
        this.enterRule(localContext, 626, GQLParser.RULE_edgeTypePatternUndirected);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2946;
            this.sourceNodeTypeReference();
            this.state = 2947;
            this.arcTypeUndirected();
            this.state = 2948;
            this.destinationNodeTypeReference();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public arcTypePointingRight(): ArcTypePointingRightContext {
        let localContext = new ArcTypePointingRightContext(this.context, this.state);
        this.enterRule(localContext, 628, GQLParser.RULE_arcTypePointingRight);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2950;
            this.match(GQLParser.MINUS_LEFT_BRACKET);
            this.state = 2951;
            this.edgeTypeFiller();
            this.state = 2952;
            this.match(GQLParser.BRACKET_RIGHT_ARROW);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public arcTypePointingLeft(): ArcTypePointingLeftContext {
        let localContext = new ArcTypePointingLeftContext(this.context, this.state);
        this.enterRule(localContext, 630, GQLParser.RULE_arcTypePointingLeft);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2954;
            this.match(GQLParser.LEFT_ARROW_BRACKET);
            this.state = 2955;
            this.edgeTypeFiller();
            this.state = 2956;
            this.match(GQLParser.RIGHT_BRACKET_MINUS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public arcTypeUndirected(): ArcTypeUndirectedContext {
        let localContext = new ArcTypeUndirectedContext(this.context, this.state);
        this.enterRule(localContext, 632, GQLParser.RULE_arcTypeUndirected);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2958;
            this.match(GQLParser.TILDE_LEFT_BRACKET);
            this.state = 2959;
            this.edgeTypeFiller();
            this.state = 2960;
            this.match(GQLParser.RIGHT_BRACKET_TILDE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourceNodeTypeReference(): SourceNodeTypeReferenceContext {
        let localContext = new SourceNodeTypeReferenceContext(this.context, this.state);
        this.enterRule(localContext, 634, GQLParser.RULE_sourceNodeTypeReference);
        let _la: number;
        try {
            this.state = 2971;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 280, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2962;
                this.match(GQLParser.LEFT_PAREN);
                this.state = 2963;
                this.sourceNodeTypeAlias();
                this.state = 2964;
                this.match(GQLParser.RIGHT_PAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2966;
                this.match(GQLParser.LEFT_PAREN);
                this.state = 2968;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1 || _la === 127 || _la === 292 || _la === 294 || _la === 360 || _la === 369) {
                    {
                    this.state = 2967;
                    this.nodeTypeFiller();
                    }
                }

                this.state = 2970;
                this.match(GQLParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public destinationNodeTypeReference(): DestinationNodeTypeReferenceContext {
        let localContext = new DestinationNodeTypeReferenceContext(this.context, this.state);
        this.enterRule(localContext, 636, GQLParser.RULE_destinationNodeTypeReference);
        let _la: number;
        try {
            this.state = 2982;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 282, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2973;
                this.match(GQLParser.LEFT_PAREN);
                this.state = 2974;
                this.destinationNodeTypeAlias();
                this.state = 2975;
                this.match(GQLParser.RIGHT_PAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2977;
                this.match(GQLParser.LEFT_PAREN);
                this.state = 2979;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1 || _la === 127 || _la === 292 || _la === 294 || _la === 360 || _la === 369) {
                    {
                    this.state = 2978;
                    this.nodeTypeFiller();
                    }
                }

                this.state = 2981;
                this.match(GQLParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public edgeKind(): EdgeKindContext {
        let localContext = new EdgeKindContext(this.context, this.state);
        this.enterRule(localContext, 638, GQLParser.RULE_edgeKind);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2984;
            _la = this.tokenStream.LA(1);
            if(!(_la === 283 || _la === 319)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public endpointPairPhrase(): EndpointPairPhraseContext {
        let localContext = new EndpointPairPhraseContext(this.context, this.state);
        this.enterRule(localContext, 640, GQLParser.RULE_endpointPairPhrase);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2986;
            this.match(GQLParser.CONNECTING);
            this.state = 2987;
            this.endpointPair();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public endpointPair(): EndpointPairContext {
        let localContext = new EndpointPairContext(this.context, this.state);
        this.enterRule(localContext, 642, GQLParser.RULE_endpointPair);
        try {
            this.state = 2991;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 283, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2989;
                this.endpointPairDirected();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2990;
                this.endpointPairUndirected();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public endpointPairDirected(): EndpointPairDirectedContext {
        let localContext = new EndpointPairDirectedContext(this.context, this.state);
        this.enterRule(localContext, 644, GQLParser.RULE_endpointPairDirected);
        try {
            this.state = 2995;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 284, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2993;
                this.endpointPairPointingRight();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2994;
                this.endpointPairPointingLeft();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public endpointPairPointingRight(): EndpointPairPointingRightContext {
        let localContext = new EndpointPairPointingRightContext(this.context, this.state);
        this.enterRule(localContext, 646, GQLParser.RULE_endpointPairPointingRight);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2997;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 2998;
            this.sourceNodeTypeAlias();
            this.state = 2999;
            this.connectorPointingRight();
            this.state = 3000;
            this.destinationNodeTypeAlias();
            this.state = 3001;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public endpointPairPointingLeft(): EndpointPairPointingLeftContext {
        let localContext = new EndpointPairPointingLeftContext(this.context, this.state);
        this.enterRule(localContext, 648, GQLParser.RULE_endpointPairPointingLeft);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3003;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 3004;
            this.destinationNodeTypeAlias();
            this.state = 3005;
            this.match(GQLParser.LEFT_ARROW);
            this.state = 3006;
            this.sourceNodeTypeAlias();
            this.state = 3007;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public endpointPairUndirected(): EndpointPairUndirectedContext {
        let localContext = new EndpointPairUndirectedContext(this.context, this.state);
        this.enterRule(localContext, 650, GQLParser.RULE_endpointPairUndirected);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3009;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 3010;
            this.sourceNodeTypeAlias();
            this.state = 3011;
            this.connectorUndirected();
            this.state = 3012;
            this.destinationNodeTypeAlias();
            this.state = 3013;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public connectorPointingRight(): ConnectorPointingRightContext {
        let localContext = new ConnectorPointingRightContext(this.context, this.state);
        this.enterRule(localContext, 652, GQLParser.RULE_connectorPointingRight);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3015;
            _la = this.tokenStream.LA(1);
            if(!(_la === 315 || _la === 347)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public connectorUndirected(): ConnectorUndirectedContext {
        let localContext = new ConnectorUndirectedContext(this.context, this.state);
        this.enterRule(localContext, 654, GQLParser.RULE_connectorUndirected);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3017;
            _la = this.tokenStream.LA(1);
            if(!(_la === 315 || _la === 384)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourceNodeTypeAlias(): SourceNodeTypeAliasContext {
        let localContext = new SourceNodeTypeAliasContext(this.context, this.state);
        this.enterRule(localContext, 656, GQLParser.RULE_sourceNodeTypeAlias);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3019;
            this.regularIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public destinationNodeTypeAlias(): DestinationNodeTypeAliasContext {
        let localContext = new DestinationNodeTypeAliasContext(this.context, this.state);
        this.enterRule(localContext, 658, GQLParser.RULE_destinationNodeTypeAlias);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3021;
            this.regularIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public labelSetPhrase(): LabelSetPhraseContext {
        let localContext = new LabelSetPhraseContext(this.context, this.state);
        this.enterRule(localContext, 660, GQLParser.RULE_labelSetPhrase);
        try {
            this.state = 3030;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.LABEL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3023;
                this.match(GQLParser.LABEL);
                this.state = 3024;
                this.labelName();
                }
                break;
            case GQLParser.LABELS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3025;
                this.match(GQLParser.LABELS);
                this.state = 3026;
                this.labelSetSpecification();
                }
                break;
            case GQLParser.IS:
            case GQLParser.COLON:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3027;
                this.isOrColon();
                this.state = 3028;
                this.labelSetSpecification();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public labelSetSpecification(): LabelSetSpecificationContext {
        let localContext = new LabelSetSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 662, GQLParser.RULE_labelSetSpecification);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3032;
            this.labelName();
            this.state = 3037;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 286, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3033;
                    this.match(GQLParser.AMPERSAND);
                    this.state = 3034;
                    this.labelName();
                    }
                    }
                }
                this.state = 3039;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 286, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyTypesSpecification(): PropertyTypesSpecificationContext {
        let localContext = new PropertyTypesSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 664, GQLParser.RULE_propertyTypesSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3040;
            this.match(GQLParser.LEFT_BRACE);
            this.state = 3042;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 4 || _la === 5 || ((((_la - 277)) & ~0x1F) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1F) === 0 && ((1 << (_la - 309)) & 131071) !== 0)) {
                {
                this.state = 3041;
                this.propertyTypeList();
                }
            }

            this.state = 3044;
            this.match(GQLParser.RIGHT_BRACE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyTypeList(): PropertyTypeListContext {
        let localContext = new PropertyTypeListContext(this.context, this.state);
        this.enterRule(localContext, 666, GQLParser.RULE_propertyTypeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3046;
            this.propertyType();
            this.state = 3051;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 361) {
                {
                {
                this.state = 3047;
                this.match(GQLParser.COMMA);
                this.state = 3048;
                this.propertyType();
                }
                }
                this.state = 3053;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyType(): PropertyTypeContext {
        let localContext = new PropertyTypeContext(this.context, this.state);
        this.enterRule(localContext, 668, GQLParser.RULE_propertyType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3054;
            this.propertyName();
            this.state = 3056;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 211 || _la === 332) {
                {
                this.state = 3055;
                this.typed();
                }
            }

            this.state = 3058;
            this.propertyValueType();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyValueType(): PropertyValueTypeContext {
        let localContext = new PropertyValueTypeContext(this.context, this.state);
        this.enterRule(localContext, 670, GQLParser.RULE_propertyValueType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3060;
            this.valueType(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bindingTableType(): BindingTableTypeContext {
        let localContext = new BindingTableTypeContext(this.context, this.state);
        this.enterRule(localContext, 672, GQLParser.RULE_bindingTableType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3063;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 278) {
                {
                this.state = 3062;
                this.match(GQLParser.BINDING);
                }
            }

            this.state = 3065;
            this.match(GQLParser.TABLE);
            this.state = 3066;
            this.fieldTypesSpecification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public valueType(): ValueTypeContext;
    public valueType(_p: number): ValueTypeContext;
    public valueType(_p?: number): ValueTypeContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ValueTypeContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 674;
        this.enterRecursionRule(localContext, 674, GQLParser.RULE_valueType, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3125;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 301, this.context) ) {
            case 1:
                {
                localContext = new PredefinedTypeLabelContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 3069;
                this.predefinedType();
                }
                break;
            case 2:
                {
                localContext = new PathValueTypeLabelContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3070;
                this.pathValueType();
                }
                break;
            case 3:
                {
                localContext = new ListValueTypeAlt1Context(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3071;
                this.listValueTypeName();
                this.state = 3072;
                this.match(GQLParser.LEFT_ANGLE_BRACKET);
                this.state = 3073;
                this.valueType(0);
                this.state = 3074;
                this.match(GQLParser.RIGHT_ANGLE_BRACKET);
                this.state = 3079;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 291, this.context) ) {
                case 1:
                    {
                    this.state = 3075;
                    this.match(GQLParser.LEFT_BRACKET);
                    this.state = 3076;
                    this.maxLength();
                    this.state = 3077;
                    this.match(GQLParser.RIGHT_BRACKET);
                    }
                    break;
                }
                this.state = 3082;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 292, this.context) ) {
                case 1:
                    {
                    this.state = 3081;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case 4:
                {
                localContext = new ListValueTypeAlt3Context(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3084;
                this.listValueTypeName();
                this.state = 3089;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 293, this.context) ) {
                case 1:
                    {
                    this.state = 3085;
                    this.match(GQLParser.LEFT_BRACKET);
                    this.state = 3086;
                    this.maxLength();
                    this.state = 3087;
                    this.match(GQLParser.RIGHT_BRACKET);
                    }
                    break;
                }
                this.state = 3092;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 294, this.context) ) {
                case 1:
                    {
                    this.state = 3091;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case 5:
                {
                localContext = new RecordTypeLabelContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3094;
                this.recordType();
                }
                break;
            case 6:
                {
                localContext = new OpenDynamicUnionTypeLabelContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3095;
                this.match(GQLParser.ANY);
                this.state = 3097;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 295, this.context) ) {
                case 1:
                    {
                    this.state = 3096;
                    this.match(GQLParser.VALUE);
                    }
                    break;
                }
                this.state = 3100;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 296, this.context) ) {
                case 1:
                    {
                    this.state = 3099;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case 7:
                {
                localContext = new DynamicPropertyValueTypeLabelContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3103;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 3102;
                    this.match(GQLParser.ANY);
                    }
                }

                this.state = 3105;
                this.match(GQLParser.PROPERTY);
                this.state = 3106;
                this.match(GQLParser.VALUE);
                this.state = 3108;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 298, this.context) ) {
                case 1:
                    {
                    this.state = 3107;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case 8:
                {
                localContext = new ClosedDynamicUnionTypeAtl1Context(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3110;
                this.match(GQLParser.ANY);
                this.state = 3112;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 3111;
                    this.match(GQLParser.VALUE);
                    }
                }

                this.state = 3114;
                this.match(GQLParser.LEFT_ANGLE_BRACKET);
                this.state = 3115;
                this.valueType(0);
                this.state = 3120;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 386) {
                    {
                    {
                    this.state = 3116;
                    this.match(GQLParser.VERTICAL_BAR);
                    this.state = 3117;
                    this.valueType(0);
                    }
                    }
                    this.state = 3122;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3123;
                this.match(GQLParser.RIGHT_ANGLE_BRACKET);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 3143;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 305, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 3141;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 304, this.context) ) {
                    case 1:
                        {
                        localContext = new ClosedDynamicUnionTypeAtl2Context(new ValueTypeContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, GQLParser.RULE_valueType);
                        this.state = 3127;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 3128;
                        this.match(GQLParser.VERTICAL_BAR);
                        this.state = 3129;
                        this.valueType(2);
                        }
                        break;
                    case 2:
                        {
                        localContext = new ListValueTypeAlt2Context(new ValueTypeContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, GQLParser.RULE_valueType);
                        this.state = 3130;
                        if (!(this.precpred(this.context, 7))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 7)");
                        }
                        this.state = 3131;
                        this.listValueTypeName();
                        this.state = 3136;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 302, this.context) ) {
                        case 1:
                            {
                            this.state = 3132;
                            this.match(GQLParser.LEFT_BRACKET);
                            this.state = 3133;
                            this.maxLength();
                            this.state = 3134;
                            this.match(GQLParser.RIGHT_BRACKET);
                            }
                            break;
                        }
                        this.state = 3139;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 303, this.context) ) {
                        case 1:
                            {
                            this.state = 3138;
                            this.notNull();
                            }
                            break;
                        }
                        }
                        break;
                    }
                    }
                }
                this.state = 3145;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 305, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public typed(): TypedContext {
        let localContext = new TypedContext(this.context, this.state);
        this.enterRule(localContext, 676, GQLParser.RULE_typed);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3146;
            _la = this.tokenStream.LA(1);
            if(!(_la === 211 || _la === 332)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public predefinedType(): PredefinedTypeContext {
        let localContext = new PredefinedTypeContext(this.context, this.state);
        this.enterRule(localContext, 678, GQLParser.RULE_predefinedType);
        try {
            this.state = 3155;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.BOOL:
            case GQLParser.BOOLEAN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3148;
                this.booleanType();
                }
                break;
            case GQLParser.CHAR:
            case GQLParser.STRING:
            case GQLParser.VARCHAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3149;
                this.characterStringType();
                }
                break;
            case GQLParser.BINARY:
            case GQLParser.BYTES:
            case GQLParser.VARBINARY:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3150;
                this.byteStringType();
                }
                break;
            case GQLParser.BIG:
            case GQLParser.BIGINT:
            case GQLParser.DEC:
            case GQLParser.DECIMAL:
            case GQLParser.DOUBLE:
            case GQLParser.FLOAT:
            case GQLParser.FLOAT16:
            case GQLParser.FLOAT32:
            case GQLParser.FLOAT64:
            case GQLParser.FLOAT128:
            case GQLParser.FLOAT256:
            case GQLParser.INT:
            case GQLParser.INTEGER:
            case GQLParser.INT8:
            case GQLParser.INTEGER8:
            case GQLParser.INT16:
            case GQLParser.INTEGER16:
            case GQLParser.INT32:
            case GQLParser.INTEGER32:
            case GQLParser.INT64:
            case GQLParser.INTEGER64:
            case GQLParser.INT128:
            case GQLParser.INTEGER128:
            case GQLParser.INT256:
            case GQLParser.INTEGER256:
            case GQLParser.REAL:
            case GQLParser.SIGNED:
            case GQLParser.SMALL:
            case GQLParser.SMALLINT:
            case GQLParser.UBIGINT:
            case GQLParser.UINT:
            case GQLParser.UINT8:
            case GQLParser.UINT16:
            case GQLParser.UINT32:
            case GQLParser.UINT64:
            case GQLParser.UINT128:
            case GQLParser.UINT256:
            case GQLParser.UNSIGNED:
            case GQLParser.USMALLINT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3151;
                this.numericType();
                }
                break;
            case GQLParser.DATE:
            case GQLParser.DURATION:
            case GQLParser.LOCAL:
            case GQLParser.TIME:
            case GQLParser.TIMESTAMP:
            case GQLParser.ZONED:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3152;
                this.temporalType();
                }
                break;
            case GQLParser.ANY:
            case GQLParser.BINDING:
            case GQLParser.DIRECTED:
            case GQLParser.EDGE:
            case GQLParser.GRAPH:
            case GQLParser.NODE:
            case GQLParser.PROPERTY:
            case GQLParser.RELATIONSHIP:
            case GQLParser.TABLE:
            case GQLParser.UNDIRECTED:
            case GQLParser.VERTEX:
            case GQLParser.LEFT_PAREN:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3153;
                this.referenceValueType();
                }
                break;
            case GQLParser.NOTHING:
            case GQLParser.NULL_KW:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3154;
                this.immaterialValueType();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public booleanType(): BooleanTypeContext {
        let localContext = new BooleanTypeContext(this.context, this.state);
        this.enterRule(localContext, 680, GQLParser.RULE_booleanType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3157;
            _la = this.tokenStream.LA(1);
            if(!(_la === 37 || _la === 38)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3159;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 307, this.context) ) {
            case 1:
                {
                this.state = 3158;
                this.notNull();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public characterStringType(): CharacterStringTypeContext {
        let localContext = new CharacterStringTypeContext(this.context, this.state);
        this.enterRule(localContext, 682, GQLParser.RULE_characterStringType);
        try {
            this.state = 3196;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3161;
                this.match(GQLParser.STRING);
                this.state = 3171;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 309, this.context) ) {
                case 1:
                    {
                    this.state = 3162;
                    this.match(GQLParser.LEFT_PAREN);
                    this.state = 3166;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 308, this.context) ) {
                    case 1:
                        {
                        this.state = 3163;
                        this.minLength();
                        this.state = 3164;
                        this.match(GQLParser.COMMA);
                        }
                        break;
                    }
                    this.state = 3168;
                    this.maxLength();
                    this.state = 3169;
                    this.match(GQLParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 3174;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 310, this.context) ) {
                case 1:
                    {
                    this.state = 3173;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.CHAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3176;
                this.match(GQLParser.CHAR);
                this.state = 3181;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 311, this.context) ) {
                case 1:
                    {
                    this.state = 3177;
                    this.match(GQLParser.LEFT_PAREN);
                    this.state = 3178;
                    this.fixedLength();
                    this.state = 3179;
                    this.match(GQLParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 3184;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 312, this.context) ) {
                case 1:
                    {
                    this.state = 3183;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.VARCHAR:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3186;
                this.match(GQLParser.VARCHAR);
                this.state = 3191;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 313, this.context) ) {
                case 1:
                    {
                    this.state = 3187;
                    this.match(GQLParser.LEFT_PAREN);
                    this.state = 3188;
                    this.maxLength();
                    this.state = 3189;
                    this.match(GQLParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 3194;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 314, this.context) ) {
                case 1:
                    {
                    this.state = 3193;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public byteStringType(): ByteStringTypeContext {
        let localContext = new ByteStringTypeContext(this.context, this.state);
        this.enterRule(localContext, 684, GQLParser.RULE_byteStringType);
        try {
            this.state = 3233;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.BYTES:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3198;
                this.match(GQLParser.BYTES);
                this.state = 3208;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 317, this.context) ) {
                case 1:
                    {
                    this.state = 3199;
                    this.match(GQLParser.LEFT_PAREN);
                    this.state = 3203;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 316, this.context) ) {
                    case 1:
                        {
                        this.state = 3200;
                        this.minLength();
                        this.state = 3201;
                        this.match(GQLParser.COMMA);
                        }
                        break;
                    }
                    this.state = 3205;
                    this.maxLength();
                    this.state = 3206;
                    this.match(GQLParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 3211;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 318, this.context) ) {
                case 1:
                    {
                    this.state = 3210;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.BINARY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3213;
                this.match(GQLParser.BINARY);
                this.state = 3218;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 319, this.context) ) {
                case 1:
                    {
                    this.state = 3214;
                    this.match(GQLParser.LEFT_PAREN);
                    this.state = 3215;
                    this.fixedLength();
                    this.state = 3216;
                    this.match(GQLParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 3221;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 320, this.context) ) {
                case 1:
                    {
                    this.state = 3220;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.VARBINARY:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3223;
                this.match(GQLParser.VARBINARY);
                this.state = 3228;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 321, this.context) ) {
                case 1:
                    {
                    this.state = 3224;
                    this.match(GQLParser.LEFT_PAREN);
                    this.state = 3225;
                    this.maxLength();
                    this.state = 3226;
                    this.match(GQLParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 3231;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 322, this.context) ) {
                case 1:
                    {
                    this.state = 3230;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public minLength(): MinLengthContext {
        let localContext = new MinLengthContext(this.context, this.state);
        this.enterRule(localContext, 686, GQLParser.RULE_minLength);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3235;
            this.unsignedInteger();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public maxLength(): MaxLengthContext {
        let localContext = new MaxLengthContext(this.context, this.state);
        this.enterRule(localContext, 688, GQLParser.RULE_maxLength);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3237;
            this.unsignedInteger();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fixedLength(): FixedLengthContext {
        let localContext = new FixedLengthContext(this.context, this.state);
        this.enterRule(localContext, 690, GQLParser.RULE_fixedLength);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3239;
            this.unsignedInteger();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numericType(): NumericTypeContext {
        let localContext = new NumericTypeContext(this.context, this.state);
        this.enterRule(localContext, 692, GQLParser.RULE_numericType);
        try {
            this.state = 3243;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.BIG:
            case GQLParser.BIGINT:
            case GQLParser.DEC:
            case GQLParser.DECIMAL:
            case GQLParser.INT:
            case GQLParser.INTEGER:
            case GQLParser.INT8:
            case GQLParser.INTEGER8:
            case GQLParser.INT16:
            case GQLParser.INTEGER16:
            case GQLParser.INT32:
            case GQLParser.INTEGER32:
            case GQLParser.INT64:
            case GQLParser.INTEGER64:
            case GQLParser.INT128:
            case GQLParser.INTEGER128:
            case GQLParser.INT256:
            case GQLParser.INTEGER256:
            case GQLParser.SIGNED:
            case GQLParser.SMALL:
            case GQLParser.SMALLINT:
            case GQLParser.UBIGINT:
            case GQLParser.UINT:
            case GQLParser.UINT8:
            case GQLParser.UINT16:
            case GQLParser.UINT32:
            case GQLParser.UINT64:
            case GQLParser.UINT128:
            case GQLParser.UINT256:
            case GQLParser.UNSIGNED:
            case GQLParser.USMALLINT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3241;
                this.exactNumericType();
                }
                break;
            case GQLParser.DOUBLE:
            case GQLParser.FLOAT:
            case GQLParser.FLOAT16:
            case GQLParser.FLOAT32:
            case GQLParser.FLOAT64:
            case GQLParser.FLOAT128:
            case GQLParser.FLOAT256:
            case GQLParser.REAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3242;
                this.approximateNumericType();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exactNumericType(): ExactNumericTypeContext {
        let localContext = new ExactNumericTypeContext(this.context, this.state);
        this.enterRule(localContext, 694, GQLParser.RULE_exactNumericType);
        try {
            this.state = 3247;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.BIG:
            case GQLParser.BIGINT:
            case GQLParser.INT:
            case GQLParser.INTEGER:
            case GQLParser.INT8:
            case GQLParser.INTEGER8:
            case GQLParser.INT16:
            case GQLParser.INTEGER16:
            case GQLParser.INT32:
            case GQLParser.INTEGER32:
            case GQLParser.INT64:
            case GQLParser.INTEGER64:
            case GQLParser.INT128:
            case GQLParser.INTEGER128:
            case GQLParser.INT256:
            case GQLParser.INTEGER256:
            case GQLParser.SIGNED:
            case GQLParser.SMALL:
            case GQLParser.SMALLINT:
            case GQLParser.UBIGINT:
            case GQLParser.UINT:
            case GQLParser.UINT8:
            case GQLParser.UINT16:
            case GQLParser.UINT32:
            case GQLParser.UINT64:
            case GQLParser.UINT128:
            case GQLParser.UINT256:
            case GQLParser.UNSIGNED:
            case GQLParser.USMALLINT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3245;
                this.binaryExactNumericType();
                }
                break;
            case GQLParser.DEC:
            case GQLParser.DECIMAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3246;
                this.decimalExactNumericType();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public binaryExactNumericType(): BinaryExactNumericTypeContext {
        let localContext = new BinaryExactNumericTypeContext(this.context, this.state);
        this.enterRule(localContext, 696, GQLParser.RULE_binaryExactNumericType);
        try {
            this.state = 3251;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.BIG:
            case GQLParser.BIGINT:
            case GQLParser.INT:
            case GQLParser.INTEGER:
            case GQLParser.INT8:
            case GQLParser.INTEGER8:
            case GQLParser.INT16:
            case GQLParser.INTEGER16:
            case GQLParser.INT32:
            case GQLParser.INTEGER32:
            case GQLParser.INT64:
            case GQLParser.INTEGER64:
            case GQLParser.INT128:
            case GQLParser.INTEGER128:
            case GQLParser.INT256:
            case GQLParser.INTEGER256:
            case GQLParser.SIGNED:
            case GQLParser.SMALL:
            case GQLParser.SMALLINT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3249;
                this.signedBinaryExactNumericType();
                }
                break;
            case GQLParser.UBIGINT:
            case GQLParser.UINT:
            case GQLParser.UINT8:
            case GQLParser.UINT16:
            case GQLParser.UINT32:
            case GQLParser.UINT64:
            case GQLParser.UINT128:
            case GQLParser.UINT256:
            case GQLParser.UNSIGNED:
            case GQLParser.USMALLINT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3250;
                this.unsignedBinaryExactNumericType();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public signedBinaryExactNumericType(): SignedBinaryExactNumericTypeContext {
        let localContext = new SignedBinaryExactNumericTypeContext(this.context, this.state);
        this.enterRule(localContext, 698, GQLParser.RULE_signedBinaryExactNumericType);
        let _la: number;
        try {
            this.state = 3299;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.INT8:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3253;
                this.match(GQLParser.INT8);
                this.state = 3255;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 327, this.context) ) {
                case 1:
                    {
                    this.state = 3254;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.INT16:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3257;
                this.match(GQLParser.INT16);
                this.state = 3259;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 328, this.context) ) {
                case 1:
                    {
                    this.state = 3258;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.INT32:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3261;
                this.match(GQLParser.INT32);
                this.state = 3263;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 329, this.context) ) {
                case 1:
                    {
                    this.state = 3262;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.INT64:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3265;
                this.match(GQLParser.INT64);
                this.state = 3267;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 330, this.context) ) {
                case 1:
                    {
                    this.state = 3266;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.INT128:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3269;
                this.match(GQLParser.INT128);
                this.state = 3271;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 331, this.context) ) {
                case 1:
                    {
                    this.state = 3270;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.INT256:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3273;
                this.match(GQLParser.INT256);
                this.state = 3275;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 332, this.context) ) {
                case 1:
                    {
                    this.state = 3274;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.SMALLINT:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3277;
                this.match(GQLParser.SMALLINT);
                this.state = 3279;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 333, this.context) ) {
                case 1:
                    {
                    this.state = 3278;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.INT:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3281;
                this.match(GQLParser.INT);
                this.state = 3286;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 334, this.context) ) {
                case 1:
                    {
                    this.state = 3282;
                    this.match(GQLParser.LEFT_PAREN);
                    this.state = 3283;
                    this.precision();
                    this.state = 3284;
                    this.match(GQLParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 3289;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 335, this.context) ) {
                case 1:
                    {
                    this.state = 3288;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.BIGINT:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3291;
                this.match(GQLParser.BIGINT);
                this.state = 3293;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 336, this.context) ) {
                case 1:
                    {
                    this.state = 3292;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.BIG:
            case GQLParser.INTEGER:
            case GQLParser.INTEGER8:
            case GQLParser.INTEGER16:
            case GQLParser.INTEGER32:
            case GQLParser.INTEGER64:
            case GQLParser.INTEGER128:
            case GQLParser.INTEGER256:
            case GQLParser.SIGNED:
            case GQLParser.SMALL:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3296;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 191) {
                    {
                    this.state = 3295;
                    this.match(GQLParser.SIGNED);
                    }
                }

                this.state = 3298;
                this.verboseBinaryExactNumericType();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsignedBinaryExactNumericType(): UnsignedBinaryExactNumericTypeContext {
        let localContext = new UnsignedBinaryExactNumericTypeContext(this.context, this.state);
        this.enterRule(localContext, 700, GQLParser.RULE_unsignedBinaryExactNumericType);
        try {
            this.state = 3345;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.UINT8:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3301;
                this.match(GQLParser.UINT8);
                this.state = 3303;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 339, this.context) ) {
                case 1:
                    {
                    this.state = 3302;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.UINT16:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3305;
                this.match(GQLParser.UINT16);
                this.state = 3307;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 340, this.context) ) {
                case 1:
                    {
                    this.state = 3306;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.UINT32:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3309;
                this.match(GQLParser.UINT32);
                this.state = 3311;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 341, this.context) ) {
                case 1:
                    {
                    this.state = 3310;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.UINT64:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3313;
                this.match(GQLParser.UINT64);
                this.state = 3315;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 342, this.context) ) {
                case 1:
                    {
                    this.state = 3314;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.UINT128:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3317;
                this.match(GQLParser.UINT128);
                this.state = 3319;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 343, this.context) ) {
                case 1:
                    {
                    this.state = 3318;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.UINT256:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3321;
                this.match(GQLParser.UINT256);
                this.state = 3323;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 344, this.context) ) {
                case 1:
                    {
                    this.state = 3322;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.USMALLINT:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3325;
                this.match(GQLParser.USMALLINT);
                this.state = 3327;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 345, this.context) ) {
                case 1:
                    {
                    this.state = 3326;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.UINT:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3329;
                this.match(GQLParser.UINT);
                this.state = 3334;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 346, this.context) ) {
                case 1:
                    {
                    this.state = 3330;
                    this.match(GQLParser.LEFT_PAREN);
                    this.state = 3331;
                    this.precision();
                    this.state = 3332;
                    this.match(GQLParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 3337;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 347, this.context) ) {
                case 1:
                    {
                    this.state = 3336;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.UBIGINT:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3339;
                this.match(GQLParser.UBIGINT);
                this.state = 3341;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 348, this.context) ) {
                case 1:
                    {
                    this.state = 3340;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.UNSIGNED:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3343;
                this.match(GQLParser.UNSIGNED);
                this.state = 3344;
                this.verboseBinaryExactNumericType();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public verboseBinaryExactNumericType(): VerboseBinaryExactNumericTypeContext {
        let localContext = new VerboseBinaryExactNumericTypeContext(this.context, this.state);
        this.enterRule(localContext, 702, GQLParser.RULE_verboseBinaryExactNumericType);
        try {
            this.state = 3391;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.INTEGER8:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3347;
                this.match(GQLParser.INTEGER8);
                this.state = 3349;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 350, this.context) ) {
                case 1:
                    {
                    this.state = 3348;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.INTEGER16:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3351;
                this.match(GQLParser.INTEGER16);
                this.state = 3353;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 351, this.context) ) {
                case 1:
                    {
                    this.state = 3352;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.INTEGER32:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3355;
                this.match(GQLParser.INTEGER32);
                this.state = 3357;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 352, this.context) ) {
                case 1:
                    {
                    this.state = 3356;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.INTEGER64:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3359;
                this.match(GQLParser.INTEGER64);
                this.state = 3361;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 353, this.context) ) {
                case 1:
                    {
                    this.state = 3360;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.INTEGER128:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3363;
                this.match(GQLParser.INTEGER128);
                this.state = 3365;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 354, this.context) ) {
                case 1:
                    {
                    this.state = 3364;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.INTEGER256:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3367;
                this.match(GQLParser.INTEGER256);
                this.state = 3369;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 355, this.context) ) {
                case 1:
                    {
                    this.state = 3368;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.SMALL:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3371;
                this.match(GQLParser.SMALL);
                this.state = 3372;
                this.match(GQLParser.INTEGER);
                this.state = 3374;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 356, this.context) ) {
                case 1:
                    {
                    this.state = 3373;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.INTEGER:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3376;
                this.match(GQLParser.INTEGER);
                this.state = 3381;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 357, this.context) ) {
                case 1:
                    {
                    this.state = 3377;
                    this.match(GQLParser.LEFT_PAREN);
                    this.state = 3378;
                    this.precision();
                    this.state = 3379;
                    this.match(GQLParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 3384;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 358, this.context) ) {
                case 1:
                    {
                    this.state = 3383;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.BIG:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3386;
                this.match(GQLParser.BIG);
                this.state = 3387;
                this.match(GQLParser.INTEGER);
                this.state = 3389;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 359, this.context) ) {
                case 1:
                    {
                    this.state = 3388;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decimalExactNumericType(): DecimalExactNumericTypeContext {
        let localContext = new DecimalExactNumericTypeContext(this.context, this.state);
        this.enterRule(localContext, 704, GQLParser.RULE_decimalExactNumericType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3393;
            _la = this.tokenStream.LA(1);
            if(!(_la === 73 || _la === 74)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3404;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 363, this.context) ) {
            case 1:
                {
                this.state = 3394;
                this.match(GQLParser.LEFT_PAREN);
                this.state = 3395;
                this.precision();
                this.state = 3398;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 361) {
                    {
                    this.state = 3396;
                    this.match(GQLParser.COMMA);
                    this.state = 3397;
                    this.scale();
                    }
                }

                this.state = 3400;
                this.match(GQLParser.RIGHT_PAREN);
                this.state = 3402;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 362, this.context) ) {
                case 1:
                    {
                    this.state = 3401;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precision(): PrecisionContext {
        let localContext = new PrecisionContext(this.context, this.state);
        this.enterRule(localContext, 706, GQLParser.RULE_precision);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3406;
            this.unsignedDecimalInteger();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public scale(): ScaleContext {
        let localContext = new ScaleContext(this.context, this.state);
        this.enterRule(localContext, 708, GQLParser.RULE_scale);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3408;
            this.unsignedDecimalInteger();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public approximateNumericType(): ApproximateNumericTypeContext {
        let localContext = new ApproximateNumericTypeContext(this.context, this.state);
        this.enterRule(localContext, 710, GQLParser.RULE_approximateNumericType);
        let _la: number;
        try {
            this.state = 3455;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.FLOAT16:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3410;
                this.match(GQLParser.FLOAT16);
                this.state = 3412;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 364, this.context) ) {
                case 1:
                    {
                    this.state = 3411;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.FLOAT32:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3414;
                this.match(GQLParser.FLOAT32);
                this.state = 3416;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 365, this.context) ) {
                case 1:
                    {
                    this.state = 3415;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.FLOAT64:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3418;
                this.match(GQLParser.FLOAT64);
                this.state = 3420;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 366, this.context) ) {
                case 1:
                    {
                    this.state = 3419;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.FLOAT128:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3422;
                this.match(GQLParser.FLOAT128);
                this.state = 3424;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 367, this.context) ) {
                case 1:
                    {
                    this.state = 3423;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.FLOAT256:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3426;
                this.match(GQLParser.FLOAT256);
                this.state = 3428;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 368, this.context) ) {
                case 1:
                    {
                    this.state = 3427;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.FLOAT:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3430;
                this.match(GQLParser.FLOAT);
                this.state = 3439;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 370, this.context) ) {
                case 1:
                    {
                    this.state = 3431;
                    this.match(GQLParser.LEFT_PAREN);
                    this.state = 3432;
                    this.precision();
                    this.state = 3435;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 361) {
                        {
                        this.state = 3433;
                        this.match(GQLParser.COMMA);
                        this.state = 3434;
                        this.scale();
                        }
                    }

                    this.state = 3437;
                    this.match(GQLParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 3442;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 371, this.context) ) {
                case 1:
                    {
                    this.state = 3441;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.REAL:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3444;
                this.match(GQLParser.REAL);
                this.state = 3446;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 372, this.context) ) {
                case 1:
                    {
                    this.state = 3445;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.DOUBLE:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3448;
                this.match(GQLParser.DOUBLE);
                this.state = 3450;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 373, this.context) ) {
                case 1:
                    {
                    this.state = 3449;
                    this.match(GQLParser.PRECISION);
                    }
                    break;
                }
                this.state = 3453;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 374, this.context) ) {
                case 1:
                    {
                    this.state = 3452;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public temporalType(): TemporalTypeContext {
        let localContext = new TemporalTypeContext(this.context, this.state);
        this.enterRule(localContext, 712, GQLParser.RULE_temporalType);
        try {
            this.state = 3459;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.DATE:
            case GQLParser.LOCAL:
            case GQLParser.TIME:
            case GQLParser.TIMESTAMP:
            case GQLParser.ZONED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3457;
                this.temporalInstantType();
                }
                break;
            case GQLParser.DURATION:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3458;
                this.temporalDurationType();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public temporalInstantType(): TemporalInstantTypeContext {
        let localContext = new TemporalInstantTypeContext(this.context, this.state);
        this.enterRule(localContext, 714, GQLParser.RULE_temporalInstantType);
        try {
            this.state = 3466;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 377, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3461;
                this.datetimeType();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3462;
                this.localdatetimeType();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3463;
                this.dateType();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3464;
                this.timeType();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3465;
                this.localtimeType();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public datetimeType(): DatetimeTypeContext {
        let localContext = new DatetimeTypeContext(this.context, this.state);
        this.enterRule(localContext, 716, GQLParser.RULE_datetimeType);
        try {
            this.state = 3480;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.ZONED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3468;
                this.match(GQLParser.ZONED);
                this.state = 3469;
                this.match(GQLParser.DATETIME);
                this.state = 3471;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 378, this.context) ) {
                case 1:
                    {
                    this.state = 3470;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.TIMESTAMP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3473;
                this.match(GQLParser.TIMESTAMP);
                this.state = 3474;
                this.match(GQLParser.WITH);
                this.state = 3475;
                this.match(GQLParser.TIME);
                this.state = 3476;
                this.match(GQLParser.ZONE);
                this.state = 3478;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 379, this.context) ) {
                case 1:
                    {
                    this.state = 3477;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public localdatetimeType(): LocaldatetimeTypeContext {
        let localContext = new LocaldatetimeTypeContext(this.context, this.state);
        this.enterRule(localContext, 718, GQLParser.RULE_localdatetimeType);
        try {
            this.state = 3496;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.LOCAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3482;
                this.match(GQLParser.LOCAL);
                this.state = 3483;
                this.match(GQLParser.DATETIME);
                this.state = 3485;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 381, this.context) ) {
                case 1:
                    {
                    this.state = 3484;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.TIMESTAMP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3487;
                this.match(GQLParser.TIMESTAMP);
                this.state = 3491;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 382, this.context) ) {
                case 1:
                    {
                    this.state = 3488;
                    this.match(GQLParser.WITHOUT);
                    this.state = 3489;
                    this.match(GQLParser.TIME);
                    this.state = 3490;
                    this.match(GQLParser.ZONE);
                    }
                    break;
                }
                this.state = 3494;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 383, this.context) ) {
                case 1:
                    {
                    this.state = 3493;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dateType(): DateTypeContext {
        let localContext = new DateTypeContext(this.context, this.state);
        this.enterRule(localContext, 720, GQLParser.RULE_dateType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3498;
            this.match(GQLParser.DATE);
            this.state = 3500;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 385, this.context) ) {
            case 1:
                {
                this.state = 3499;
                this.notNull();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timeType(): TimeTypeContext {
        let localContext = new TimeTypeContext(this.context, this.state);
        this.enterRule(localContext, 722, GQLParser.RULE_timeType);
        try {
            this.state = 3514;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.ZONED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3502;
                this.match(GQLParser.ZONED);
                this.state = 3503;
                this.match(GQLParser.TIME);
                this.state = 3505;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 386, this.context) ) {
                case 1:
                    {
                    this.state = 3504;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.TIME:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3507;
                this.match(GQLParser.TIME);
                this.state = 3508;
                this.match(GQLParser.WITH);
                this.state = 3509;
                this.match(GQLParser.TIME);
                this.state = 3510;
                this.match(GQLParser.ZONE);
                this.state = 3512;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 387, this.context) ) {
                case 1:
                    {
                    this.state = 3511;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public localtimeType(): LocaltimeTypeContext {
        let localContext = new LocaltimeTypeContext(this.context, this.state);
        this.enterRule(localContext, 724, GQLParser.RULE_localtimeType);
        try {
            this.state = 3528;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.LOCAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3516;
                this.match(GQLParser.LOCAL);
                this.state = 3517;
                this.match(GQLParser.TIME);
                this.state = 3519;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 389, this.context) ) {
                case 1:
                    {
                    this.state = 3518;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case GQLParser.TIME:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3521;
                this.match(GQLParser.TIME);
                this.state = 3522;
                this.match(GQLParser.WITHOUT);
                this.state = 3523;
                this.match(GQLParser.TIME);
                this.state = 3524;
                this.match(GQLParser.ZONE);
                this.state = 3526;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 390, this.context) ) {
                case 1:
                    {
                    this.state = 3525;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public temporalDurationType(): TemporalDurationTypeContext {
        let localContext = new TemporalDurationTypeContext(this.context, this.state);
        this.enterRule(localContext, 726, GQLParser.RULE_temporalDurationType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3530;
            this.match(GQLParser.DURATION);
            this.state = 3531;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 3532;
            this.temporalDurationQualifier();
            this.state = 3533;
            this.match(GQLParser.RIGHT_PAREN);
            this.state = 3535;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 392, this.context) ) {
            case 1:
                {
                this.state = 3534;
                this.notNull();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public temporalDurationQualifier(): TemporalDurationQualifierContext {
        let localContext = new TemporalDurationQualifierContext(this.context, this.state);
        this.enterRule(localContext, 728, GQLParser.RULE_temporalDurationQualifier);
        try {
            this.state = 3543;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.YEAR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3537;
                this.match(GQLParser.YEAR);
                this.state = 3538;
                this.match(GQLParser.TO);
                this.state = 3539;
                this.match(GQLParser.MONTH);
                }
                break;
            case GQLParser.DAY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3540;
                this.match(GQLParser.DAY);
                this.state = 3541;
                this.match(GQLParser.TO);
                this.state = 3542;
                this.match(GQLParser.SECOND);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public referenceValueType(): ReferenceValueTypeContext {
        let localContext = new ReferenceValueTypeContext(this.context, this.state);
        this.enterRule(localContext, 730, GQLParser.RULE_referenceValueType);
        try {
            this.state = 3549;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 394, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3545;
                this.graphReferenceValueType();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3546;
                this.bindingTableReferenceValueType();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3547;
                this.nodeReferenceValueType();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3548;
                this.edgeReferenceValueType();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public immaterialValueType(): ImmaterialValueTypeContext {
        let localContext = new ImmaterialValueTypeContext(this.context, this.state);
        this.enterRule(localContext, 732, GQLParser.RULE_immaterialValueType);
        try {
            this.state = 3553;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 395, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3551;
                this.nullType();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3552;
                this.emptyType();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nullType(): NullTypeContext {
        let localContext = new NullTypeContext(this.context, this.state);
        this.enterRule(localContext, 734, GQLParser.RULE_nullType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3555;
            this.match(GQLParser.NULL_KW);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public emptyType(): EmptyTypeContext {
        let localContext = new EmptyTypeContext(this.context, this.state);
        this.enterRule(localContext, 736, GQLParser.RULE_emptyType);
        try {
            this.state = 3560;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.NULL_KW:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3557;
                this.match(GQLParser.NULL_KW);
                this.state = 3558;
                this.notNull();
                }
                break;
            case GQLParser.NOTHING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3559;
                this.match(GQLParser.NOTHING);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public graphReferenceValueType(): GraphReferenceValueTypeContext {
        let localContext = new GraphReferenceValueTypeContext(this.context, this.state);
        this.enterRule(localContext, 738, GQLParser.RULE_graphReferenceValueType);
        try {
            this.state = 3564;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.ANY:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3562;
                this.openGraphReferenceValueType();
                }
                break;
            case GQLParser.GRAPH:
            case GQLParser.PROPERTY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3563;
                this.closedGraphReferenceValueType();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public closedGraphReferenceValueType(): ClosedGraphReferenceValueTypeContext {
        let localContext = new ClosedGraphReferenceValueTypeContext(this.context, this.state);
        this.enterRule(localContext, 740, GQLParser.RULE_closedGraphReferenceValueType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3567;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 305) {
                {
                this.state = 3566;
                this.match(GQLParser.PROPERTY);
                }
            }

            this.state = 3569;
            this.match(GQLParser.GRAPH);
            this.state = 3570;
            this.nestedGraphTypeSpecification();
            this.state = 3572;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 399, this.context) ) {
            case 1:
                {
                this.state = 3571;
                this.notNull();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public openGraphReferenceValueType(): OpenGraphReferenceValueTypeContext {
        let localContext = new OpenGraphReferenceValueTypeContext(this.context, this.state);
        this.enterRule(localContext, 742, GQLParser.RULE_openGraphReferenceValueType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3574;
            this.match(GQLParser.ANY);
            this.state = 3576;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 305) {
                {
                this.state = 3575;
                this.match(GQLParser.PROPERTY);
                }
            }

            this.state = 3578;
            this.match(GQLParser.GRAPH);
            this.state = 3580;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 401, this.context) ) {
            case 1:
                {
                this.state = 3579;
                this.notNull();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bindingTableReferenceValueType(): BindingTableReferenceValueTypeContext {
        let localContext = new BindingTableReferenceValueTypeContext(this.context, this.state);
        this.enterRule(localContext, 744, GQLParser.RULE_bindingTableReferenceValueType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3582;
            this.bindingTableType();
            this.state = 3584;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 402, this.context) ) {
            case 1:
                {
                this.state = 3583;
                this.notNull();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nodeReferenceValueType(): NodeReferenceValueTypeContext {
        let localContext = new NodeReferenceValueTypeContext(this.context, this.state);
        this.enterRule(localContext, 746, GQLParser.RULE_nodeReferenceValueType);
        try {
            this.state = 3588;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 403, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3586;
                this.openNodeReferenceValueType();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3587;
                this.closedNodeReferenceValueType();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public closedNodeReferenceValueType(): ClosedNodeReferenceValueTypeContext {
        let localContext = new ClosedNodeReferenceValueTypeContext(this.context, this.state);
        this.enterRule(localContext, 748, GQLParser.RULE_closedNodeReferenceValueType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3590;
            this.nodeTypeSpecification();
            this.state = 3592;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 404, this.context) ) {
            case 1:
                {
                this.state = 3591;
                this.notNull();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public openNodeReferenceValueType(): OpenNodeReferenceValueTypeContext {
        let localContext = new OpenNodeReferenceValueTypeContext(this.context, this.state);
        this.enterRule(localContext, 750, GQLParser.RULE_openNodeReferenceValueType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3595;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 3594;
                this.match(GQLParser.ANY);
                }
            }

            this.state = 3597;
            this.nodeSynonym();
            this.state = 3599;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 406, this.context) ) {
            case 1:
                {
                this.state = 3598;
                this.notNull();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public edgeReferenceValueType(): EdgeReferenceValueTypeContext {
        let localContext = new EdgeReferenceValueTypeContext(this.context, this.state);
        this.enterRule(localContext, 752, GQLParser.RULE_edgeReferenceValueType);
        try {
            this.state = 3603;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 407, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3601;
                this.openEdgeReferenceValueType();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3602;
                this.closedEdgeReferenceValueType();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public closedEdgeReferenceValueType(): ClosedEdgeReferenceValueTypeContext {
        let localContext = new ClosedEdgeReferenceValueTypeContext(this.context, this.state);
        this.enterRule(localContext, 754, GQLParser.RULE_closedEdgeReferenceValueType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3605;
            this.edgeTypeSpecification();
            this.state = 3607;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 408, this.context) ) {
            case 1:
                {
                this.state = 3606;
                this.notNull();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public openEdgeReferenceValueType(): OpenEdgeReferenceValueTypeContext {
        let localContext = new OpenEdgeReferenceValueTypeContext(this.context, this.state);
        this.enterRule(localContext, 756, GQLParser.RULE_openEdgeReferenceValueType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3610;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 25) {
                {
                this.state = 3609;
                this.match(GQLParser.ANY);
                }
            }

            this.state = 3612;
            this.edgeSynonym();
            this.state = 3614;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 410, this.context) ) {
            case 1:
                {
                this.state = 3613;
                this.notNull();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathValueType(): PathValueTypeContext {
        let localContext = new PathValueTypeContext(this.context, this.state);
        this.enterRule(localContext, 758, GQLParser.RULE_pathValueType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3616;
            this.match(GQLParser.PATH);
            this.state = 3618;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 411, this.context) ) {
            case 1:
                {
                this.state = 3617;
                this.notNull();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listValueTypeName(): ListValueTypeNameContext {
        let localContext = new ListValueTypeNameContext(this.context, this.state);
        this.enterRule(localContext, 760, GQLParser.RULE_listValueTypeName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3621;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 102) {
                {
                this.state = 3620;
                this.match(GQLParser.GROUP);
                }
            }

            this.state = 3623;
            this.listValueTypeNameSynonym();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listValueTypeNameSynonym(): ListValueTypeNameSynonymContext {
        let localContext = new ListValueTypeNameSynonymContext(this.context, this.state);
        this.enterRule(localContext, 762, GQLParser.RULE_listValueTypeNameSynonym);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3625;
            _la = this.tokenStream.LA(1);
            if(!(_la === 26 || _la === 133)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public recordType(): RecordTypeContext {
        let localContext = new RecordTypeContext(this.context, this.state);
        this.enterRule(localContext, 764, GQLParser.RULE_recordType);
        let _la: number;
        try {
            this.state = 3641;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 417, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3628;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 3627;
                    this.match(GQLParser.ANY);
                    }
                }

                this.state = 3630;
                this.match(GQLParser.RECORD);
                this.state = 3632;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 414, this.context) ) {
                case 1:
                    {
                    this.state = 3631;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3635;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 176) {
                    {
                    this.state = 3634;
                    this.match(GQLParser.RECORD);
                    }
                }

                this.state = 3637;
                this.fieldTypesSpecification();
                this.state = 3639;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 416, this.context) ) {
                case 1:
                    {
                    this.state = 3638;
                    this.notNull();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fieldTypesSpecification(): FieldTypesSpecificationContext {
        let localContext = new FieldTypesSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 766, GQLParser.RULE_fieldTypesSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3643;
            this.match(GQLParser.LEFT_BRACE);
            this.state = 3645;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 4 || _la === 5 || ((((_la - 277)) & ~0x1F) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1F) === 0 && ((1 << (_la - 309)) & 131071) !== 0)) {
                {
                this.state = 3644;
                this.fieldTypeList();
                }
            }

            this.state = 3647;
            this.match(GQLParser.RIGHT_BRACE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fieldTypeList(): FieldTypeListContext {
        let localContext = new FieldTypeListContext(this.context, this.state);
        this.enterRule(localContext, 768, GQLParser.RULE_fieldTypeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3649;
            this.fieldType();
            this.state = 3654;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 361) {
                {
                {
                this.state = 3650;
                this.match(GQLParser.COMMA);
                this.state = 3651;
                this.fieldType();
                }
                }
                this.state = 3656;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notNull(): NotNullContext {
        let localContext = new NotNullContext(this.context, this.state);
        this.enterRule(localContext, 770, GQLParser.RULE_notNull);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3657;
            this.match(GQLParser.NOT);
            this.state = 3658;
            this.match(GQLParser.NULL_KW);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fieldType(): FieldTypeContext {
        let localContext = new FieldTypeContext(this.context, this.state);
        this.enterRule(localContext, 772, GQLParser.RULE_fieldType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3660;
            this.fieldName();
            this.state = 3662;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 211 || _la === 332) {
                {
                this.state = 3661;
                this.typed();
                }
            }

            this.state = 3664;
            this.valueType(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public searchCondition(): SearchConditionContext {
        let localContext = new SearchConditionContext(this.context, this.state);
        this.enterRule(localContext, 774, GQLParser.RULE_searchCondition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3666;
            this.booleanValueExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public predicate(): PredicateContext {
        let localContext = new PredicateContext(this.context, this.state);
        this.enterRule(localContext, 776, GQLParser.RULE_predicate);
        try {
            this.state = 3677;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 421, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3668;
                this.existsPredicate();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3669;
                this.nullPredicate();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3670;
                this.valueTypePredicate();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3671;
                this.directedPredicate();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3672;
                this.labeledPredicate();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3673;
                this.sourceDestinationPredicate();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3674;
                this.all_differentPredicate();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3675;
                this.samePredicate();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3676;
                this.property_existsPredicate();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public compOp(): CompOpContext {
        let localContext = new CompOpContext(this.context, this.state);
        this.enterRule(localContext, 778, GQLParser.RULE_compOp);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3679;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 335)) & ~0x1F) === 0 && ((1 << (_la - 335)) & 1073744129) !== 0) || _la === 367 || _la === 372)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public existsPredicate(): ExistsPredicateContext {
        let localContext = new ExistsPredicateContext(this.context, this.state);
        this.enterRule(localContext, 780, GQLParser.RULE_existsPredicate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3681;
            this.match(GQLParser.EXISTS);
            this.state = 3699;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 422, this.context) ) {
            case 1:
                {
                this.state = 3682;
                this.match(GQLParser.LEFT_BRACE);
                this.state = 3683;
                this.graphPattern();
                this.state = 3684;
                this.match(GQLParser.RIGHT_BRACE);
                }
                break;
            case 2:
                {
                this.state = 3686;
                this.match(GQLParser.LEFT_PAREN);
                this.state = 3687;
                this.graphPattern();
                this.state = 3688;
                this.match(GQLParser.RIGHT_PAREN);
                }
                break;
            case 3:
                {
                this.state = 3690;
                this.match(GQLParser.LEFT_BRACE);
                this.state = 3691;
                this.matchStatementBlock();
                this.state = 3692;
                this.match(GQLParser.RIGHT_BRACE);
                }
                break;
            case 4:
                {
                this.state = 3694;
                this.match(GQLParser.LEFT_PAREN);
                this.state = 3695;
                this.matchStatementBlock();
                this.state = 3696;
                this.match(GQLParser.RIGHT_PAREN);
                }
                break;
            case 5:
                {
                this.state = 3698;
                this.nestedQuerySpecification();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nullPredicate(): NullPredicateContext {
        let localContext = new NullPredicateContext(this.context, this.state);
        this.enterRule(localContext, 782, GQLParser.RULE_nullPredicate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3701;
            this.valueExpressionPrimary(0);
            this.state = 3702;
            this.nullPredicatePart2();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nullPredicatePart2(): NullPredicatePart2Context {
        let localContext = new NullPredicatePart2Context(this.context, this.state);
        this.enterRule(localContext, 784, GQLParser.RULE_nullPredicatePart2);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3704;
            this.match(GQLParser.IS);
            this.state = 3706;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 152) {
                {
                this.state = 3705;
                this.match(GQLParser.NOT);
                }
            }

            this.state = 3708;
            this.match(GQLParser.NULL_KW);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valueTypePredicate(): ValueTypePredicateContext {
        let localContext = new ValueTypePredicateContext(this.context, this.state);
        this.enterRule(localContext, 786, GQLParser.RULE_valueTypePredicate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3710;
            this.valueExpressionPrimary(0);
            this.state = 3711;
            this.valueTypePredicatePart2();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valueTypePredicatePart2(): ValueTypePredicatePart2Context {
        let localContext = new ValueTypePredicatePart2Context(this.context, this.state);
        this.enterRule(localContext, 788, GQLParser.RULE_valueTypePredicatePart2);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3713;
            this.match(GQLParser.IS);
            this.state = 3715;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 152) {
                {
                this.state = 3714;
                this.match(GQLParser.NOT);
                }
            }

            this.state = 3717;
            this.typed();
            this.state = 3718;
            this.valueType(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public normalizedPredicatePart2(): NormalizedPredicatePart2Context {
        let localContext = new NormalizedPredicatePart2Context(this.context, this.state);
        this.enterRule(localContext, 790, GQLParser.RULE_normalizedPredicatePart2);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3720;
            this.match(GQLParser.IS);
            this.state = 3722;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 152) {
                {
                this.state = 3721;
                this.match(GQLParser.NOT);
                }
            }

            this.state = 3725;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 296)) & ~0x1F) === 0 && ((1 << (_la - 296)) & 15) !== 0)) {
                {
                this.state = 3724;
                this.normalForm();
                }
            }

            this.state = 3727;
            this.match(GQLParser.NORMALIZED);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public directedPredicate(): DirectedPredicateContext {
        let localContext = new DirectedPredicateContext(this.context, this.state);
        this.enterRule(localContext, 792, GQLParser.RULE_directedPredicate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3729;
            this.elementVariableReference();
            this.state = 3730;
            this.directedPredicatePart2();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public directedPredicatePart2(): DirectedPredicatePart2Context {
        let localContext = new DirectedPredicatePart2Context(this.context, this.state);
        this.enterRule(localContext, 794, GQLParser.RULE_directedPredicatePart2);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3732;
            this.match(GQLParser.IS);
            this.state = 3734;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 152) {
                {
                this.state = 3733;
                this.match(GQLParser.NOT);
                }
            }

            this.state = 3736;
            this.match(GQLParser.DIRECTED);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public labeledPredicate(): LabeledPredicateContext {
        let localContext = new LabeledPredicateContext(this.context, this.state);
        this.enterRule(localContext, 796, GQLParser.RULE_labeledPredicate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3738;
            this.elementVariableReference();
            this.state = 3739;
            this.labeledPredicatePart2();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public labeledPredicatePart2(): LabeledPredicatePart2Context {
        let localContext = new LabeledPredicatePart2Context(this.context, this.state);
        this.enterRule(localContext, 798, GQLParser.RULE_labeledPredicatePart2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3741;
            this.isLabeledOrColon();
            this.state = 3742;
            this.labelExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public isLabeledOrColon(): IsLabeledOrColonContext {
        let localContext = new IsLabeledOrColonContext(this.context, this.state);
        this.enterRule(localContext, 800, GQLParser.RULE_isLabeledOrColon);
        let _la: number;
        try {
            this.state = 3750;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.IS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3744;
                this.match(GQLParser.IS);
                this.state = 3746;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 152) {
                    {
                    this.state = 3745;
                    this.match(GQLParser.NOT);
                    }
                }

                this.state = 3748;
                this.match(GQLParser.LABELED);
                }
                break;
            case GQLParser.COLON:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3749;
                this.match(GQLParser.COLON);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourceDestinationPredicate(): SourceDestinationPredicateContext {
        let localContext = new SourceDestinationPredicateContext(this.context, this.state);
        this.enterRule(localContext, 802, GQLParser.RULE_sourceDestinationPredicate);
        try {
            this.state = 3758;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 430, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3752;
                this.nodeReference();
                this.state = 3753;
                this.sourcePredicatePart2();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3755;
                this.nodeReference();
                this.state = 3756;
                this.destinationPredicatePart2();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nodeReference(): NodeReferenceContext {
        let localContext = new NodeReferenceContext(this.context, this.state);
        this.enterRule(localContext, 804, GQLParser.RULE_nodeReference);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3760;
            this.elementVariableReference();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourcePredicatePart2(): SourcePredicatePart2Context {
        let localContext = new SourcePredicatePart2Context(this.context, this.state);
        this.enterRule(localContext, 806, GQLParser.RULE_sourcePredicatePart2);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3762;
            this.match(GQLParser.IS);
            this.state = 3764;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 152) {
                {
                this.state = 3763;
                this.match(GQLParser.NOT);
                }
            }

            this.state = 3766;
            this.match(GQLParser.SOURCE);
            this.state = 3767;
            this.match(GQLParser.OF);
            this.state = 3768;
            this.edgeReference();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public destinationPredicatePart2(): DestinationPredicatePart2Context {
        let localContext = new DestinationPredicatePart2Context(this.context, this.state);
        this.enterRule(localContext, 808, GQLParser.RULE_destinationPredicatePart2);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3770;
            this.match(GQLParser.IS);
            this.state = 3772;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 152) {
                {
                this.state = 3771;
                this.match(GQLParser.NOT);
                }
            }

            this.state = 3774;
            this.match(GQLParser.DESTINATION);
            this.state = 3775;
            this.match(GQLParser.OF);
            this.state = 3776;
            this.edgeReference();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public edgeReference(): EdgeReferenceContext {
        let localContext = new EdgeReferenceContext(this.context, this.state);
        this.enterRule(localContext, 810, GQLParser.RULE_edgeReference);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3778;
            this.elementVariableReference();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public all_differentPredicate(): All_differentPredicateContext {
        let localContext = new All_differentPredicateContext(this.context, this.state);
        this.enterRule(localContext, 812, GQLParser.RULE_all_differentPredicate);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3780;
            this.match(GQLParser.ALL_DIFFERENT);
            this.state = 3781;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 3782;
            this.elementVariableReference();
            this.state = 3783;
            this.match(GQLParser.COMMA);
            this.state = 3784;
            this.elementVariableReference();
            this.state = 3789;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 361) {
                {
                {
                this.state = 3785;
                this.match(GQLParser.COMMA);
                this.state = 3786;
                this.elementVariableReference();
                }
                }
                this.state = 3791;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3792;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public samePredicate(): SamePredicateContext {
        let localContext = new SamePredicateContext(this.context, this.state);
        this.enterRule(localContext, 814, GQLParser.RULE_samePredicate);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3794;
            this.match(GQLParser.SAME);
            this.state = 3795;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 3796;
            this.elementVariableReference();
            this.state = 3797;
            this.match(GQLParser.COMMA);
            this.state = 3798;
            this.elementVariableReference();
            this.state = 3803;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 361) {
                {
                {
                this.state = 3799;
                this.match(GQLParser.COMMA);
                this.state = 3800;
                this.elementVariableReference();
                }
                }
                this.state = 3805;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3806;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public property_existsPredicate(): Property_existsPredicateContext {
        let localContext = new Property_existsPredicateContext(this.context, this.state);
        this.enterRule(localContext, 816, GQLParser.RULE_property_existsPredicate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3808;
            this.match(GQLParser.PROPERTY_EXISTS);
            this.state = 3809;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 3810;
            this.elementVariableReference();
            this.state = 3811;
            this.match(GQLParser.COMMA);
            this.state = 3812;
            this.propertyName();
            this.state = 3813;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public valueExpression(): ValueExpressionContext;
    public valueExpression(_p: number): ValueExpressionContext;
    public valueExpression(_p?: number): ValueExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ValueExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 818;
        this.enterRecursionRule(localContext, 818, GQLParser.RULE_valueExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3833;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 437, this.context) ) {
            case 1:
                {
                localContext = new SignedExprAltContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 3816;
                (localContext as SignedExprAltContext)._sign = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 373 || _la === 376)) {
                    (localContext as SignedExprAltContext)._sign = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3817;
                this.valueExpression(15);
                }
                break;
            case 2:
                {
                localContext = new PredicateExprAltContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3818;
                this.predicate();
                }
                break;
            case 3:
                {
                localContext = new NotExprAltContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3819;
                this.match(GQLParser.NOT);
                this.state = 3820;
                this.valueExpression(8);
                }
                break;
            case 4:
                {
                localContext = new PropertyGraphExprAltContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3822;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 305) {
                    {
                    this.state = 3821;
                    this.match(GQLParser.PROPERTY);
                    }
                }

                this.state = 3824;
                this.match(GQLParser.GRAPH);
                this.state = 3825;
                this.graphExpression();
                }
                break;
            case 5:
                {
                localContext = new BindingTableExprAltContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3827;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 278) {
                    {
                    this.state = 3826;
                    this.match(GQLParser.BINDING);
                    }
                }

                this.state = 3829;
                this.match(GQLParser.TABLE);
                this.state = 3830;
                this.bindingTableExpression();
                }
                break;
            case 6:
                {
                localContext = new ValueFunctionExprAltContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3831;
                this.valueFunction();
                }
                break;
            case 7:
                {
                localContext = new PrimaryExprAltContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3832;
                this.valueExpressionPrimary(0);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 3864;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 440, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 3862;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 439, this.context) ) {
                    case 1:
                        {
                        localContext = new MultDivExprAltContext(new ValueExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, GQLParser.RULE_valueExpression);
                        this.state = 3835;
                        if (!(this.precpred(this.context, 14))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 14)");
                        }
                        this.state = 3836;
                        (localContext as MultDivExprAltContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 359 || _la === 383)) {
                            (localContext as MultDivExprAltContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3837;
                        this.valueExpression(15);
                        }
                        break;
                    case 2:
                        {
                        localContext = new AddSubtractExprAltContext(new ValueExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, GQLParser.RULE_valueExpression);
                        this.state = 3838;
                        if (!(this.precpred(this.context, 13))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 13)");
                        }
                        this.state = 3839;
                        (localContext as AddSubtractExprAltContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 373 || _la === 376)) {
                            (localContext as AddSubtractExprAltContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3840;
                        this.valueExpression(14);
                        }
                        break;
                    case 3:
                        {
                        localContext = new ConcatenationExprAltContext(new ValueExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, GQLParser.RULE_valueExpression);
                        this.state = 3841;
                        if (!(this.precpred(this.context, 12))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 12)");
                        }
                        this.state = 3842;
                        this.match(GQLParser.CONCATENATION_OPERATOR);
                        this.state = 3843;
                        this.valueExpression(13);
                        }
                        break;
                    case 4:
                        {
                        localContext = new ComparisonExprAltContext(new ValueExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, GQLParser.RULE_valueExpression);
                        this.state = 3844;
                        if (!(this.precpred(this.context, 11))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 11)");
                        }
                        this.state = 3845;
                        this.compOp();
                        this.state = 3846;
                        this.valueExpression(12);
                        }
                        break;
                    case 5:
                        {
                        localContext = new ConjunctiveExprAltContext(new ValueExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, GQLParser.RULE_valueExpression);
                        this.state = 3848;
                        if (!(this.precpred(this.context, 6))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 6)");
                        }
                        this.state = 3849;
                        this.match(GQLParser.AND);
                        this.state = 3850;
                        this.valueExpression(7);
                        }
                        break;
                    case 6:
                        {
                        localContext = new DisjunctiveExprAltContext(new ValueExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, GQLParser.RULE_valueExpression);
                        this.state = 3851;
                        if (!(this.precpred(this.context, 5))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 5)");
                        }
                        this.state = 3852;
                        (localContext as DisjunctiveExprAltContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 161 || _la === 232)) {
                            (localContext as DisjunctiveExprAltContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3853;
                        this.valueExpression(6);
                        }
                        break;
                    case 7:
                        {
                        localContext = new NormalizedPredicateExprAltContext(new ValueExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, GQLParser.RULE_valueExpression);
                        this.state = 3854;
                        if (!(this.precpred(this.context, 9))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 9)");
                        }
                        this.state = 3855;
                        this.normalizedPredicatePart2();
                        }
                        break;
                    case 8:
                        {
                        localContext = new IsNotExprAltContext(new ValueExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, GQLParser.RULE_valueExpression);
                        this.state = 3856;
                        if (!(this.precpred(this.context, 7))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 7)");
                        }
                        this.state = 3857;
                        this.match(GQLParser.IS);
                        this.state = 3859;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 152) {
                            {
                            this.state = 3858;
                            this.match(GQLParser.NOT);
                            }
                        }

                        this.state = 3861;
                        this.truthValue();
                        }
                        break;
                    }
                    }
                }
                this.state = 3866;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 440, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public valueFunction(): ValueFunctionContext {
        let localContext = new ValueFunctionContext(this.context, this.state);
        this.enterRule(localContext, 820, GQLParser.RULE_valueFunction);
        try {
            this.state = 3873;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 441, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3867;
                this.numericValueFunction();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3868;
                this.datetimeSubtraction();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3869;
                this.datetimeValueFunction();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3870;
                this.durationValueFunction();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3871;
                this.characterOrByteStringFunction();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3872;
                this.listValueFunction();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public booleanValueExpression(): BooleanValueExpressionContext {
        let localContext = new BooleanValueExpressionContext(this.context, this.state);
        this.enterRule(localContext, 822, GQLParser.RULE_booleanValueExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3875;
            this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public characterOrByteStringFunction(): CharacterOrByteStringFunctionContext {
        let localContext = new CharacterOrByteStringFunctionContext(this.context, this.state);
        this.enterRule(localContext, 824, GQLParser.RULE_characterOrByteStringFunction);
        try {
            this.state = 3882;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.LEFT:
            case GQLParser.RIGHT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3877;
                this.subCharacterOrByteString();
                }
                break;
            case GQLParser.TRIM:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3878;
                this.trimSingleCharacterOrByteString();
                }
                break;
            case GQLParser.LOWER:
            case GQLParser.UPPER:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3879;
                this.foldCharacterString();
                }
                break;
            case GQLParser.BTRIM:
            case GQLParser.LTRIM:
            case GQLParser.RTRIM:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3880;
                this.trimMultiCharacterCharacterString();
                }
                break;
            case GQLParser.NORMALIZE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3881;
                this.normalizeCharacterString();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subCharacterOrByteString(): SubCharacterOrByteStringContext {
        let localContext = new SubCharacterOrByteStringContext(this.context, this.state);
        this.enterRule(localContext, 826, GQLParser.RULE_subCharacterOrByteString);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3884;
            _la = this.tokenStream.LA(1);
            if(!(_la === 129 || _la === 181)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3885;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 3886;
            this.valueExpression(0);
            this.state = 3887;
            this.match(GQLParser.COMMA);
            this.state = 3888;
            this.stringLength();
            this.state = 3889;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trimSingleCharacterOrByteString(): TrimSingleCharacterOrByteStringContext {
        let localContext = new TrimSingleCharacterOrByteStringContext(this.context, this.state);
        this.enterRule(localContext, 828, GQLParser.RULE_trimSingleCharacterOrByteString);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3891;
            this.match(GQLParser.TRIM);
            this.state = 3892;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 3893;
            this.trimOperands();
            this.state = 3894;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public foldCharacterString(): FoldCharacterStringContext {
        let localContext = new FoldCharacterStringContext(this.context, this.state);
        this.enterRule(localContext, 830, GQLParser.RULE_foldCharacterString);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3896;
            _la = this.tokenStream.LA(1);
            if(!(_la === 141 || _la === 222)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3897;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 3898;
            this.valueExpression(0);
            this.state = 3899;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trimMultiCharacterCharacterString(): TrimMultiCharacterCharacterStringContext {
        let localContext = new TrimMultiCharacterCharacterStringContext(this.context, this.state);
        this.enterRule(localContext, 832, GQLParser.RULE_trimMultiCharacterCharacterString);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3901;
            _la = this.tokenStream.LA(1);
            if(!(_la === 40 || _la === 142 || _la === 183)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3902;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 3903;
            this.valueExpression(0);
            this.state = 3906;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 361) {
                {
                this.state = 3904;
                this.match(GQLParser.COMMA);
                this.state = 3905;
                this.valueExpression(0);
                }
            }

            this.state = 3908;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public normalizeCharacterString(): NormalizeCharacterStringContext {
        let localContext = new NormalizeCharacterStringContext(this.context, this.state);
        this.enterRule(localContext, 834, GQLParser.RULE_normalizeCharacterString);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3910;
            this.match(GQLParser.NORMALIZE);
            this.state = 3911;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 3912;
            this.valueExpression(0);
            this.state = 3915;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 361) {
                {
                this.state = 3913;
                this.match(GQLParser.COMMA);
                this.state = 3914;
                this.normalForm();
                }
            }

            this.state = 3917;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nodeReferenceValueExpression(): NodeReferenceValueExpressionContext {
        let localContext = new NodeReferenceValueExpressionContext(this.context, this.state);
        this.enterRule(localContext, 836, GQLParser.RULE_nodeReferenceValueExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3919;
            this.valueExpressionPrimary(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public edgeReferenceValueExpression(): EdgeReferenceValueExpressionContext {
        let localContext = new EdgeReferenceValueExpressionContext(this.context, this.state);
        this.enterRule(localContext, 838, GQLParser.RULE_edgeReferenceValueExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3921;
            this.valueExpressionPrimary(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggregatingValueExpression(): AggregatingValueExpressionContext {
        let localContext = new AggregatingValueExpressionContext(this.context, this.state);
        this.enterRule(localContext, 840, GQLParser.RULE_aggregatingValueExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3923;
            this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public valueExpressionPrimary(): ValueExpressionPrimaryContext;
    public valueExpressionPrimary(_p: number): ValueExpressionPrimaryContext;
    public valueExpressionPrimary(_p?: number): ValueExpressionPrimaryContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ValueExpressionPrimaryContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 842;
        this.enterRecursionRule(localContext, 842, GQLParser.RULE_valueExpressionPrimary, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3936;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.LEFT_PAREN:
                {
                this.state = 3926;
                this.parenthesizedValueExpression();
                }
                break;
            case GQLParser.AVG:
            case GQLParser.COLLECT_LIST:
            case GQLParser.COUNT:
            case GQLParser.MAX:
            case GQLParser.MIN:
            case GQLParser.PERCENTILE_CONT:
            case GQLParser.PERCENTILE_DISC:
            case GQLParser.STDDEV_POP:
            case GQLParser.STDDEV_SAMP:
            case GQLParser.SUM:
                {
                this.state = 3927;
                this.aggregateFunction();
                }
                break;
            case GQLParser.BOOLEAN_LITERAL:
            case GQLParser.SINGLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.BYTE_STRING_LITERAL:
            case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_INTEGER:
            case GQLParser.UNSIGNED_HEXADECIMAL_INTEGER:
            case GQLParser.UNSIGNED_OCTAL_INTEGER:
            case GQLParser.UNSIGNED_BINARY_INTEGER:
            case GQLParser.ARRAY:
            case GQLParser.DATE:
            case GQLParser.DATETIME:
            case GQLParser.DURATION:
            case GQLParser.GROUP:
            case GQLParser.LIST:
            case GQLParser.NULL_KW:
            case GQLParser.RECORD:
            case GQLParser.SESSION_USER:
            case GQLParser.TIME:
            case GQLParser.TIMESTAMP:
            case GQLParser.GENERAL_PARAMETER_REFERENCE:
            case GQLParser.LEFT_BRACE:
            case GQLParser.LEFT_BRACKET:
                {
                this.state = 3928;
                this.unsignedValueSpecification();
                }
                break;
            case GQLParser.PATH:
                {
                this.state = 3929;
                this.pathValueConstructor();
                }
                break;
            case GQLParser.VALUE:
                {
                this.state = 3930;
                this.valueQueryExpression();
                }
                break;
            case GQLParser.CASE:
            case GQLParser.COALESCE:
            case GQLParser.NULLIF:
                {
                this.state = 3931;
                this.caseExpression();
                }
                break;
            case GQLParser.CAST:
                {
                this.state = 3932;
                this.castSpecification();
                }
                break;
            case GQLParser.ELEMENT_ID:
                {
                this.state = 3933;
                this.element_idFunction();
                }
                break;
            case GQLParser.LET:
                {
                this.state = 3934;
                this.letValueExpression();
                }
                break;
            case GQLParser.ACYCLIC:
            case GQLParser.BINDING:
            case GQLParser.BINDINGS:
            case GQLParser.CONNECTING:
            case GQLParser.DESTINATION:
            case GQLParser.DIFFERENT:
            case GQLParser.DIRECTED:
            case GQLParser.EDGE:
            case GQLParser.EDGES:
            case GQLParser.ELEMENT:
            case GQLParser.ELEMENTS:
            case GQLParser.FIRST:
            case GQLParser.GRAPH:
            case GQLParser.GROUPS:
            case GQLParser.KEEP:
            case GQLParser.LABEL:
            case GQLParser.LABELED:
            case GQLParser.LABELS:
            case GQLParser.LAST:
            case GQLParser.NFC:
            case GQLParser.NFD:
            case GQLParser.NFKC:
            case GQLParser.NFKD:
            case GQLParser.NO:
            case GQLParser.NODE:
            case GQLParser.NORMALIZED:
            case GQLParser.ONLY:
            case GQLParser.ORDINALITY:
            case GQLParser.PROPERTY:
            case GQLParser.READ:
            case GQLParser.RELATIONSHIP:
            case GQLParser.RELATIONSHIPS:
            case GQLParser.REPEATABLE:
            case GQLParser.SHORTEST:
            case GQLParser.SIMPLE:
            case GQLParser.SOURCE:
            case GQLParser.TABLE:
            case GQLParser.TEMP:
            case GQLParser.TO:
            case GQLParser.TRAIL:
            case GQLParser.TRANSACTION:
            case GQLParser.TYPE:
            case GQLParser.UNDIRECTED:
            case GQLParser.VERTEX:
            case GQLParser.WALK:
            case GQLParser.WITHOUT:
            case GQLParser.WRITE:
            case GQLParser.ZONE:
            case GQLParser.REGULAR_IDENTIFIER:
                {
                this.state = 3935;
                this.bindingVariableReference();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 3943;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 446, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new ValueExpressionPrimaryContext(parentContext, parentState);
                    this.pushNewRecursionContext(localContext, _startState, GQLParser.RULE_valueExpressionPrimary);
                    this.state = 3938;
                    if (!(this.precpred(this.context, 7))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 7)");
                    }
                    this.state = 3939;
                    this.match(GQLParser.PERIOD);
                    this.state = 3940;
                    this.propertyName();
                    }
                    }
                }
                this.state = 3945;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 446, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public parenthesizedValueExpression(): ParenthesizedValueExpressionContext {
        let localContext = new ParenthesizedValueExpressionContext(this.context, this.state);
        this.enterRule(localContext, 844, GQLParser.RULE_parenthesizedValueExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3946;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 3947;
            this.valueExpression(0);
            this.state = 3948;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonParenthesizedValueExpressionPrimary(): NonParenthesizedValueExpressionPrimaryContext {
        let localContext = new NonParenthesizedValueExpressionPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 846, GQLParser.RULE_nonParenthesizedValueExpressionPrimary);
        try {
            this.state = 3952;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 447, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3950;
                this.nonParenthesizedValueExpressionPrimarySpecialCase();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3951;
                this.bindingVariableReference();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonParenthesizedValueExpressionPrimarySpecialCase(): NonParenthesizedValueExpressionPrimarySpecialCaseContext {
        let localContext = new NonParenthesizedValueExpressionPrimarySpecialCaseContext(this.context, this.state);
        this.enterRule(localContext, 848, GQLParser.RULE_nonParenthesizedValueExpressionPrimarySpecialCase);
        try {
            this.state = 3966;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 448, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3954;
                this.aggregateFunction();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3955;
                this.unsignedValueSpecification();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3956;
                this.pathValueConstructor();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3957;
                this.valueExpressionPrimary(0);
                this.state = 3958;
                this.match(GQLParser.PERIOD);
                this.state = 3959;
                this.propertyName();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3961;
                this.valueQueryExpression();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3962;
                this.caseExpression();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3963;
                this.castSpecification();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3964;
                this.element_idFunction();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3965;
                this.letValueExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsignedValueSpecification(): UnsignedValueSpecificationContext {
        let localContext = new UnsignedValueSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 850, GQLParser.RULE_unsignedValueSpecification);
        try {
            this.state = 3970;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.BOOLEAN_LITERAL:
            case GQLParser.SINGLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.BYTE_STRING_LITERAL:
            case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_INTEGER:
            case GQLParser.UNSIGNED_HEXADECIMAL_INTEGER:
            case GQLParser.UNSIGNED_OCTAL_INTEGER:
            case GQLParser.UNSIGNED_BINARY_INTEGER:
            case GQLParser.ARRAY:
            case GQLParser.DATE:
            case GQLParser.DATETIME:
            case GQLParser.DURATION:
            case GQLParser.GROUP:
            case GQLParser.LIST:
            case GQLParser.NULL_KW:
            case GQLParser.RECORD:
            case GQLParser.TIME:
            case GQLParser.TIMESTAMP:
            case GQLParser.LEFT_BRACE:
            case GQLParser.LEFT_BRACKET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3968;
                this.unsignedLiteral();
                }
                break;
            case GQLParser.SESSION_USER:
            case GQLParser.GENERAL_PARAMETER_REFERENCE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3969;
                this.generalValueSpecification();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonNegativeIntegerSpecification(): NonNegativeIntegerSpecificationContext {
        let localContext = new NonNegativeIntegerSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 852, GQLParser.RULE_nonNegativeIntegerSpecification);
        try {
            this.state = 3974;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.UNSIGNED_DECIMAL_INTEGER:
            case GQLParser.UNSIGNED_HEXADECIMAL_INTEGER:
            case GQLParser.UNSIGNED_OCTAL_INTEGER:
            case GQLParser.UNSIGNED_BINARY_INTEGER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3972;
                this.unsignedInteger();
                }
                break;
            case GQLParser.GENERAL_PARAMETER_REFERENCE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3973;
                this.dynamicParameterSpecification();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generalValueSpecification(): GeneralValueSpecificationContext {
        let localContext = new GeneralValueSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 854, GQLParser.RULE_generalValueSpecification);
        try {
            this.state = 3978;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.GENERAL_PARAMETER_REFERENCE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3976;
                this.dynamicParameterSpecification();
                }
                break;
            case GQLParser.SESSION_USER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3977;
                this.match(GQLParser.SESSION_USER);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dynamicParameterSpecification(): DynamicParameterSpecificationContext {
        let localContext = new DynamicParameterSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 856, GQLParser.RULE_dynamicParameterSpecification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3980;
            this.match(GQLParser.GENERAL_PARAMETER_REFERENCE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public letValueExpression(): LetValueExpressionContext {
        let localContext = new LetValueExpressionContext(this.context, this.state);
        this.enterRule(localContext, 858, GQLParser.RULE_letValueExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3982;
            this.match(GQLParser.LET);
            this.state = 3983;
            this.letVariableDefinitionList();
            this.state = 3984;
            this.match(GQLParser.IN);
            this.state = 3985;
            this.valueExpression(0);
            this.state = 3986;
            this.match(GQLParser.END);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valueQueryExpression(): ValueQueryExpressionContext {
        let localContext = new ValueQueryExpressionContext(this.context, this.state);
        this.enterRule(localContext, 860, GQLParser.RULE_valueQueryExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3988;
            this.match(GQLParser.VALUE);
            this.state = 3989;
            this.nestedQuerySpecification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public caseExpression(): CaseExpressionContext {
        let localContext = new CaseExpressionContext(this.context, this.state);
        this.enterRule(localContext, 862, GQLParser.RULE_caseExpression);
        try {
            this.state = 3993;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.COALESCE:
            case GQLParser.NULLIF:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3991;
                this.caseAbbreviation();
                }
                break;
            case GQLParser.CASE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3992;
                this.caseSpecification();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public caseAbbreviation(): CaseAbbreviationContext {
        let localContext = new CaseAbbreviationContext(this.context, this.state);
        this.enterRule(localContext, 864, GQLParser.RULE_caseAbbreviation);
        let _la: number;
        try {
            this.state = 4013;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.NULLIF:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3995;
                this.match(GQLParser.NULLIF);
                this.state = 3996;
                this.match(GQLParser.LEFT_PAREN);
                this.state = 3997;
                this.valueExpression(0);
                this.state = 3998;
                this.match(GQLParser.COMMA);
                this.state = 3999;
                this.valueExpression(0);
                this.state = 4000;
                this.match(GQLParser.RIGHT_PAREN);
                }
                break;
            case GQLParser.COALESCE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4002;
                this.match(GQLParser.COALESCE);
                this.state = 4003;
                this.match(GQLParser.LEFT_PAREN);
                this.state = 4004;
                this.valueExpression(0);
                this.state = 4007;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 4005;
                    this.match(GQLParser.COMMA);
                    this.state = 4006;
                    this.valueExpression(0);
                    }
                    }
                    this.state = 4009;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 361);
                this.state = 4011;
                this.match(GQLParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public caseSpecification(): CaseSpecificationContext {
        let localContext = new CaseSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 866, GQLParser.RULE_caseSpecification);
        try {
            this.state = 4017;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 455, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4015;
                this.simpleCase();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4016;
                this.searchedCase();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleCase(): SimpleCaseContext {
        let localContext = new SimpleCaseContext(this.context, this.state);
        this.enterRule(localContext, 868, GQLParser.RULE_simpleCase);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4019;
            this.match(GQLParser.CASE);
            this.state = 4020;
            this.caseOperand();
            this.state = 4022;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 4021;
                this.simpleWhenClause();
                }
                }
                this.state = 4024;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 229);
            this.state = 4027;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 86) {
                {
                this.state = 4026;
                this.elseClause();
                }
            }

            this.state = 4029;
            this.match(GQLParser.END);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public searchedCase(): SearchedCaseContext {
        let localContext = new SearchedCaseContext(this.context, this.state);
        this.enterRule(localContext, 870, GQLParser.RULE_searchedCase);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4031;
            this.match(GQLParser.CASE);
            this.state = 4033;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 4032;
                this.searchedWhenClause();
                }
                }
                this.state = 4035;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 229);
            this.state = 4038;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 86) {
                {
                this.state = 4037;
                this.elseClause();
                }
            }

            this.state = 4040;
            this.match(GQLParser.END);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleWhenClause(): SimpleWhenClauseContext {
        let localContext = new SimpleWhenClauseContext(this.context, this.state);
        this.enterRule(localContext, 872, GQLParser.RULE_simpleWhenClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4042;
            this.match(GQLParser.WHEN);
            this.state = 4043;
            this.whenOperandList();
            this.state = 4044;
            this.match(GQLParser.THEN);
            this.state = 4045;
            this.result();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public searchedWhenClause(): SearchedWhenClauseContext {
        let localContext = new SearchedWhenClauseContext(this.context, this.state);
        this.enterRule(localContext, 874, GQLParser.RULE_searchedWhenClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4047;
            this.match(GQLParser.WHEN);
            this.state = 4048;
            this.searchCondition();
            this.state = 4049;
            this.match(GQLParser.THEN);
            this.state = 4050;
            this.result();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elseClause(): ElseClauseContext {
        let localContext = new ElseClauseContext(this.context, this.state);
        this.enterRule(localContext, 876, GQLParser.RULE_elseClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4052;
            this.match(GQLParser.ELSE);
            this.state = 4053;
            this.result();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public caseOperand(): CaseOperandContext {
        let localContext = new CaseOperandContext(this.context, this.state);
        this.enterRule(localContext, 878, GQLParser.RULE_caseOperand);
        try {
            this.state = 4057;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 460, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4055;
                this.nonParenthesizedValueExpressionPrimary();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4056;
                this.elementVariableReference();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenOperandList(): WhenOperandListContext {
        let localContext = new WhenOperandListContext(this.context, this.state);
        this.enterRule(localContext, 880, GQLParser.RULE_whenOperandList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4059;
            this.whenOperand();
            this.state = 4064;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 361) {
                {
                {
                this.state = 4060;
                this.match(GQLParser.COMMA);
                this.state = 4061;
                this.whenOperand();
                }
                }
                this.state = 4066;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenOperand(): WhenOperandContext {
        let localContext = new WhenOperandContext(this.context, this.state);
        this.enterRule(localContext, 882, GQLParser.RULE_whenOperand);
        try {
            this.state = 4078;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 462, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4067;
                this.nonParenthesizedValueExpressionPrimary();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4068;
                this.compOp();
                this.state = 4069;
                this.valueExpression(0);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4071;
                this.nullPredicatePart2();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4072;
                this.valueTypePredicatePart2();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4073;
                this.normalizedPredicatePart2();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4074;
                this.directedPredicatePart2();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4075;
                this.labeledPredicatePart2();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4076;
                this.sourcePredicatePart2();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4077;
                this.destinationPredicatePart2();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public result(): ResultContext {
        let localContext = new ResultContext(this.context, this.state);
        this.enterRule(localContext, 884, GQLParser.RULE_result);
        try {
            this.state = 4082;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 463, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4080;
                this.resultExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4081;
                this.nullLiteral();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resultExpression(): ResultExpressionContext {
        let localContext = new ResultExpressionContext(this.context, this.state);
        this.enterRule(localContext, 886, GQLParser.RULE_resultExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4084;
            this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public castSpecification(): CastSpecificationContext {
        let localContext = new CastSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 888, GQLParser.RULE_castSpecification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4086;
            this.match(GQLParser.CAST);
            this.state = 4087;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 4088;
            this.castOperand();
            this.state = 4089;
            this.match(GQLParser.AS);
            this.state = 4090;
            this.castTarget();
            this.state = 4091;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public castOperand(): CastOperandContext {
        let localContext = new CastOperandContext(this.context, this.state);
        this.enterRule(localContext, 890, GQLParser.RULE_castOperand);
        try {
            this.state = 4095;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 464, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4093;
                this.valueExpression(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4094;
                this.nullLiteral();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public castTarget(): CastTargetContext {
        let localContext = new CastTargetContext(this.context, this.state);
        this.enterRule(localContext, 892, GQLParser.RULE_castTarget);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4097;
            this.valueType(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggregateFunction(): AggregateFunctionContext {
        let localContext = new AggregateFunctionContext(this.context, this.state);
        this.enterRule(localContext, 894, GQLParser.RULE_aggregateFunction);
        try {
            this.state = 4105;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 465, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4099;
                this.match(GQLParser.COUNT);
                this.state = 4100;
                this.match(GQLParser.LEFT_PAREN);
                this.state = 4101;
                this.match(GQLParser.ASTERISK);
                this.state = 4102;
                this.match(GQLParser.RIGHT_PAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4103;
                this.generalSetFunction();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4104;
                this.binarySetFunction();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generalSetFunction(): GeneralSetFunctionContext {
        let localContext = new GeneralSetFunctionContext(this.context, this.state);
        this.enterRule(localContext, 896, GQLParser.RULE_generalSetFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4107;
            this.generalSetFunctionType();
            this.state = 4108;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 4110;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 22 || _la === 80) {
                {
                this.state = 4109;
                this.setQuantifier();
                }
            }

            this.state = 4112;
            this.valueExpression(0);
            this.state = 4113;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public binarySetFunction(): BinarySetFunctionContext {
        let localContext = new BinarySetFunctionContext(this.context, this.state);
        this.enterRule(localContext, 898, GQLParser.RULE_binarySetFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4115;
            this.binarySetFunctionType();
            this.state = 4116;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 4117;
            this.dependentValueExpression();
            this.state = 4118;
            this.match(GQLParser.COMMA);
            this.state = 4119;
            this.independentValueExpression();
            this.state = 4120;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generalSetFunctionType(): GeneralSetFunctionTypeContext {
        let localContext = new GeneralSetFunctionTypeContext(this.context, this.state);
        this.enterRule(localContext, 900, GQLParser.RULE_generalSetFunctionType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4122;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 545259521) !== 0) || _la === 144 || _la === 145 || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & 11) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setQuantifier(): SetQuantifierContext {
        let localContext = new SetQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 902, GQLParser.RULE_setQuantifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4124;
            _la = this.tokenStream.LA(1);
            if(!(_la === 22 || _la === 80)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public binarySetFunctionType(): BinarySetFunctionTypeContext {
        let localContext = new BinarySetFunctionTypeContext(this.context, this.state);
        this.enterRule(localContext, 904, GQLParser.RULE_binarySetFunctionType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4126;
            _la = this.tokenStream.LA(1);
            if(!(_la === 169 || _la === 170)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dependentValueExpression(): DependentValueExpressionContext {
        let localContext = new DependentValueExpressionContext(this.context, this.state);
        this.enterRule(localContext, 906, GQLParser.RULE_dependentValueExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4129;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 22 || _la === 80) {
                {
                this.state = 4128;
                this.setQuantifier();
                }
            }

            this.state = 4131;
            this.numericValueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public independentValueExpression(): IndependentValueExpressionContext {
        let localContext = new IndependentValueExpressionContext(this.context, this.state);
        this.enterRule(localContext, 908, GQLParser.RULE_independentValueExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4133;
            this.numericValueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public element_idFunction(): Element_idFunctionContext {
        let localContext = new Element_idFunctionContext(this.context, this.state);
        this.enterRule(localContext, 910, GQLParser.RULE_element_idFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4135;
            this.match(GQLParser.ELEMENT_ID);
            this.state = 4136;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 4137;
            this.elementVariableReference();
            this.state = 4138;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bindingVariableReference(): BindingVariableReferenceContext {
        let localContext = new BindingVariableReferenceContext(this.context, this.state);
        this.enterRule(localContext, 912, GQLParser.RULE_bindingVariableReference);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4140;
            this.bindingVariable();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathValueExpression(): PathValueExpressionContext {
        let localContext = new PathValueExpressionContext(this.context, this.state);
        this.enterRule(localContext, 914, GQLParser.RULE_pathValueExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4142;
            this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathValueConstructor(): PathValueConstructorContext {
        let localContext = new PathValueConstructorContext(this.context, this.state);
        this.enterRule(localContext, 916, GQLParser.RULE_pathValueConstructor);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4144;
            this.pathValueConstructorByEnumeration();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathValueConstructorByEnumeration(): PathValueConstructorByEnumerationContext {
        let localContext = new PathValueConstructorByEnumerationContext(this.context, this.state);
        this.enterRule(localContext, 918, GQLParser.RULE_pathValueConstructorByEnumeration);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4146;
            this.match(GQLParser.PATH);
            this.state = 4147;
            this.match(GQLParser.LEFT_BRACKET);
            this.state = 4148;
            this.pathElementList();
            this.state = 4149;
            this.match(GQLParser.RIGHT_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathElementList(): PathElementListContext {
        let localContext = new PathElementListContext(this.context, this.state);
        this.enterRule(localContext, 920, GQLParser.RULE_pathElementList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4151;
            this.pathElementListStart();
            this.state = 4155;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 361) {
                {
                {
                this.state = 4152;
                this.pathElementListStep();
                }
                }
                this.state = 4157;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathElementListStart(): PathElementListStartContext {
        let localContext = new PathElementListStartContext(this.context, this.state);
        this.enterRule(localContext, 922, GQLParser.RULE_pathElementListStart);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4158;
            this.nodeReferenceValueExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathElementListStep(): PathElementListStepContext {
        let localContext = new PathElementListStepContext(this.context, this.state);
        this.enterRule(localContext, 924, GQLParser.RULE_pathElementListStep);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4160;
            this.match(GQLParser.COMMA);
            this.state = 4161;
            this.edgeReferenceValueExpression();
            this.state = 4162;
            this.match(GQLParser.COMMA);
            this.state = 4163;
            this.nodeReferenceValueExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listValueExpression(): ListValueExpressionContext {
        let localContext = new ListValueExpressionContext(this.context, this.state);
        this.enterRule(localContext, 926, GQLParser.RULE_listValueExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4165;
            this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listValueFunction(): ListValueFunctionContext {
        let localContext = new ListValueFunctionContext(this.context, this.state);
        this.enterRule(localContext, 928, GQLParser.RULE_listValueFunction);
        try {
            this.state = 4169;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.TRIM:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4167;
                this.trimListFunction();
                }
                break;
            case GQLParser.ELEMENTS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4168;
                this.elementsFunction();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trimListFunction(): TrimListFunctionContext {
        let localContext = new TrimListFunctionContext(this.context, this.state);
        this.enterRule(localContext, 930, GQLParser.RULE_trimListFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4171;
            this.match(GQLParser.TRIM);
            this.state = 4172;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 4173;
            this.listValueExpression();
            this.state = 4174;
            this.match(GQLParser.COMMA);
            this.state = 4175;
            this.numericValueExpression(0);
            this.state = 4176;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elementsFunction(): ElementsFunctionContext {
        let localContext = new ElementsFunctionContext(this.context, this.state);
        this.enterRule(localContext, 932, GQLParser.RULE_elementsFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4178;
            this.match(GQLParser.ELEMENTS);
            this.state = 4179;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 4180;
            this.pathValueExpression();
            this.state = 4181;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listValueConstructor(): ListValueConstructorContext {
        let localContext = new ListValueConstructorContext(this.context, this.state);
        this.enterRule(localContext, 934, GQLParser.RULE_listValueConstructor);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4183;
            this.listValueConstructorByEnumeration();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listValueConstructorByEnumeration(): ListValueConstructorByEnumerationContext {
        let localContext = new ListValueConstructorByEnumerationContext(this.context, this.state);
        this.enterRule(localContext, 936, GQLParser.RULE_listValueConstructorByEnumeration);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4186;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 26 || _la === 102 || _la === 133) {
                {
                this.state = 4185;
                this.listValueTypeName();
                }
            }

            this.state = 4188;
            this.match(GQLParser.LEFT_BRACKET);
            this.state = 4190;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 2)) & ~0x1F) === 0 && ((1 << (_la - 2)) & 3509583847) !== 0) || ((((_la - 40)) & ~0x1F) === 0 && ((1 << (_la - 40)) & 4051278821) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 151045889) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 449167283) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 478578107) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 151000813) !== 0) || _la === 236 || _la === 237 || ((((_la - 277)) & ~0x1F) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1F) === 0 && ((1 << (_la - 309)) & 393215) !== 0) || ((((_la - 369)) & ~0x1F) === 0 && ((1 << (_la - 369)) & 151) !== 0)) {
                {
                this.state = 4189;
                this.listElementList();
                }
            }

            this.state = 4192;
            this.match(GQLParser.RIGHT_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listElementList(): ListElementListContext {
        let localContext = new ListElementListContext(this.context, this.state);
        this.enterRule(localContext, 938, GQLParser.RULE_listElementList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4194;
            this.listElement();
            this.state = 4199;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 361) {
                {
                {
                this.state = 4195;
                this.match(GQLParser.COMMA);
                this.state = 4196;
                this.listElement();
                }
                }
                this.state = 4201;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listElement(): ListElementContext {
        let localContext = new ListElementContext(this.context, this.state);
        this.enterRule(localContext, 940, GQLParser.RULE_listElement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4202;
            this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public recordConstructor(): RecordConstructorContext {
        let localContext = new RecordConstructorContext(this.context, this.state);
        this.enterRule(localContext, 942, GQLParser.RULE_recordConstructor);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4205;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 176) {
                {
                this.state = 4204;
                this.match(GQLParser.RECORD);
                }
            }

            this.state = 4207;
            this.fieldsSpecification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fieldsSpecification(): FieldsSpecificationContext {
        let localContext = new FieldsSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 944, GQLParser.RULE_fieldsSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4209;
            this.match(GQLParser.LEFT_BRACE);
            this.state = 4211;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 4 || _la === 5 || ((((_la - 277)) & ~0x1F) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1F) === 0 && ((1 << (_la - 309)) & 131071) !== 0)) {
                {
                this.state = 4210;
                this.fieldList();
                }
            }

            this.state = 4213;
            this.match(GQLParser.RIGHT_BRACE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fieldList(): FieldListContext {
        let localContext = new FieldListContext(this.context, this.state);
        this.enterRule(localContext, 946, GQLParser.RULE_fieldList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4215;
            this.field();
            this.state = 4220;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 361) {
                {
                {
                this.state = 4216;
                this.match(GQLParser.COMMA);
                this.state = 4217;
                this.field();
                }
                }
                this.state = 4222;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public field(): FieldContext {
        let localContext = new FieldContext(this.context, this.state);
        this.enterRule(localContext, 948, GQLParser.RULE_field);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4223;
            this.fieldName();
            this.state = 4224;
            this.match(GQLParser.COLON);
            this.state = 4225;
            this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public truthValue(): TruthValueContext {
        let localContext = new TruthValueContext(this.context, this.state);
        this.enterRule(localContext, 950, GQLParser.RULE_truthValue);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4227;
            this.match(GQLParser.BOOLEAN_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public numericValueExpression(): NumericValueExpressionContext;
    public numericValueExpression(_p: number): NumericValueExpressionContext;
    public numericValueExpression(_p?: number): NumericValueExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new NumericValueExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 952;
        this.enterRecursionRule(localContext, 952, GQLParser.RULE_numericValueExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4234;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.MINUS_SIGN:
            case GQLParser.PLUS_SIGN:
                {
                this.state = 4230;
                localContext._sign = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 373 || _la === 376)) {
                    localContext._sign = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4231;
                this.numericValueExpression(5);
                }
                break;
            case GQLParser.BOOLEAN_LITERAL:
            case GQLParser.SINGLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.BYTE_STRING_LITERAL:
            case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_INTEGER:
            case GQLParser.UNSIGNED_HEXADECIMAL_INTEGER:
            case GQLParser.UNSIGNED_OCTAL_INTEGER:
            case GQLParser.UNSIGNED_BINARY_INTEGER:
            case GQLParser.ARRAY:
            case GQLParser.AVG:
            case GQLParser.CASE:
            case GQLParser.CAST:
            case GQLParser.COALESCE:
            case GQLParser.COLLECT_LIST:
            case GQLParser.COUNT:
            case GQLParser.DATE:
            case GQLParser.DATETIME:
            case GQLParser.DURATION:
            case GQLParser.ELEMENT_ID:
            case GQLParser.GROUP:
            case GQLParser.LET:
            case GQLParser.LIST:
            case GQLParser.MAX:
            case GQLParser.MIN:
            case GQLParser.NULL_KW:
            case GQLParser.NULLIF:
            case GQLParser.PATH:
            case GQLParser.PERCENTILE_CONT:
            case GQLParser.PERCENTILE_DISC:
            case GQLParser.RECORD:
            case GQLParser.SESSION_USER:
            case GQLParser.STDDEV_POP:
            case GQLParser.STDDEV_SAMP:
            case GQLParser.SUM:
            case GQLParser.TIME:
            case GQLParser.TIMESTAMP:
            case GQLParser.VALUE:
            case GQLParser.ACYCLIC:
            case GQLParser.BINDING:
            case GQLParser.BINDINGS:
            case GQLParser.CONNECTING:
            case GQLParser.DESTINATION:
            case GQLParser.DIFFERENT:
            case GQLParser.DIRECTED:
            case GQLParser.EDGE:
            case GQLParser.EDGES:
            case GQLParser.ELEMENT:
            case GQLParser.ELEMENTS:
            case GQLParser.FIRST:
            case GQLParser.GRAPH:
            case GQLParser.GROUPS:
            case GQLParser.KEEP:
            case GQLParser.LABEL:
            case GQLParser.LABELED:
            case GQLParser.LABELS:
            case GQLParser.LAST:
            case GQLParser.NFC:
            case GQLParser.NFD:
            case GQLParser.NFKC:
            case GQLParser.NFKD:
            case GQLParser.NO:
            case GQLParser.NODE:
            case GQLParser.NORMALIZED:
            case GQLParser.ONLY:
            case GQLParser.ORDINALITY:
            case GQLParser.PROPERTY:
            case GQLParser.READ:
            case GQLParser.RELATIONSHIP:
            case GQLParser.RELATIONSHIPS:
            case GQLParser.REPEATABLE:
            case GQLParser.SHORTEST:
            case GQLParser.SIMPLE:
            case GQLParser.SOURCE:
            case GQLParser.TABLE:
            case GQLParser.TEMP:
            case GQLParser.TO:
            case GQLParser.TRAIL:
            case GQLParser.TRANSACTION:
            case GQLParser.TYPE:
            case GQLParser.UNDIRECTED:
            case GQLParser.VERTEX:
            case GQLParser.WALK:
            case GQLParser.WITHOUT:
            case GQLParser.WRITE:
            case GQLParser.ZONE:
            case GQLParser.REGULAR_IDENTIFIER:
            case GQLParser.GENERAL_PARAMETER_REFERENCE:
            case GQLParser.LEFT_BRACE:
            case GQLParser.LEFT_BRACKET:
            case GQLParser.LEFT_PAREN:
                {
                this.state = 4232;
                this.valueExpressionPrimary(0);
                }
                break;
            case GQLParser.ABS:
            case GQLParser.ACOS:
            case GQLParser.ASIN:
            case GQLParser.ATAN:
            case GQLParser.BYTE_LENGTH:
            case GQLParser.CARDINALITY:
            case GQLParser.CEIL:
            case GQLParser.CEILING:
            case GQLParser.CHAR_LENGTH:
            case GQLParser.CHARACTER_LENGTH:
            case GQLParser.COS:
            case GQLParser.COSH:
            case GQLParser.COT:
            case GQLParser.DEGREES:
            case GQLParser.EXP:
            case GQLParser.FLOOR:
            case GQLParser.LN:
            case GQLParser.LOG_KW:
            case GQLParser.LOG10:
            case GQLParser.MOD:
            case GQLParser.OCTET_LENGTH:
            case GQLParser.PATH_LENGTH:
            case GQLParser.POWER:
            case GQLParser.RADIANS:
            case GQLParser.SIN:
            case GQLParser.SINH:
            case GQLParser.SIZE:
            case GQLParser.SQRT:
            case GQLParser.TAN:
            case GQLParser.TANH:
                {
                this.state = 4233;
                this.numericValueFunction();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 4244;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 478, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 4242;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 477, this.context) ) {
                    case 1:
                        {
                        localContext = new NumericValueExpressionContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, GQLParser.RULE_numericValueExpression);
                        this.state = 4236;
                        if (!(this.precpred(this.context, 4))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 4)");
                        }
                        this.state = 4237;
                        localContext._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 359 || _la === 383)) {
                            localContext._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 4238;
                        this.numericValueExpression(5);
                        }
                        break;
                    case 2:
                        {
                        localContext = new NumericValueExpressionContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, GQLParser.RULE_numericValueExpression);
                        this.state = 4239;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 4240;
                        localContext._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 373 || _la === 376)) {
                            localContext._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 4241;
                        this.numericValueExpression(4);
                        }
                        break;
                    }
                    }
                }
                this.state = 4246;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 478, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public numericValueFunction(): NumericValueFunctionContext {
        let localContext = new NumericValueFunctionContext(this.context, this.state);
        this.enterRule(localContext, 954, GQLParser.RULE_numericValueFunction);
        try {
            this.state = 4260;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.BYTE_LENGTH:
            case GQLParser.CHAR_LENGTH:
            case GQLParser.CHARACTER_LENGTH:
            case GQLParser.OCTET_LENGTH:
            case GQLParser.PATH_LENGTH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4247;
                this.lengthExpression();
                }
                break;
            case GQLParser.CARDINALITY:
            case GQLParser.SIZE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4248;
                this.cardinalityExpression();
                }
                break;
            case GQLParser.ABS:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4249;
                this.absoluteValueExpression();
                }
                break;
            case GQLParser.MOD:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4250;
                this.modulusExpression();
                }
                break;
            case GQLParser.ACOS:
            case GQLParser.ASIN:
            case GQLParser.ATAN:
            case GQLParser.COS:
            case GQLParser.COSH:
            case GQLParser.COT:
            case GQLParser.DEGREES:
            case GQLParser.RADIANS:
            case GQLParser.SIN:
            case GQLParser.SINH:
            case GQLParser.TAN:
            case GQLParser.TANH:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4251;
                this.trigonometricFunction();
                }
                break;
            case GQLParser.LOG_KW:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4252;
                this.generalLogarithmFunction();
                }
                break;
            case GQLParser.LOG10:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4253;
                this.commonLogarithm();
                }
                break;
            case GQLParser.LN:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4254;
                this.naturalLogarithm();
                }
                break;
            case GQLParser.EXP:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4255;
                this.exponentialFunction();
                }
                break;
            case GQLParser.POWER:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4256;
                this.powerFunction();
                }
                break;
            case GQLParser.SQRT:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4257;
                this.squareRoot();
                }
                break;
            case GQLParser.FLOOR:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4258;
                this.floorFunction();
                }
                break;
            case GQLParser.CEIL:
            case GQLParser.CEILING:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 4259;
                this.ceilingFunction();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lengthExpression(): LengthExpressionContext {
        let localContext = new LengthExpressionContext(this.context, this.state);
        this.enterRule(localContext, 956, GQLParser.RULE_lengthExpression);
        try {
            this.state = 4265;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.CHAR_LENGTH:
            case GQLParser.CHARACTER_LENGTH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4262;
                this.charLengthExpression();
                }
                break;
            case GQLParser.BYTE_LENGTH:
            case GQLParser.OCTET_LENGTH:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4263;
                this.byteLengthExpression();
                }
                break;
            case GQLParser.PATH_LENGTH:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4264;
                this.pathLengthExpression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cardinalityExpression(): CardinalityExpressionContext {
        let localContext = new CardinalityExpressionContext(this.context, this.state);
        this.enterRule(localContext, 958, GQLParser.RULE_cardinalityExpression);
        try {
            this.state = 4277;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.CARDINALITY:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4267;
                this.match(GQLParser.CARDINALITY);
                this.state = 4268;
                this.match(GQLParser.LEFT_PAREN);
                this.state = 4269;
                this.cardinalityExpressionArgument();
                this.state = 4270;
                this.match(GQLParser.RIGHT_PAREN);
                }
                break;
            case GQLParser.SIZE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4272;
                this.match(GQLParser.SIZE);
                this.state = 4273;
                this.match(GQLParser.LEFT_PAREN);
                this.state = 4274;
                this.listValueExpression();
                this.state = 4275;
                this.match(GQLParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cardinalityExpressionArgument(): CardinalityExpressionArgumentContext {
        let localContext = new CardinalityExpressionArgumentContext(this.context, this.state);
        this.enterRule(localContext, 960, GQLParser.RULE_cardinalityExpressionArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4279;
            this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public charLengthExpression(): CharLengthExpressionContext {
        let localContext = new CharLengthExpressionContext(this.context, this.state);
        this.enterRule(localContext, 962, GQLParser.RULE_charLengthExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4281;
            _la = this.tokenStream.LA(1);
            if(!(_la === 51 || _la === 52)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4282;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 4283;
            this.characterStringValueExpression();
            this.state = 4284;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public byteLengthExpression(): ByteLengthExpressionContext {
        let localContext = new ByteLengthExpressionContext(this.context, this.state);
        this.enterRule(localContext, 964, GQLParser.RULE_byteLengthExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4286;
            _la = this.tokenStream.LA(1);
            if(!(_la === 42 || _la === 157)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4287;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 4288;
            this.byteStringValueExpression();
            this.state = 4289;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathLengthExpression(): PathLengthExpressionContext {
        let localContext = new PathLengthExpressionContext(this.context, this.state);
        this.enterRule(localContext, 966, GQLParser.RULE_pathLengthExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4291;
            this.match(GQLParser.PATH_LENGTH);
            this.state = 4292;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 4293;
            this.pathValueExpression();
            this.state = 4294;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public absoluteValueExpression(): AbsoluteValueExpressionContext {
        let localContext = new AbsoluteValueExpressionContext(this.context, this.state);
        this.enterRule(localContext, 968, GQLParser.RULE_absoluteValueExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4296;
            this.match(GQLParser.ABS);
            this.state = 4297;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 4298;
            this.valueExpression(0);
            this.state = 4299;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public modulusExpression(): ModulusExpressionContext {
        let localContext = new ModulusExpressionContext(this.context, this.state);
        this.enterRule(localContext, 970, GQLParser.RULE_modulusExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4301;
            this.match(GQLParser.MOD);
            this.state = 4302;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 4303;
            this.numericValueExpressionDividend();
            this.state = 4304;
            this.match(GQLParser.COMMA);
            this.state = 4305;
            this.numericValueExpressionDivisor();
            this.state = 4306;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numericValueExpressionDividend(): NumericValueExpressionDividendContext {
        let localContext = new NumericValueExpressionDividendContext(this.context, this.state);
        this.enterRule(localContext, 972, GQLParser.RULE_numericValueExpressionDividend);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4308;
            this.numericValueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numericValueExpressionDivisor(): NumericValueExpressionDivisorContext {
        let localContext = new NumericValueExpressionDivisorContext(this.context, this.state);
        this.enterRule(localContext, 974, GQLParser.RULE_numericValueExpressionDivisor);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4310;
            this.numericValueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trigonometricFunction(): TrigonometricFunctionContext {
        let localContext = new TrigonometricFunctionContext(this.context, this.state);
        this.enterRule(localContext, 976, GQLParser.RULE_trigonometricFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4312;
            this.trigonometricFunctionName();
            this.state = 4313;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 4314;
            this.numericValueExpression(0);
            this.state = 4315;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trigonometricFunctionName(): TrigonometricFunctionNameContext {
        let localContext = new TrigonometricFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 978, GQLParser.RULE_trigonometricFunctionName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4317;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 21)) & ~0x1F) === 0 && ((1 << (_la - 21)) & 2561) !== 0) || ((((_la - 59)) & ~0x1F) === 0 && ((1 << (_la - 59)) & 65543) !== 0) || ((((_la - 174)) & ~0x1F) === 0 && ((1 << (_la - 174)) & 3222011905) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generalLogarithmFunction(): GeneralLogarithmFunctionContext {
        let localContext = new GeneralLogarithmFunctionContext(this.context, this.state);
        this.enterRule(localContext, 980, GQLParser.RULE_generalLogarithmFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4319;
            this.match(GQLParser.LOG_KW);
            this.state = 4320;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 4321;
            this.generalLogarithmBase();
            this.state = 4322;
            this.match(GQLParser.COMMA);
            this.state = 4323;
            this.generalLogarithmArgument();
            this.state = 4324;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generalLogarithmBase(): GeneralLogarithmBaseContext {
        let localContext = new GeneralLogarithmBaseContext(this.context, this.state);
        this.enterRule(localContext, 982, GQLParser.RULE_generalLogarithmBase);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4326;
            this.numericValueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generalLogarithmArgument(): GeneralLogarithmArgumentContext {
        let localContext = new GeneralLogarithmArgumentContext(this.context, this.state);
        this.enterRule(localContext, 984, GQLParser.RULE_generalLogarithmArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4328;
            this.numericValueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commonLogarithm(): CommonLogarithmContext {
        let localContext = new CommonLogarithmContext(this.context, this.state);
        this.enterRule(localContext, 986, GQLParser.RULE_commonLogarithm);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4330;
            this.match(GQLParser.LOG10);
            this.state = 4331;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 4332;
            this.numericValueExpression(0);
            this.state = 4333;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public naturalLogarithm(): NaturalLogarithmContext {
        let localContext = new NaturalLogarithmContext(this.context, this.state);
        this.enterRule(localContext, 988, GQLParser.RULE_naturalLogarithm);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4335;
            this.match(GQLParser.LN);
            this.state = 4336;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 4337;
            this.numericValueExpression(0);
            this.state = 4338;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exponentialFunction(): ExponentialFunctionContext {
        let localContext = new ExponentialFunctionContext(this.context, this.state);
        this.enterRule(localContext, 990, GQLParser.RULE_exponentialFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4340;
            this.match(GQLParser.EXP);
            this.state = 4341;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 4342;
            this.numericValueExpression(0);
            this.state = 4343;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public powerFunction(): PowerFunctionContext {
        let localContext = new PowerFunctionContext(this.context, this.state);
        this.enterRule(localContext, 992, GQLParser.RULE_powerFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4345;
            this.match(GQLParser.POWER);
            this.state = 4346;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 4347;
            this.numericValueExpressionBase();
            this.state = 4348;
            this.match(GQLParser.COMMA);
            this.state = 4349;
            this.numericValueExpressionExponent();
            this.state = 4350;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numericValueExpressionBase(): NumericValueExpressionBaseContext {
        let localContext = new NumericValueExpressionBaseContext(this.context, this.state);
        this.enterRule(localContext, 994, GQLParser.RULE_numericValueExpressionBase);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4352;
            this.numericValueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numericValueExpressionExponent(): NumericValueExpressionExponentContext {
        let localContext = new NumericValueExpressionExponentContext(this.context, this.state);
        this.enterRule(localContext, 996, GQLParser.RULE_numericValueExpressionExponent);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4354;
            this.numericValueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public squareRoot(): SquareRootContext {
        let localContext = new SquareRootContext(this.context, this.state);
        this.enterRule(localContext, 998, GQLParser.RULE_squareRoot);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4356;
            this.match(GQLParser.SQRT);
            this.state = 4357;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 4358;
            this.numericValueExpression(0);
            this.state = 4359;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public floorFunction(): FloorFunctionContext {
        let localContext = new FloorFunctionContext(this.context, this.state);
        this.enterRule(localContext, 1000, GQLParser.RULE_floorFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4361;
            this.match(GQLParser.FLOOR);
            this.state = 4362;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 4363;
            this.numericValueExpression(0);
            this.state = 4364;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ceilingFunction(): CeilingFunctionContext {
        let localContext = new CeilingFunctionContext(this.context, this.state);
        this.enterRule(localContext, 1002, GQLParser.RULE_ceilingFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4366;
            _la = this.tokenStream.LA(1);
            if(!(_la === 48 || _la === 49)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4367;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 4368;
            this.numericValueExpression(0);
            this.state = 4369;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public characterStringValueExpression(): CharacterStringValueExpressionContext {
        let localContext = new CharacterStringValueExpressionContext(this.context, this.state);
        this.enterRule(localContext, 1004, GQLParser.RULE_characterStringValueExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4371;
            this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public byteStringValueExpression(): ByteStringValueExpressionContext {
        let localContext = new ByteStringValueExpressionContext(this.context, this.state);
        this.enterRule(localContext, 1006, GQLParser.RULE_byteStringValueExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4373;
            this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trimOperands(): TrimOperandsContext {
        let localContext = new TrimOperandsContext(this.context, this.state);
        this.enterRule(localContext, 1008, GQLParser.RULE_trimOperands);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4382;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 484, this.context) ) {
            case 1:
                {
                this.state = 4376;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 39 || _la === 128 || _la === 209) {
                    {
                    this.state = 4375;
                    this.trimSpecification();
                    }
                }

                this.state = 4379;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 2)) & ~0x1F) === 0 && ((1 << (_la - 2)) & 3509583847) !== 0) || ((((_la - 40)) & ~0x1F) === 0 && ((1 << (_la - 40)) & 4051278821) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 151045889) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 449167283) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 478578107) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 151000813) !== 0) || _la === 236 || _la === 237 || ((((_la - 277)) & ~0x1F) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1F) === 0 && ((1 << (_la - 309)) & 393215) !== 0) || ((((_la - 369)) & ~0x1F) === 0 && ((1 << (_la - 369)) & 151) !== 0)) {
                    {
                    this.state = 4378;
                    this.trimCharacterOrByteString();
                    }
                }

                this.state = 4381;
                this.match(GQLParser.FROM);
                }
                break;
            }
            this.state = 4384;
            this.trimCharacterOrByteStringSource();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trimCharacterOrByteStringSource(): TrimCharacterOrByteStringSourceContext {
        let localContext = new TrimCharacterOrByteStringSourceContext(this.context, this.state);
        this.enterRule(localContext, 1010, GQLParser.RULE_trimCharacterOrByteStringSource);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4386;
            this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trimSpecification(): TrimSpecificationContext {
        let localContext = new TrimSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 1012, GQLParser.RULE_trimSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4388;
            _la = this.tokenStream.LA(1);
            if(!(_la === 39 || _la === 128 || _la === 209)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trimCharacterOrByteString(): TrimCharacterOrByteStringContext {
        let localContext = new TrimCharacterOrByteStringContext(this.context, this.state);
        this.enterRule(localContext, 1014, GQLParser.RULE_trimCharacterOrByteString);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4390;
            this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public normalForm(): NormalFormContext {
        let localContext = new NormalFormContext(this.context, this.state);
        this.enterRule(localContext, 1016, GQLParser.RULE_normalForm);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4392;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 296)) & ~0x1F) === 0 && ((1 << (_la - 296)) & 15) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringLength(): StringLengthContext {
        let localContext = new StringLengthContext(this.context, this.state);
        this.enterRule(localContext, 1018, GQLParser.RULE_stringLength);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4394;
            this.numericValueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public datetimeValueExpression(): DatetimeValueExpressionContext {
        let localContext = new DatetimeValueExpressionContext(this.context, this.state);
        this.enterRule(localContext, 1020, GQLParser.RULE_datetimeValueExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4396;
            this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public datetimeValueFunction(): DatetimeValueFunctionContext {
        let localContext = new DatetimeValueFunctionContext(this.context, this.state);
        this.enterRule(localContext, 1022, GQLParser.RULE_datetimeValueFunction);
        try {
            this.state = 4403;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.CURRENT_DATE:
            case GQLParser.DATE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4398;
                this.dateFunction();
                }
                break;
            case GQLParser.CURRENT_TIME:
            case GQLParser.ZONED_TIME:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4399;
                this.timeFunction();
                }
                break;
            case GQLParser.CURRENT_TIMESTAMP:
            case GQLParser.ZONED_DATETIME:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4400;
                this.datetimeFunction();
                }
                break;
            case GQLParser.LOCAL_TIME:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4401;
                this.localtimeFunction();
                }
                break;
            case GQLParser.LOCAL_DATETIME:
            case GQLParser.LOCAL_TIMESTAMP:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4402;
                this.localdatetimeFunction();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dateFunction(): DateFunctionContext {
        let localContext = new DateFunctionContext(this.context, this.state);
        this.enterRule(localContext, 1024, GQLParser.RULE_dateFunction);
        let _la: number;
        try {
            this.state = 4412;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.CURRENT_DATE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4405;
                this.match(GQLParser.CURRENT_DATE);
                }
                break;
            case GQLParser.DATE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4406;
                this.match(GQLParser.DATE);
                this.state = 4407;
                this.match(GQLParser.LEFT_PAREN);
                this.state = 4409;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 3 || _la === 4 || _la === 176 || _la === 369) {
                    {
                    this.state = 4408;
                    this.dateFunctionParameters();
                    }
                }

                this.state = 4411;
                this.match(GQLParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timeFunction(): TimeFunctionContext {
        let localContext = new TimeFunctionContext(this.context, this.state);
        this.enterRule(localContext, 1026, GQLParser.RULE_timeFunction);
        let _la: number;
        try {
            this.state = 4421;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.CURRENT_TIME:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4414;
                this.match(GQLParser.CURRENT_TIME);
                }
                break;
            case GQLParser.ZONED_TIME:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4415;
                this.match(GQLParser.ZONED_TIME);
                this.state = 4416;
                this.match(GQLParser.LEFT_PAREN);
                this.state = 4418;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 3 || _la === 4 || _la === 176 || _la === 369) {
                    {
                    this.state = 4417;
                    this.timeFunctionParameters();
                    }
                }

                this.state = 4420;
                this.match(GQLParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public localtimeFunction(): LocaltimeFunctionContext {
        let localContext = new LocaltimeFunctionContext(this.context, this.state);
        this.enterRule(localContext, 1028, GQLParser.RULE_localtimeFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4423;
            this.match(GQLParser.LOCAL_TIME);
            this.state = 4429;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 491, this.context) ) {
            case 1:
                {
                this.state = 4424;
                this.match(GQLParser.LEFT_PAREN);
                this.state = 4426;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 3 || _la === 4 || _la === 176 || _la === 369) {
                    {
                    this.state = 4425;
                    this.timeFunctionParameters();
                    }
                }

                this.state = 4428;
                this.match(GQLParser.RIGHT_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public datetimeFunction(): DatetimeFunctionContext {
        let localContext = new DatetimeFunctionContext(this.context, this.state);
        this.enterRule(localContext, 1030, GQLParser.RULE_datetimeFunction);
        let _la: number;
        try {
            this.state = 4438;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.CURRENT_TIMESTAMP:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4431;
                this.match(GQLParser.CURRENT_TIMESTAMP);
                }
                break;
            case GQLParser.ZONED_DATETIME:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4432;
                this.match(GQLParser.ZONED_DATETIME);
                this.state = 4433;
                this.match(GQLParser.LEFT_PAREN);
                this.state = 4435;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 3 || _la === 4 || _la === 176 || _la === 369) {
                    {
                    this.state = 4434;
                    this.datetimeFunctionParameters();
                    }
                }

                this.state = 4437;
                this.match(GQLParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public localdatetimeFunction(): LocaldatetimeFunctionContext {
        let localContext = new LocaldatetimeFunctionContext(this.context, this.state);
        this.enterRule(localContext, 1032, GQLParser.RULE_localdatetimeFunction);
        let _la: number;
        try {
            this.state = 4447;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.LOCAL_TIMESTAMP:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4440;
                this.match(GQLParser.LOCAL_TIMESTAMP);
                }
                break;
            case GQLParser.LOCAL_DATETIME:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4441;
                this.match(GQLParser.LOCAL_DATETIME);
                this.state = 4442;
                this.match(GQLParser.LEFT_PAREN);
                this.state = 4444;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 3 || _la === 4 || _la === 176 || _la === 369) {
                    {
                    this.state = 4443;
                    this.datetimeFunctionParameters();
                    }
                }

                this.state = 4446;
                this.match(GQLParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dateFunctionParameters(): DateFunctionParametersContext {
        let localContext = new DateFunctionParametersContext(this.context, this.state);
        this.enterRule(localContext, 1034, GQLParser.RULE_dateFunctionParameters);
        try {
            this.state = 4451;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.SINGLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4449;
                this.dateString();
                }
                break;
            case GQLParser.RECORD:
            case GQLParser.LEFT_BRACE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4450;
                this.recordConstructor();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timeFunctionParameters(): TimeFunctionParametersContext {
        let localContext = new TimeFunctionParametersContext(this.context, this.state);
        this.enterRule(localContext, 1036, GQLParser.RULE_timeFunctionParameters);
        try {
            this.state = 4455;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.SINGLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4453;
                this.timeString();
                }
                break;
            case GQLParser.RECORD:
            case GQLParser.LEFT_BRACE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4454;
                this.recordConstructor();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public datetimeFunctionParameters(): DatetimeFunctionParametersContext {
        let localContext = new DatetimeFunctionParametersContext(this.context, this.state);
        this.enterRule(localContext, 1038, GQLParser.RULE_datetimeFunctionParameters);
        try {
            this.state = 4459;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.SINGLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4457;
                this.datetimeString();
                }
                break;
            case GQLParser.RECORD:
            case GQLParser.LEFT_BRACE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4458;
                this.recordConstructor();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public durationValueExpression(): DurationValueExpressionContext {
        let localContext = new DurationValueExpressionContext(this.context, this.state);
        this.enterRule(localContext, 1040, GQLParser.RULE_durationValueExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4461;
            this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public datetimeSubtraction(): DatetimeSubtractionContext {
        let localContext = new DatetimeSubtractionContext(this.context, this.state);
        this.enterRule(localContext, 1042, GQLParser.RULE_datetimeSubtraction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4463;
            this.match(GQLParser.DURATION_BETWEEN);
            this.state = 4464;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 4465;
            this.datetimeSubtractionParameters();
            this.state = 4466;
            this.match(GQLParser.RIGHT_PAREN);
            this.state = 4468;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 499, this.context) ) {
            case 1:
                {
                this.state = 4467;
                this.temporalDurationQualifier();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public datetimeSubtractionParameters(): DatetimeSubtractionParametersContext {
        let localContext = new DatetimeSubtractionParametersContext(this.context, this.state);
        this.enterRule(localContext, 1044, GQLParser.RULE_datetimeSubtractionParameters);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4470;
            this.datetimeValueExpression1();
            this.state = 4471;
            this.match(GQLParser.COMMA);
            this.state = 4472;
            this.datetimeValueExpression2();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public datetimeValueExpression1(): DatetimeValueExpression1Context {
        let localContext = new DatetimeValueExpression1Context(this.context, this.state);
        this.enterRule(localContext, 1046, GQLParser.RULE_datetimeValueExpression1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4474;
            this.datetimeValueExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public datetimeValueExpression2(): DatetimeValueExpression2Context {
        let localContext = new DatetimeValueExpression2Context(this.context, this.state);
        this.enterRule(localContext, 1048, GQLParser.RULE_datetimeValueExpression2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4476;
            this.datetimeValueExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public durationValueFunction(): DurationValueFunctionContext {
        let localContext = new DurationValueFunctionContext(this.context, this.state);
        this.enterRule(localContext, 1050, GQLParser.RULE_durationValueFunction);
        try {
            this.state = 4480;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.DURATION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4478;
                this.durationFunction();
                }
                break;
            case GQLParser.ABS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4479;
                this.absoluteValueExpression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public durationFunction(): DurationFunctionContext {
        let localContext = new DurationFunctionContext(this.context, this.state);
        this.enterRule(localContext, 1052, GQLParser.RULE_durationFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4482;
            this.match(GQLParser.DURATION);
            this.state = 4483;
            this.match(GQLParser.LEFT_PAREN);
            this.state = 4484;
            this.durationFunctionParameters();
            this.state = 4485;
            this.match(GQLParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public durationFunctionParameters(): DurationFunctionParametersContext {
        let localContext = new DurationFunctionParametersContext(this.context, this.state);
        this.enterRule(localContext, 1054, GQLParser.RULE_durationFunctionParameters);
        try {
            this.state = 4489;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.SINGLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4487;
                this.durationString();
                }
                break;
            case GQLParser.RECORD:
            case GQLParser.LEFT_BRACE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4488;
                this.recordConstructor();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public objectName(): ObjectNameContext {
        let localContext = new ObjectNameContext(this.context, this.state);
        this.enterRule(localContext, 1056, GQLParser.RULE_objectName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4491;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public objectNameOrBindingVariable(): ObjectNameOrBindingVariableContext {
        let localContext = new ObjectNameOrBindingVariableContext(this.context, this.state);
        this.enterRule(localContext, 1058, GQLParser.RULE_objectNameOrBindingVariable);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4493;
            this.regularIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public directoryName(): DirectoryNameContext {
        let localContext = new DirectoryNameContext(this.context, this.state);
        this.enterRule(localContext, 1060, GQLParser.RULE_directoryName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4495;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schemaName(): SchemaNameContext {
        let localContext = new SchemaNameContext(this.context, this.state);
        this.enterRule(localContext, 1062, GQLParser.RULE_schemaName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4497;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public graphName(): GraphNameContext {
        let localContext = new GraphNameContext(this.context, this.state);
        this.enterRule(localContext, 1064, GQLParser.RULE_graphName);
        try {
            this.state = 4501;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.ACYCLIC:
            case GQLParser.BINDING:
            case GQLParser.BINDINGS:
            case GQLParser.CONNECTING:
            case GQLParser.DESTINATION:
            case GQLParser.DIFFERENT:
            case GQLParser.DIRECTED:
            case GQLParser.EDGE:
            case GQLParser.EDGES:
            case GQLParser.ELEMENT:
            case GQLParser.ELEMENTS:
            case GQLParser.FIRST:
            case GQLParser.GRAPH:
            case GQLParser.GROUPS:
            case GQLParser.KEEP:
            case GQLParser.LABEL:
            case GQLParser.LABELED:
            case GQLParser.LABELS:
            case GQLParser.LAST:
            case GQLParser.NFC:
            case GQLParser.NFD:
            case GQLParser.NFKC:
            case GQLParser.NFKD:
            case GQLParser.NO:
            case GQLParser.NODE:
            case GQLParser.NORMALIZED:
            case GQLParser.ONLY:
            case GQLParser.ORDINALITY:
            case GQLParser.PROPERTY:
            case GQLParser.READ:
            case GQLParser.RELATIONSHIP:
            case GQLParser.RELATIONSHIPS:
            case GQLParser.REPEATABLE:
            case GQLParser.SHORTEST:
            case GQLParser.SIMPLE:
            case GQLParser.SOURCE:
            case GQLParser.TABLE:
            case GQLParser.TEMP:
            case GQLParser.TO:
            case GQLParser.TRAIL:
            case GQLParser.TRANSACTION:
            case GQLParser.TYPE:
            case GQLParser.UNDIRECTED:
            case GQLParser.VERTEX:
            case GQLParser.WALK:
            case GQLParser.WITHOUT:
            case GQLParser.WRITE:
            case GQLParser.ZONE:
            case GQLParser.REGULAR_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4499;
                this.regularIdentifier();
                }
                break;
            case GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.ACCENT_QUOTED_CHARACTER_SEQUENCE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4500;
                this.delimitedGraphName();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public delimitedGraphName(): DelimitedGraphNameContext {
        let localContext = new DelimitedGraphNameContext(this.context, this.state);
        this.enterRule(localContext, 1066, GQLParser.RULE_delimitedGraphName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4503;
            _la = this.tokenStream.LA(1);
            if(!(_la === 4 || _la === 5)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public graphTypeName(): GraphTypeNameContext {
        let localContext = new GraphTypeNameContext(this.context, this.state);
        this.enterRule(localContext, 1068, GQLParser.RULE_graphTypeName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4505;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nodeTypeName(): NodeTypeNameContext {
        let localContext = new NodeTypeNameContext(this.context, this.state);
        this.enterRule(localContext, 1070, GQLParser.RULE_nodeTypeName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4507;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public edgeTypeName(): EdgeTypeNameContext {
        let localContext = new EdgeTypeNameContext(this.context, this.state);
        this.enterRule(localContext, 1072, GQLParser.RULE_edgeTypeName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4509;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bindingTableName(): BindingTableNameContext {
        let localContext = new BindingTableNameContext(this.context, this.state);
        this.enterRule(localContext, 1074, GQLParser.RULE_bindingTableName);
        try {
            this.state = 4513;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.ACYCLIC:
            case GQLParser.BINDING:
            case GQLParser.BINDINGS:
            case GQLParser.CONNECTING:
            case GQLParser.DESTINATION:
            case GQLParser.DIFFERENT:
            case GQLParser.DIRECTED:
            case GQLParser.EDGE:
            case GQLParser.EDGES:
            case GQLParser.ELEMENT:
            case GQLParser.ELEMENTS:
            case GQLParser.FIRST:
            case GQLParser.GRAPH:
            case GQLParser.GROUPS:
            case GQLParser.KEEP:
            case GQLParser.LABEL:
            case GQLParser.LABELED:
            case GQLParser.LABELS:
            case GQLParser.LAST:
            case GQLParser.NFC:
            case GQLParser.NFD:
            case GQLParser.NFKC:
            case GQLParser.NFKD:
            case GQLParser.NO:
            case GQLParser.NODE:
            case GQLParser.NORMALIZED:
            case GQLParser.ONLY:
            case GQLParser.ORDINALITY:
            case GQLParser.PROPERTY:
            case GQLParser.READ:
            case GQLParser.RELATIONSHIP:
            case GQLParser.RELATIONSHIPS:
            case GQLParser.REPEATABLE:
            case GQLParser.SHORTEST:
            case GQLParser.SIMPLE:
            case GQLParser.SOURCE:
            case GQLParser.TABLE:
            case GQLParser.TEMP:
            case GQLParser.TO:
            case GQLParser.TRAIL:
            case GQLParser.TRANSACTION:
            case GQLParser.TYPE:
            case GQLParser.UNDIRECTED:
            case GQLParser.VERTEX:
            case GQLParser.WALK:
            case GQLParser.WITHOUT:
            case GQLParser.WRITE:
            case GQLParser.ZONE:
            case GQLParser.REGULAR_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4511;
                this.regularIdentifier();
                }
                break;
            case GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.ACCENT_QUOTED_CHARACTER_SEQUENCE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4512;
                this.delimitedBindingTableName();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public delimitedBindingTableName(): DelimitedBindingTableNameContext {
        let localContext = new DelimitedBindingTableNameContext(this.context, this.state);
        this.enterRule(localContext, 1076, GQLParser.RULE_delimitedBindingTableName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4515;
            _la = this.tokenStream.LA(1);
            if(!(_la === 4 || _la === 5)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedureName(): ProcedureNameContext {
        let localContext = new ProcedureNameContext(this.context, this.state);
        this.enterRule(localContext, 1078, GQLParser.RULE_procedureName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4517;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public labelName(): LabelNameContext {
        let localContext = new LabelNameContext(this.context, this.state);
        this.enterRule(localContext, 1080, GQLParser.RULE_labelName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4519;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyName(): PropertyNameContext {
        let localContext = new PropertyNameContext(this.context, this.state);
        this.enterRule(localContext, 1082, GQLParser.RULE_propertyName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4521;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fieldName(): FieldNameContext {
        let localContext = new FieldNameContext(this.context, this.state);
        this.enterRule(localContext, 1084, GQLParser.RULE_fieldName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4523;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elementVariable(): ElementVariableContext {
        let localContext = new ElementVariableContext(this.context, this.state);
        this.enterRule(localContext, 1086, GQLParser.RULE_elementVariable);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4525;
            this.bindingVariable();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathVariable(): PathVariableContext {
        let localContext = new PathVariableContext(this.context, this.state);
        this.enterRule(localContext, 1088, GQLParser.RULE_pathVariable);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4527;
            this.bindingVariable();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subpathVariable(): SubpathVariableContext {
        let localContext = new SubpathVariableContext(this.context, this.state);
        this.enterRule(localContext, 1090, GQLParser.RULE_subpathVariable);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4529;
            this.regularIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bindingVariable(): BindingVariableContext {
        let localContext = new BindingVariableContext(this.context, this.state);
        this.enterRule(localContext, 1092, GQLParser.RULE_bindingVariable);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4531;
            this.regularIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsignedLiteral(): UnsignedLiteralContext {
        let localContext = new UnsignedLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1094, GQLParser.RULE_unsignedLiteral);
        try {
            this.state = 4535;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_INTEGER:
            case GQLParser.UNSIGNED_HEXADECIMAL_INTEGER:
            case GQLParser.UNSIGNED_OCTAL_INTEGER:
            case GQLParser.UNSIGNED_BINARY_INTEGER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4533;
                this.unsignedNumericLiteral();
                }
                break;
            case GQLParser.BOOLEAN_LITERAL:
            case GQLParser.SINGLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.BYTE_STRING_LITERAL:
            case GQLParser.ARRAY:
            case GQLParser.DATE:
            case GQLParser.DATETIME:
            case GQLParser.DURATION:
            case GQLParser.GROUP:
            case GQLParser.LIST:
            case GQLParser.NULL_KW:
            case GQLParser.RECORD:
            case GQLParser.TIME:
            case GQLParser.TIMESTAMP:
            case GQLParser.LEFT_BRACE:
            case GQLParser.LEFT_BRACKET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4534;
                this.generalLiteral();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generalLiteral(): GeneralLiteralContext {
        let localContext = new GeneralLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1096, GQLParser.RULE_generalLiteral);
        try {
            this.state = 4545;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.BOOLEAN_LITERAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4537;
                this.match(GQLParser.BOOLEAN_LITERAL);
                }
                break;
            case GQLParser.SINGLE_QUOTED_CHARACTER_SEQUENCE:
            case GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4538;
                this.characterStringLiteral();
                }
                break;
            case GQLParser.BYTE_STRING_LITERAL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4539;
                this.match(GQLParser.BYTE_STRING_LITERAL);
                }
                break;
            case GQLParser.DATE:
            case GQLParser.DATETIME:
            case GQLParser.TIME:
            case GQLParser.TIMESTAMP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4540;
                this.temporalLiteral();
                }
                break;
            case GQLParser.DURATION:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4541;
                this.durationLiteral();
                }
                break;
            case GQLParser.NULL_KW:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4542;
                this.nullLiteral();
                }
                break;
            case GQLParser.ARRAY:
            case GQLParser.GROUP:
            case GQLParser.LIST:
            case GQLParser.LEFT_BRACKET:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4543;
                this.listLiteral();
                }
                break;
            case GQLParser.RECORD:
            case GQLParser.LEFT_BRACE:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4544;
                this.recordLiteral();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public temporalLiteral(): TemporalLiteralContext {
        let localContext = new TemporalLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1098, GQLParser.RULE_temporalLiteral);
        try {
            this.state = 4550;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.DATE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4547;
                this.dateLiteral();
                }
                break;
            case GQLParser.TIME:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4548;
                this.timeLiteral();
                }
                break;
            case GQLParser.DATETIME:
            case GQLParser.TIMESTAMP:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4549;
                this.datetimeLiteral();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dateLiteral(): DateLiteralContext {
        let localContext = new DateLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1100, GQLParser.RULE_dateLiteral);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4552;
            this.match(GQLParser.DATE);
            this.state = 4553;
            this.dateString();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timeLiteral(): TimeLiteralContext {
        let localContext = new TimeLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1102, GQLParser.RULE_timeLiteral);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4555;
            this.match(GQLParser.TIME);
            this.state = 4556;
            this.timeString();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public datetimeLiteral(): DatetimeLiteralContext {
        let localContext = new DatetimeLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1104, GQLParser.RULE_datetimeLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4558;
            _la = this.tokenStream.LA(1);
            if(!(_la === 71 || _la === 208)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4559;
            this.datetimeString();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listLiteral(): ListLiteralContext {
        let localContext = new ListLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1106, GQLParser.RULE_listLiteral);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4561;
            this.listValueConstructorByEnumeration();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public recordLiteral(): RecordLiteralContext {
        let localContext = new RecordLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1108, GQLParser.RULE_recordLiteral);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4563;
            this.recordConstructor();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 1110, GQLParser.RULE_identifier);
        try {
            this.state = 4568;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.ACYCLIC:
            case GQLParser.BINDING:
            case GQLParser.BINDINGS:
            case GQLParser.CONNECTING:
            case GQLParser.DESTINATION:
            case GQLParser.DIFFERENT:
            case GQLParser.DIRECTED:
            case GQLParser.EDGE:
            case GQLParser.EDGES:
            case GQLParser.ELEMENT:
            case GQLParser.ELEMENTS:
            case GQLParser.FIRST:
            case GQLParser.GRAPH:
            case GQLParser.GROUPS:
            case GQLParser.KEEP:
            case GQLParser.LABEL:
            case GQLParser.LABELED:
            case GQLParser.LABELS:
            case GQLParser.LAST:
            case GQLParser.NFC:
            case GQLParser.NFD:
            case GQLParser.NFKC:
            case GQLParser.NFKD:
            case GQLParser.NO:
            case GQLParser.NODE:
            case GQLParser.NORMALIZED:
            case GQLParser.ONLY:
            case GQLParser.ORDINALITY:
            case GQLParser.PROPERTY:
            case GQLParser.READ:
            case GQLParser.RELATIONSHIP:
            case GQLParser.RELATIONSHIPS:
            case GQLParser.REPEATABLE:
            case GQLParser.SHORTEST:
            case GQLParser.SIMPLE:
            case GQLParser.SOURCE:
            case GQLParser.TABLE:
            case GQLParser.TEMP:
            case GQLParser.TO:
            case GQLParser.TRAIL:
            case GQLParser.TRANSACTION:
            case GQLParser.TYPE:
            case GQLParser.UNDIRECTED:
            case GQLParser.VERTEX:
            case GQLParser.WALK:
            case GQLParser.WITHOUT:
            case GQLParser.WRITE:
            case GQLParser.ZONE:
            case GQLParser.REGULAR_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4565;
                this.regularIdentifier();
                }
                break;
            case GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4566;
                this.match(GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE);
                }
                break;
            case GQLParser.ACCENT_QUOTED_CHARACTER_SEQUENCE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4567;
                this.match(GQLParser.ACCENT_QUOTED_CHARACTER_SEQUENCE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public regularIdentifier(): RegularIdentifierContext {
        let localContext = new RegularIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 1112, GQLParser.RULE_regularIdentifier);
        try {
            this.state = 4572;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.REGULAR_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4570;
                this.match(GQLParser.REGULAR_IDENTIFIER);
                }
                break;
            case GQLParser.ACYCLIC:
            case GQLParser.BINDING:
            case GQLParser.BINDINGS:
            case GQLParser.CONNECTING:
            case GQLParser.DESTINATION:
            case GQLParser.DIFFERENT:
            case GQLParser.DIRECTED:
            case GQLParser.EDGE:
            case GQLParser.EDGES:
            case GQLParser.ELEMENT:
            case GQLParser.ELEMENTS:
            case GQLParser.FIRST:
            case GQLParser.GRAPH:
            case GQLParser.GROUPS:
            case GQLParser.KEEP:
            case GQLParser.LABEL:
            case GQLParser.LABELED:
            case GQLParser.LABELS:
            case GQLParser.LAST:
            case GQLParser.NFC:
            case GQLParser.NFD:
            case GQLParser.NFKC:
            case GQLParser.NFKD:
            case GQLParser.NO:
            case GQLParser.NODE:
            case GQLParser.NORMALIZED:
            case GQLParser.ONLY:
            case GQLParser.ORDINALITY:
            case GQLParser.PROPERTY:
            case GQLParser.READ:
            case GQLParser.RELATIONSHIP:
            case GQLParser.RELATIONSHIPS:
            case GQLParser.REPEATABLE:
            case GQLParser.SHORTEST:
            case GQLParser.SIMPLE:
            case GQLParser.SOURCE:
            case GQLParser.TABLE:
            case GQLParser.TEMP:
            case GQLParser.TO:
            case GQLParser.TRAIL:
            case GQLParser.TRANSACTION:
            case GQLParser.TYPE:
            case GQLParser.UNDIRECTED:
            case GQLParser.VERTEX:
            case GQLParser.WALK:
            case GQLParser.WITHOUT:
            case GQLParser.WRITE:
            case GQLParser.ZONE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4571;
                this.nonReservedWords();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timeZoneString(): TimeZoneStringContext {
        let localContext = new TimeZoneStringContext(this.context, this.state);
        this.enterRule(localContext, 1114, GQLParser.RULE_timeZoneString);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4574;
            this.characterStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public characterStringLiteral(): CharacterStringLiteralContext {
        let localContext = new CharacterStringLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1116, GQLParser.RULE_characterStringLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4576;
            _la = this.tokenStream.LA(1);
            if(!(_la === 3 || _la === 4)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsignedNumericLiteral(): UnsignedNumericLiteralContext {
        let localContext = new UnsignedNumericLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1118, GQLParser.RULE_unsignedNumericLiteral);
        try {
            this.state = 4580;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_INTEGER:
            case GQLParser.UNSIGNED_HEXADECIMAL_INTEGER:
            case GQLParser.UNSIGNED_OCTAL_INTEGER:
            case GQLParser.UNSIGNED_BINARY_INTEGER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4578;
                this.exactNumericLiteral();
                }
                break;
            case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
            case GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4579;
                this.approximateNumericLiteral();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exactNumericLiteral(): ExactNumericLiteralContext {
        let localContext = new ExactNumericLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1120, GQLParser.RULE_exactNumericLiteral);
        try {
            this.state = 4587;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4582;
                this.match(GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX);
                }
                break;
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4583;
                this.match(GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX);
                }
                break;
            case GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4584;
                this.match(GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX);
                }
                break;
            case GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4585;
                this.match(GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX);
                }
                break;
            case GQLParser.UNSIGNED_DECIMAL_INTEGER:
            case GQLParser.UNSIGNED_HEXADECIMAL_INTEGER:
            case GQLParser.UNSIGNED_OCTAL_INTEGER:
            case GQLParser.UNSIGNED_BINARY_INTEGER:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4586;
                this.unsignedInteger();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public approximateNumericLiteral(): ApproximateNumericLiteralContext {
        let localContext = new ApproximateNumericLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1122, GQLParser.RULE_approximateNumericLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4589;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 42496) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsignedInteger(): UnsignedIntegerContext {
        let localContext = new UnsignedIntegerContext(this.context, this.state);
        this.enterRule(localContext, 1124, GQLParser.RULE_unsignedInteger);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4591;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 983040) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsignedDecimalInteger(): UnsignedDecimalIntegerContext {
        let localContext = new UnsignedDecimalIntegerContext(this.context, this.state);
        this.enterRule(localContext, 1126, GQLParser.RULE_unsignedDecimalInteger);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4593;
            this.match(GQLParser.UNSIGNED_DECIMAL_INTEGER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nullLiteral(): NullLiteralContext {
        let localContext = new NullLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1128, GQLParser.RULE_nullLiteral);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4595;
            this.match(GQLParser.NULL_KW);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dateString(): DateStringContext {
        let localContext = new DateStringContext(this.context, this.state);
        this.enterRule(localContext, 1130, GQLParser.RULE_dateString);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4597;
            this.characterStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timeString(): TimeStringContext {
        let localContext = new TimeStringContext(this.context, this.state);
        this.enterRule(localContext, 1132, GQLParser.RULE_timeString);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4599;
            this.characterStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public datetimeString(): DatetimeStringContext {
        let localContext = new DatetimeStringContext(this.context, this.state);
        this.enterRule(localContext, 1134, GQLParser.RULE_datetimeString);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4601;
            this.characterStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public durationLiteral(): DurationLiteralContext {
        let localContext = new DurationLiteralContext(this.context, this.state);
        this.enterRule(localContext, 1136, GQLParser.RULE_durationLiteral);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4603;
            this.match(GQLParser.DURATION);
            this.state = 4604;
            this.durationString();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public durationString(): DurationStringContext {
        let localContext = new DurationStringContext(this.context, this.state);
        this.enterRule(localContext, 1138, GQLParser.RULE_durationString);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4606;
            this.characterStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nodeSynonym(): NodeSynonymContext {
        let localContext = new NodeSynonymContext(this.context, this.state);
        this.enterRule(localContext, 1140, GQLParser.RULE_nodeSynonym);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4608;
            _la = this.tokenStream.LA(1);
            if(!(_la === 301 || _la === 320)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public edgesSynonym(): EdgesSynonymContext {
        let localContext = new EdgesSynonymContext(this.context, this.state);
        this.enterRule(localContext, 1142, GQLParser.RULE_edgesSynonym);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4610;
            _la = this.tokenStream.LA(1);
            if(!(_la === 285 || _la === 308)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public edgeSynonym(): EdgeSynonymContext {
        let localContext = new EdgeSynonymContext(this.context, this.state);
        this.enterRule(localContext, 1144, GQLParser.RULE_edgeSynonym);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4612;
            _la = this.tokenStream.LA(1);
            if(!(_la === 284 || _la === 307)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonReservedWords(): NonReservedWordsContext {
        let localContext = new NonReservedWordsContext(this.context, this.state);
        this.enterRule(localContext, 1146, GQLParser.RULE_nonReservedWords);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4614;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 277)) & ~0x1F) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1F) === 0 && ((1 << (_la - 309)) & 65535) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.ParserRuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 92:
            return this.compositeQueryExpression_sempred(localContext as CompositeQueryExpressionContext, predIndex);
        case 214:
            return this.labelExpression_sempred(localContext as LabelExpressionContext, predIndex);
        case 233:
            return this.simplifiedTerm_sempred(localContext as SimplifiedTermContext, predIndex);
        case 234:
            return this.simplifiedFactorLow_sempred(localContext as SimplifiedFactorLowContext, predIndex);
        case 337:
            return this.valueType_sempred(localContext as ValueTypeContext, predIndex);
        case 409:
            return this.valueExpression_sempred(localContext as ValueExpressionContext, predIndex);
        case 421:
            return this.valueExpressionPrimary_sempred(localContext as ValueExpressionPrimaryContext, predIndex);
        case 476:
            return this.numericValueExpression_sempred(localContext as NumericValueExpressionContext, predIndex);
        }
        return true;
    }
    private compositeQueryExpression_sempred(localContext: CompositeQueryExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return this.precpred(this.context, 2);
        }
        return true;
    }
    private labelExpression_sempred(localContext: LabelExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 1:
            return this.precpred(this.context, 5);
        case 2:
            return this.precpred(this.context, 4);
        }
        return true;
    }
    private simplifiedTerm_sempred(localContext: SimplifiedTermContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 3:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private simplifiedFactorLow_sempred(localContext: SimplifiedFactorLowContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 4:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private valueType_sempred(localContext: ValueTypeContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 5:
            return this.precpred(this.context, 1);
        case 6:
            return this.precpred(this.context, 7);
        }
        return true;
    }
    private valueExpression_sempred(localContext: ValueExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 7:
            return this.precpred(this.context, 14);
        case 8:
            return this.precpred(this.context, 13);
        case 9:
            return this.precpred(this.context, 12);
        case 10:
            return this.precpred(this.context, 11);
        case 11:
            return this.precpred(this.context, 6);
        case 12:
            return this.precpred(this.context, 5);
        case 13:
            return this.precpred(this.context, 9);
        case 14:
            return this.precpred(this.context, 7);
        }
        return true;
    }
    private valueExpressionPrimary_sempred(localContext: ValueExpressionPrimaryContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 15:
            return this.precpred(this.context, 7);
        }
        return true;
    }
    private numericValueExpression_sempred(localContext: NumericValueExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 16:
            return this.precpred(this.context, 4);
        case 17:
            return this.precpred(this.context, 3);
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,391,4617,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,
        7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
        2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
        7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,
        2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
        7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,
        2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,
        7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,
        2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,
        7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,7,400,
        2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,2,406,
        7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
        2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,
        7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
        2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,
        7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,
        2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,
        7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,
        2,445,7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,2,450,
        7,450,2,451,7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,7,455,
        2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,2,460,7,460,2,461,
        7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,2,466,7,466,
        2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,2,472,
        7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,7,477,
        2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,2,483,
        7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,
        2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,
        7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,
        2,500,7,500,2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,
        7,505,2,506,7,506,2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,
        2,511,7,511,2,512,7,512,2,513,7,513,2,514,7,514,2,515,7,515,2,516,
        7,516,2,517,7,517,2,518,7,518,2,519,7,519,2,520,7,520,2,521,7,521,
        2,522,7,522,2,523,7,523,2,524,7,524,2,525,7,525,2,526,7,526,2,527,
        7,527,2,528,7,528,2,529,7,529,2,530,7,530,2,531,7,531,2,532,7,532,
        2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,2,537,7,537,2,538,
        7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,2,543,7,543,
        2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,2,549,
        7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,
        2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,
        7,560,2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,
        2,566,7,566,2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,2,571,
        7,571,2,572,7,572,2,573,7,573,1,0,1,0,3,0,1151,8,0,1,0,1,0,1,0,1,
        0,1,0,3,0,1158,8,0,1,1,1,1,3,1,1162,8,1,1,2,4,2,1165,8,2,11,2,12,
        2,1166,1,2,4,2,1170,8,2,11,2,12,2,1171,1,2,5,2,1175,8,2,10,2,12,
        2,1178,9,2,3,2,1180,8,2,1,3,1,3,1,3,3,3,1185,8,3,3,3,1187,8,3,1,
        3,1,3,3,3,1191,8,3,1,3,3,3,1194,8,3,1,4,1,4,3,4,1198,8,4,1,5,1,5,
        1,5,1,5,1,5,1,5,3,5,1206,8,5,1,6,1,6,1,6,1,7,3,7,1212,8,7,1,7,1,
        7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,3,10,1226,8,10,1,11,
        3,11,1229,8,11,1,11,1,11,1,11,1,11,1,12,3,12,1236,8,12,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,3,14,1249,8,14,1,14,
        1,14,1,15,1,15,1,15,3,15,1256,8,15,1,16,3,16,1259,8,16,1,16,1,16,
        1,16,3,16,1264,8,16,1,16,1,16,1,16,1,16,3,16,1270,8,16,1,16,3,16,
        1273,8,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,3,19,1283,8,19,
        1,20,1,20,1,20,5,20,1288,8,20,10,20,12,20,1291,9,20,1,21,1,21,1,
        22,1,22,1,22,1,22,3,22,1299,8,22,1,23,1,23,1,24,1,24,1,25,1,25,1,
        25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,3,
        29,1320,8,29,1,29,3,29,1323,8,29,1,29,1,29,1,30,4,30,1328,8,30,11,
        30,12,30,1329,1,31,1,31,1,31,3,31,1335,8,31,1,32,1,32,5,32,1339,
        8,32,10,32,12,32,1342,9,32,1,33,1,33,1,33,3,33,1347,8,33,1,34,1,
        34,3,34,1351,8,34,1,34,1,34,1,35,3,35,1356,8,35,1,35,1,35,1,35,1,
        35,1,36,3,36,1363,8,36,1,36,3,36,1366,8,36,1,36,1,36,1,37,1,37,1,
        37,1,38,3,38,1374,8,38,1,38,1,38,1,38,1,38,1,39,3,39,1381,8,39,1,
        39,3,39,1384,8,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,
        42,3,42,1396,8,42,1,42,3,42,1399,8,42,1,42,1,42,1,43,1,43,1,43,1,
        44,1,44,1,44,1,44,3,44,1410,8,44,1,45,1,45,1,46,1,46,1,46,1,46,3,
        46,1418,8,46,1,47,1,47,1,48,1,48,1,48,1,48,3,48,1426,8,48,1,49,4,
        49,1429,8,49,11,49,12,49,1430,1,50,1,50,3,50,1435,8,50,1,51,1,51,
        1,51,1,51,1,51,1,51,3,51,1443,8,51,1,52,1,52,1,52,1,52,1,52,3,52,
        1450,8,52,1,52,1,52,1,53,1,53,1,53,1,53,3,53,1458,8,53,1,53,1,53,
        1,54,1,54,3,54,1464,8,54,1,54,1,54,1,54,1,54,3,54,1470,8,54,1,54,
        1,54,1,54,3,54,1475,8,54,1,54,3,54,1478,8,54,1,54,1,54,1,54,3,54,
        1483,8,54,1,54,3,54,1486,8,54,1,55,3,55,1489,8,55,1,55,1,55,3,55,
        1493,8,55,1,55,3,55,1496,8,55,1,56,1,56,3,56,1500,8,56,1,56,1,56,
        3,56,1504,8,56,1,56,3,56,1507,8,56,1,56,3,56,1510,8,56,1,56,3,56,
        1513,8,56,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,59,1,59,3,59,
        1525,8,59,1,59,1,59,1,59,3,59,1530,8,59,1,59,1,59,1,60,1,60,3,60,
        1536,8,60,1,60,1,60,1,60,1,60,1,60,3,60,1543,8,60,1,60,1,60,1,60,
        3,60,1548,8,60,1,60,1,60,3,60,1552,8,60,1,60,1,60,1,60,1,61,3,61,
        1558,8,61,1,61,1,61,1,61,3,61,1563,8,61,1,61,3,61,1566,8,61,1,62,
        1,62,1,62,1,62,1,63,1,63,3,63,1574,8,63,1,63,1,63,1,63,1,63,3,63,
        1580,8,63,1,63,1,63,1,64,1,64,1,65,1,65,3,65,1588,8,65,1,66,1,66,
        3,66,1592,8,66,1,67,1,67,1,67,3,67,1597,8,67,1,68,1,68,1,68,1,69,
        1,69,3,69,1604,8,69,1,70,1,70,3,70,1608,8,70,1,71,4,71,1611,8,71,
        11,71,12,71,1612,1,72,1,72,3,72,1617,8,72,1,73,1,73,3,73,1621,8,
        73,1,74,1,74,1,74,1,74,3,74,1627,8,74,1,75,1,75,1,75,1,76,1,76,1,
        76,1,77,1,77,1,77,5,77,1638,8,77,10,77,12,77,1641,9,77,1,78,1,78,
        1,78,3,78,1646,8,78,1,79,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,
        1,80,3,80,1658,8,80,1,80,1,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,
        1,83,1,83,1,83,5,83,1672,8,83,10,83,12,83,1675,9,83,1,84,1,84,3,
        84,1679,8,84,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,87,3,87,1690,
        8,87,1,87,1,87,1,87,1,88,1,88,1,88,5,88,1698,8,88,10,88,12,88,1701,
        9,88,1,89,1,89,1,90,1,90,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,92,
        1,92,5,92,1716,8,92,10,92,12,92,1719,9,92,1,93,1,93,3,93,1723,8,
        93,1,94,1,94,3,94,1727,8,94,1,94,1,94,3,94,1731,8,94,1,94,1,94,3,
        94,1735,8,94,3,94,1737,8,94,1,95,1,95,1,96,1,96,3,96,1743,8,96,1,
        97,5,97,1746,8,97,10,97,12,97,1749,9,97,1,97,1,97,1,97,1,97,3,97,
        1755,8,97,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,
        101,1,101,1,101,1,102,3,102,1771,8,102,1,102,1,102,3,102,1775,8,
        102,1,103,4,103,1778,8,103,11,103,12,103,1779,1,104,1,104,3,104,
        1784,8,104,1,105,1,105,1,105,1,105,1,105,3,105,1791,8,105,1,106,
        1,106,3,106,1795,8,106,1,107,1,107,1,107,1,108,1,108,1,108,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,3,109,1812,8,109,
        1,110,4,110,1815,8,110,11,110,12,110,1816,1,111,1,111,1,112,1,112,
        1,112,3,112,1824,8,112,1,113,1,113,1,113,1,114,1,114,1,114,5,114,
        1832,8,114,10,114,12,114,1835,9,114,1,115,1,115,1,115,1,115,1,115,
        3,115,1842,8,115,1,116,1,116,1,116,3,116,1847,8,116,1,117,1,117,
        1,117,1,118,1,118,1,118,1,119,1,119,1,120,1,120,1,120,1,120,1,121,
        1,121,3,121,1863,8,121,1,121,3,121,1866,8,121,1,121,1,121,3,121,
        1870,8,121,1,121,3,121,1873,8,121,1,122,1,122,3,122,1877,8,122,1,
        122,3,122,1880,8,122,1,123,1,123,1,123,1,124,3,124,1886,8,124,1,
        124,1,124,3,124,1890,8,124,1,124,3,124,1893,8,124,1,124,1,124,3,
        124,1897,8,124,1,125,1,125,1,125,5,125,1902,8,125,10,125,12,125,
        1905,9,125,1,126,1,126,3,126,1909,8,126,1,127,1,127,1,127,1,128,
        1,128,3,128,1916,8,128,1,128,1,128,3,128,1920,8,128,1,128,1,128,
        3,128,1924,8,128,1,128,3,128,1927,8,128,1,128,3,128,1930,8,128,1,
        128,3,128,1933,8,128,1,128,3,128,1936,8,128,1,128,3,128,1939,8,128,
        3,128,1941,8,128,1,129,1,129,1,129,5,129,1946,8,129,10,129,12,129,
        1949,9,129,1,130,1,130,3,130,1953,8,130,1,131,1,131,1,131,1,132,
        1,132,1,132,1,133,1,133,1,133,3,133,1964,8,133,1,134,1,134,1,134,
        5,134,1969,8,134,10,134,12,134,1972,9,134,1,135,1,135,1,135,1,136,
        1,136,1,136,1,136,3,136,1981,8,136,1,137,3,137,1984,8,137,1,137,
        1,137,1,137,1,138,1,138,3,138,1991,8,138,1,139,3,139,1994,8,139,
        1,139,1,139,1,140,1,140,3,140,2000,8,140,1,140,1,140,1,141,1,141,
        1,141,5,141,2007,8,141,10,141,12,141,2010,9,141,1,142,1,142,1,142,
        3,142,2015,8,142,1,142,1,142,3,142,2019,8,142,1,143,1,143,1,143,
        5,143,2024,8,143,10,143,12,143,2027,9,143,1,144,1,144,1,145,1,145,
        1,145,1,146,1,146,1,146,1,147,1,147,3,147,2039,8,147,1,148,1,148,
        1,148,1,149,1,149,1,149,5,149,2047,8,149,10,149,12,149,2050,9,149,
        1,149,1,149,3,149,2054,8,149,1,150,1,150,1,151,3,151,2059,8,151,
        1,151,1,151,3,151,2063,8,151,1,151,3,151,2066,8,151,1,152,1,152,
        3,152,2070,8,152,1,153,1,153,1,153,1,154,1,154,1,154,1,155,1,155,
        3,155,2080,8,155,1,155,3,155,2083,8,155,1,156,1,156,3,156,2087,8,
        156,1,156,3,156,2090,8,156,1,157,1,157,1,157,5,157,2095,8,157,10,
        157,12,157,2098,9,157,1,158,3,158,2101,8,158,1,158,3,158,2104,8,
        158,1,158,1,158,1,159,1,159,1,159,1,160,1,160,1,160,1,161,1,161,
        1,161,1,162,1,162,1,163,1,163,1,163,5,163,2122,8,163,10,163,12,163,
        2125,9,163,1,164,1,164,1,164,1,164,5,164,2131,8,164,10,164,12,164,
        2134,9,164,1,165,1,165,3,165,2138,8,165,1,165,1,165,1,166,1,166,
        1,166,3,166,2145,8,166,1,167,1,167,3,167,2149,8,167,1,167,1,167,
        1,168,1,168,3,168,2155,8,168,1,168,1,168,1,169,1,169,3,169,2161,
        8,169,1,169,1,169,1,170,1,170,3,170,2167,8,170,1,170,3,170,2170,
        8,170,1,170,3,170,2173,8,170,1,171,1,171,1,171,3,171,2178,8,171,
        1,171,1,171,1,171,3,171,2183,8,171,1,171,3,171,2186,8,171,1,172,
        1,172,3,172,2190,8,172,1,173,1,173,3,173,2194,8,173,1,174,1,174,
        1,175,1,175,1,175,3,175,2201,8,175,1,176,1,176,3,176,2205,8,176,
        1,176,3,176,2208,8,176,1,177,1,177,1,178,1,178,3,178,2214,8,178,
        1,178,3,178,2217,8,178,1,178,3,178,2220,8,178,1,179,1,179,1,180,
        1,180,1,180,1,180,3,180,2228,8,180,1,181,1,181,1,181,3,181,2233,
        8,181,1,181,3,181,2236,8,181,1,182,1,182,1,182,3,182,2241,8,182,
        1,182,3,182,2244,8,182,1,183,1,183,1,183,3,183,2249,8,183,1,183,
        3,183,2252,8,183,1,184,1,184,3,184,2256,8,184,1,184,3,184,2259,8,
        184,1,184,3,184,2262,8,184,1,184,1,184,1,185,1,185,1,186,1,186,1,
        186,1,186,4,186,2272,8,186,11,186,12,186,2273,1,186,1,186,1,186,
        4,186,2279,8,186,11,186,12,186,2280,3,186,2283,8,186,1,187,4,187,
        2286,8,187,11,187,12,187,2287,1,188,1,188,1,188,1,188,1,188,1,188,
        1,188,3,188,2297,8,188,1,189,1,189,1,189,3,189,2302,8,189,1,190,
        1,190,3,190,2306,8,190,1,191,1,191,1,191,1,191,1,192,3,192,2313,
        8,192,1,192,3,192,2316,8,192,1,192,3,192,2319,8,192,1,193,3,193,
        2322,8,193,1,193,1,193,1,194,1,194,1,194,1,195,1,195,1,196,1,196,
        3,196,2333,8,196,1,197,1,197,1,197,1,198,1,198,1,198,1,198,1,199,
        1,199,1,199,5,199,2345,8,199,10,199,12,199,2348,9,199,1,200,1,200,
        1,200,1,200,1,201,1,201,3,201,2356,8,201,1,202,1,202,1,202,1,202,
        1,202,1,202,1,202,3,202,2365,8,202,1,203,1,203,1,203,1,203,1,204,
        1,204,1,204,1,204,1,205,1,205,1,205,1,205,1,206,1,206,1,206,1,206,
        1,207,1,207,1,207,1,207,1,208,1,208,1,208,1,208,1,209,1,209,1,209,
        1,209,1,210,1,210,1,211,1,211,3,211,2399,8,211,1,211,3,211,2402,
        8,211,1,211,1,211,3,211,2406,8,211,1,211,1,211,1,212,1,212,1,212,
        1,213,1,213,1,213,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,
        1,214,3,214,2425,8,214,1,214,1,214,1,214,1,214,1,214,1,214,5,214,
        2433,8,214,10,214,12,214,2436,9,214,1,215,1,215,1,216,1,216,1,217,
        1,217,1,217,1,217,3,217,2446,8,217,1,218,1,218,1,218,1,218,1,219,
        1,219,3,219,2454,8,219,1,219,1,219,3,219,2458,8,219,1,219,1,219,
        1,220,1,220,1,221,1,221,1,222,1,222,1,222,1,222,1,222,1,222,1,222,
        3,222,2473,8,222,1,223,1,223,1,223,1,223,1,224,1,224,1,224,1,224,
        1,225,1,225,1,225,1,225,1,226,1,226,1,226,1,226,1,227,1,227,1,227,
        1,227,1,228,1,228,1,228,1,228,1,229,1,229,1,229,1,229,1,230,1,230,
        1,230,3,230,2506,8,230,1,231,1,231,1,231,1,231,1,231,5,231,2513,
        8,231,10,231,12,231,2516,9,231,1,232,1,232,1,232,1,232,1,232,5,232,
        2523,8,232,10,232,12,232,2526,9,232,1,233,1,233,1,233,1,233,1,233,
        5,233,2533,8,233,10,233,12,233,2536,9,233,1,234,1,234,1,234,1,234,
        1,234,1,234,5,234,2544,8,234,10,234,12,234,2547,9,234,1,235,1,235,
        1,235,3,235,2552,8,235,1,236,1,236,1,236,1,237,1,237,1,237,1,238,
        1,238,3,238,2562,8,238,1,239,1,239,1,239,1,239,1,239,1,239,1,239,
        3,239,2571,8,239,1,240,1,240,1,240,1,241,1,241,1,241,1,242,1,242,
        1,242,1,243,1,243,1,243,1,244,1,244,1,244,1,244,1,245,1,245,1,245,
        1,245,1,246,1,246,1,246,1,247,1,247,3,247,2598,8,247,1,248,1,248,
        1,248,1,249,1,249,1,249,1,249,1,249,3,249,2608,8,249,1,250,1,250,
        1,250,1,251,1,251,1,251,1,252,1,252,1,252,5,252,2619,8,252,10,252,
        12,252,2622,9,252,1,253,1,253,3,253,2626,8,253,1,254,1,254,1,255,
        1,255,1,255,1,256,1,256,1,256,1,256,1,257,1,257,1,257,5,257,2640,
        8,257,10,257,12,257,2643,9,257,1,257,3,257,2646,8,257,1,258,1,258,
        1,259,1,259,1,259,1,260,1,260,1,260,1,260,1,261,1,261,1,261,5,261,
        2660,8,261,10,261,12,261,2663,9,261,1,262,1,262,3,262,2667,8,262,
        1,262,3,262,2670,8,262,1,263,1,263,1,264,1,264,1,265,1,265,1,265,
        1,265,3,265,2680,8,265,1,266,1,266,1,266,1,267,1,267,1,267,1,268,
        1,268,1,269,1,269,1,269,3,269,2693,8,269,1,270,1,270,1,270,1,270,
        3,270,2699,8,270,1,271,1,271,1,271,1,272,1,272,1,272,1,272,3,272,
        2708,8,272,1,273,1,273,1,274,1,274,3,274,2714,8,274,1,275,1,275,
        1,275,5,275,2719,8,275,10,275,12,275,2722,9,275,1,275,1,275,3,275,
        2726,8,275,1,276,1,276,1,276,4,276,2731,8,276,11,276,12,276,2732,
        1,277,1,277,1,277,1,277,1,277,1,277,3,277,2741,8,277,1,278,3,278,
        2744,8,278,1,278,1,278,1,279,1,279,1,280,1,280,3,280,2752,8,280,
        1,281,3,281,2755,8,281,1,281,1,281,1,282,1,282,1,282,1,282,1,282,
        3,282,2764,8,282,1,283,1,283,3,283,2768,8,283,1,284,3,284,2771,8,
        284,1,284,1,284,1,285,1,285,3,285,2777,8,285,1,285,1,285,1,285,5,
        285,2782,8,285,10,285,12,285,2785,9,285,1,285,1,285,1,285,4,285,
        2790,8,285,11,285,12,285,2791,3,285,2794,8,285,1,286,1,286,1,287,
        1,287,1,287,1,287,1,288,1,288,1,289,1,289,1,289,5,289,2807,8,289,
        10,289,12,289,2810,9,289,1,290,1,290,3,290,2814,8,290,1,291,1,291,
        3,291,2818,8,291,1,292,1,292,3,292,2822,8,292,1,292,1,292,3,292,
        2826,8,292,1,292,1,292,3,292,2830,8,292,1,292,3,292,2833,8,292,1,
        292,1,292,1,293,1,293,3,293,2839,8,293,1,293,1,293,1,293,3,293,2844,
        8,293,1,294,1,294,3,294,2848,8,294,1,294,3,294,2851,8,294,1,295,
        1,295,3,295,2855,8,295,1,295,3,295,2858,8,295,1,296,1,296,1,297,
        1,297,1,297,1,297,1,297,3,297,2867,8,297,1,298,3,298,2870,8,298,
        1,298,1,298,1,299,1,299,1,300,1,300,1,301,1,301,3,301,2880,8,301,
        1,302,3,302,2883,8,302,1,302,1,302,3,302,2887,8,302,1,302,1,302,
        3,302,2891,8,302,1,302,1,302,3,302,2895,8,302,1,303,1,303,1,303,
        3,303,2900,8,303,1,303,1,303,1,303,1,304,1,304,3,304,2907,8,304,
        1,304,3,304,2910,8,304,1,305,1,305,3,305,2914,8,305,1,305,3,305,
        2917,8,305,1,306,1,306,1,306,1,306,1,306,3,306,2924,8,306,1,307,
        3,307,2927,8,307,1,307,1,307,1,308,1,308,1,309,1,309,1,310,1,310,
        3,310,2937,8,310,1,311,1,311,1,311,1,311,1,312,1,312,1,312,1,312,
        1,313,1,313,1,313,1,313,1,314,1,314,1,314,1,314,1,315,1,315,1,315,
        1,315,1,316,1,316,1,316,1,316,1,317,1,317,1,317,1,317,1,317,1,317,
        3,317,2969,8,317,1,317,3,317,2972,8,317,1,318,1,318,1,318,1,318,
        1,318,1,318,3,318,2980,8,318,1,318,3,318,2983,8,318,1,319,1,319,
        1,320,1,320,1,320,1,321,1,321,3,321,2992,8,321,1,322,1,322,3,322,
        2996,8,322,1,323,1,323,1,323,1,323,1,323,1,323,1,324,1,324,1,324,
        1,324,1,324,1,324,1,325,1,325,1,325,1,325,1,325,1,325,1,326,1,326,
        1,327,1,327,1,328,1,328,1,329,1,329,1,330,1,330,1,330,1,330,1,330,
        1,330,1,330,3,330,3031,8,330,1,331,1,331,1,331,5,331,3036,8,331,
        10,331,12,331,3039,9,331,1,332,1,332,3,332,3043,8,332,1,332,1,332,
        1,333,1,333,1,333,5,333,3050,8,333,10,333,12,333,3053,9,333,1,334,
        1,334,3,334,3057,8,334,1,334,1,334,1,335,1,335,1,336,3,336,3064,
        8,336,1,336,1,336,1,336,1,337,1,337,1,337,1,337,1,337,1,337,1,337,
        1,337,1,337,1,337,1,337,3,337,3080,8,337,1,337,3,337,3083,8,337,
        1,337,1,337,1,337,1,337,1,337,3,337,3090,8,337,1,337,3,337,3093,
        8,337,1,337,1,337,1,337,3,337,3098,8,337,1,337,3,337,3101,8,337,
        1,337,3,337,3104,8,337,1,337,1,337,1,337,3,337,3109,8,337,1,337,
        1,337,3,337,3113,8,337,1,337,1,337,1,337,1,337,5,337,3119,8,337,
        10,337,12,337,3122,9,337,1,337,1,337,3,337,3126,8,337,1,337,1,337,
        1,337,1,337,1,337,1,337,1,337,1,337,1,337,3,337,3137,8,337,1,337,
        3,337,3140,8,337,5,337,3142,8,337,10,337,12,337,3145,9,337,1,338,
        1,338,1,339,1,339,1,339,1,339,1,339,1,339,1,339,3,339,3156,8,339,
        1,340,1,340,3,340,3160,8,340,1,341,1,341,1,341,1,341,1,341,3,341,
        3167,8,341,1,341,1,341,1,341,3,341,3172,8,341,1,341,3,341,3175,8,
        341,1,341,1,341,1,341,1,341,1,341,3,341,3182,8,341,1,341,3,341,3185,
        8,341,1,341,1,341,1,341,1,341,1,341,3,341,3192,8,341,1,341,3,341,
        3195,8,341,3,341,3197,8,341,1,342,1,342,1,342,1,342,1,342,3,342,
        3204,8,342,1,342,1,342,1,342,3,342,3209,8,342,1,342,3,342,3212,8,
        342,1,342,1,342,1,342,1,342,1,342,3,342,3219,8,342,1,342,3,342,3222,
        8,342,1,342,1,342,1,342,1,342,1,342,3,342,3229,8,342,1,342,3,342,
        3232,8,342,3,342,3234,8,342,1,343,1,343,1,344,1,344,1,345,1,345,
        1,346,1,346,3,346,3244,8,346,1,347,1,347,3,347,3248,8,347,1,348,
        1,348,3,348,3252,8,348,1,349,1,349,3,349,3256,8,349,1,349,1,349,
        3,349,3260,8,349,1,349,1,349,3,349,3264,8,349,1,349,1,349,3,349,
        3268,8,349,1,349,1,349,3,349,3272,8,349,1,349,1,349,3,349,3276,8,
        349,1,349,1,349,3,349,3280,8,349,1,349,1,349,1,349,1,349,1,349,3,
        349,3287,8,349,1,349,3,349,3290,8,349,1,349,1,349,3,349,3294,8,349,
        1,349,3,349,3297,8,349,1,349,3,349,3300,8,349,1,350,1,350,3,350,
        3304,8,350,1,350,1,350,3,350,3308,8,350,1,350,1,350,3,350,3312,8,
        350,1,350,1,350,3,350,3316,8,350,1,350,1,350,3,350,3320,8,350,1,
        350,1,350,3,350,3324,8,350,1,350,1,350,3,350,3328,8,350,1,350,1,
        350,1,350,1,350,1,350,3,350,3335,8,350,1,350,3,350,3338,8,350,1,
        350,1,350,3,350,3342,8,350,1,350,1,350,3,350,3346,8,350,1,351,1,
        351,3,351,3350,8,351,1,351,1,351,3,351,3354,8,351,1,351,1,351,3,
        351,3358,8,351,1,351,1,351,3,351,3362,8,351,1,351,1,351,3,351,3366,
        8,351,1,351,1,351,3,351,3370,8,351,1,351,1,351,1,351,3,351,3375,
        8,351,1,351,1,351,1,351,1,351,1,351,3,351,3382,8,351,1,351,3,351,
        3385,8,351,1,351,1,351,1,351,3,351,3390,8,351,3,351,3392,8,351,1,
        352,1,352,1,352,1,352,1,352,3,352,3399,8,352,1,352,1,352,3,352,3403,
        8,352,3,352,3405,8,352,1,353,1,353,1,354,1,354,1,355,1,355,3,355,
        3413,8,355,1,355,1,355,3,355,3417,8,355,1,355,1,355,3,355,3421,8,
        355,1,355,1,355,3,355,3425,8,355,1,355,1,355,3,355,3429,8,355,1,
        355,1,355,1,355,1,355,1,355,3,355,3436,8,355,1,355,1,355,3,355,3440,
        8,355,1,355,3,355,3443,8,355,1,355,1,355,3,355,3447,8,355,1,355,
        1,355,3,355,3451,8,355,1,355,3,355,3454,8,355,3,355,3456,8,355,1,
        356,1,356,3,356,3460,8,356,1,357,1,357,1,357,1,357,1,357,3,357,3467,
        8,357,1,358,1,358,1,358,3,358,3472,8,358,1,358,1,358,1,358,1,358,
        1,358,3,358,3479,8,358,3,358,3481,8,358,1,359,1,359,1,359,3,359,
        3486,8,359,1,359,1,359,1,359,1,359,3,359,3492,8,359,1,359,3,359,
        3495,8,359,3,359,3497,8,359,1,360,1,360,3,360,3501,8,360,1,361,1,
        361,1,361,3,361,3506,8,361,1,361,1,361,1,361,1,361,1,361,3,361,3513,
        8,361,3,361,3515,8,361,1,362,1,362,1,362,3,362,3520,8,362,1,362,
        1,362,1,362,1,362,1,362,3,362,3527,8,362,3,362,3529,8,362,1,363,
        1,363,1,363,1,363,1,363,3,363,3536,8,363,1,364,1,364,1,364,1,364,
        1,364,1,364,3,364,3544,8,364,1,365,1,365,1,365,1,365,3,365,3550,
        8,365,1,366,1,366,3,366,3554,8,366,1,367,1,367,1,368,1,368,1,368,
        3,368,3561,8,368,1,369,1,369,3,369,3565,8,369,1,370,3,370,3568,8,
        370,1,370,1,370,1,370,3,370,3573,8,370,1,371,1,371,3,371,3577,8,
        371,1,371,1,371,3,371,3581,8,371,1,372,1,372,3,372,3585,8,372,1,
        373,1,373,3,373,3589,8,373,1,374,1,374,3,374,3593,8,374,1,375,3,
        375,3596,8,375,1,375,1,375,3,375,3600,8,375,1,376,1,376,3,376,3604,
        8,376,1,377,1,377,3,377,3608,8,377,1,378,3,378,3611,8,378,1,378,
        1,378,3,378,3615,8,378,1,379,1,379,3,379,3619,8,379,1,380,3,380,
        3622,8,380,1,380,1,380,1,381,1,381,1,382,3,382,3629,8,382,1,382,
        1,382,3,382,3633,8,382,1,382,3,382,3636,8,382,1,382,1,382,3,382,
        3640,8,382,3,382,3642,8,382,1,383,1,383,3,383,3646,8,383,1,383,1,
        383,1,384,1,384,1,384,5,384,3653,8,384,10,384,12,384,3656,9,384,
        1,385,1,385,1,385,1,386,1,386,3,386,3663,8,386,1,386,1,386,1,387,
        1,387,1,388,1,388,1,388,1,388,1,388,1,388,1,388,1,388,1,388,3,388,
        3678,8,388,1,389,1,389,1,390,1,390,1,390,1,390,1,390,1,390,1,390,
        1,390,1,390,1,390,1,390,1,390,1,390,1,390,1,390,1,390,1,390,1,390,
        3,390,3700,8,390,1,391,1,391,1,391,1,392,1,392,3,392,3707,8,392,
        1,392,1,392,1,393,1,393,1,393,1,394,1,394,3,394,3716,8,394,1,394,
        1,394,1,394,1,395,1,395,3,395,3723,8,395,1,395,3,395,3726,8,395,
        1,395,1,395,1,396,1,396,1,396,1,397,1,397,3,397,3735,8,397,1,397,
        1,397,1,398,1,398,1,398,1,399,1,399,1,399,1,400,1,400,3,400,3747,
        8,400,1,400,1,400,3,400,3751,8,400,1,401,1,401,1,401,1,401,1,401,
        1,401,3,401,3759,8,401,1,402,1,402,1,403,1,403,3,403,3765,8,403,
        1,403,1,403,1,403,1,403,1,404,1,404,3,404,3773,8,404,1,404,1,404,
        1,404,1,404,1,405,1,405,1,406,1,406,1,406,1,406,1,406,1,406,1,406,
        5,406,3788,8,406,10,406,12,406,3791,9,406,1,406,1,406,1,407,1,407,
        1,407,1,407,1,407,1,407,1,407,5,407,3802,8,407,10,407,12,407,3805,
        9,407,1,407,1,407,1,408,1,408,1,408,1,408,1,408,1,408,1,408,1,409,
        1,409,1,409,1,409,1,409,1,409,1,409,3,409,3823,8,409,1,409,1,409,
        1,409,3,409,3828,8,409,1,409,1,409,1,409,1,409,3,409,3834,8,409,
        1,409,1,409,1,409,1,409,1,409,1,409,1,409,1,409,1,409,1,409,1,409,
        1,409,1,409,1,409,1,409,1,409,1,409,1,409,1,409,1,409,1,409,1,409,
        1,409,1,409,3,409,3860,8,409,1,409,5,409,3863,8,409,10,409,12,409,
        3866,9,409,1,410,1,410,1,410,1,410,1,410,1,410,3,410,3874,8,410,
        1,411,1,411,1,412,1,412,1,412,1,412,1,412,3,412,3883,8,412,1,413,
        1,413,1,413,1,413,1,413,1,413,1,413,1,414,1,414,1,414,1,414,1,414,
        1,415,1,415,1,415,1,415,1,415,1,416,1,416,1,416,1,416,1,416,3,416,
        3907,8,416,1,416,1,416,1,417,1,417,1,417,1,417,1,417,3,417,3916,
        8,417,1,417,1,417,1,418,1,418,1,419,1,419,1,420,1,420,1,421,1,421,
        1,421,1,421,1,421,1,421,1,421,1,421,1,421,1,421,1,421,3,421,3937,
        8,421,1,421,1,421,1,421,5,421,3942,8,421,10,421,12,421,3945,9,421,
        1,422,1,422,1,422,1,422,1,423,1,423,3,423,3953,8,423,1,424,1,424,
        1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,3,424,
        3967,8,424,1,425,1,425,3,425,3971,8,425,1,426,1,426,3,426,3975,8,
        426,1,427,1,427,3,427,3979,8,427,1,428,1,428,1,429,1,429,1,429,1,
        429,1,429,1,429,1,430,1,430,1,430,1,431,1,431,3,431,3994,8,431,1,
        432,1,432,1,432,1,432,1,432,1,432,1,432,1,432,1,432,1,432,1,432,
        1,432,4,432,4008,8,432,11,432,12,432,4009,1,432,1,432,3,432,4014,
        8,432,1,433,1,433,3,433,4018,8,433,1,434,1,434,1,434,4,434,4023,
        8,434,11,434,12,434,4024,1,434,3,434,4028,8,434,1,434,1,434,1,435,
        1,435,4,435,4034,8,435,11,435,12,435,4035,1,435,3,435,4039,8,435,
        1,435,1,435,1,436,1,436,1,436,1,436,1,436,1,437,1,437,1,437,1,437,
        1,437,1,438,1,438,1,438,1,439,1,439,3,439,4058,8,439,1,440,1,440,
        1,440,5,440,4063,8,440,10,440,12,440,4066,9,440,1,441,1,441,1,441,
        1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,3,441,4079,8,441,
        1,442,1,442,3,442,4083,8,442,1,443,1,443,1,444,1,444,1,444,1,444,
        1,444,1,444,1,444,1,445,1,445,3,445,4096,8,445,1,446,1,446,1,447,
        1,447,1,447,1,447,1,447,1,447,3,447,4106,8,447,1,448,1,448,1,448,
        3,448,4111,8,448,1,448,1,448,1,448,1,449,1,449,1,449,1,449,1,449,
        1,449,1,449,1,450,1,450,1,451,1,451,1,452,1,452,1,453,3,453,4130,
        8,453,1,453,1,453,1,454,1,454,1,455,1,455,1,455,1,455,1,455,1,456,
        1,456,1,457,1,457,1,458,1,458,1,459,1,459,1,459,1,459,1,459,1,460,
        1,460,5,460,4154,8,460,10,460,12,460,4157,9,460,1,461,1,461,1,462,
        1,462,1,462,1,462,1,462,1,463,1,463,1,464,1,464,3,464,4170,8,464,
        1,465,1,465,1,465,1,465,1,465,1,465,1,465,1,466,1,466,1,466,1,466,
        1,466,1,467,1,467,1,468,3,468,4187,8,468,1,468,1,468,3,468,4191,
        8,468,1,468,1,468,1,469,1,469,1,469,5,469,4198,8,469,10,469,12,469,
        4201,9,469,1,470,1,470,1,471,3,471,4206,8,471,1,471,1,471,1,472,
        1,472,3,472,4212,8,472,1,472,1,472,1,473,1,473,1,473,5,473,4219,
        8,473,10,473,12,473,4222,9,473,1,474,1,474,1,474,1,474,1,475,1,475,
        1,476,1,476,1,476,1,476,1,476,3,476,4235,8,476,1,476,1,476,1,476,
        1,476,1,476,1,476,5,476,4243,8,476,10,476,12,476,4246,9,476,1,477,
        1,477,1,477,1,477,1,477,1,477,1,477,1,477,1,477,1,477,1,477,1,477,
        1,477,3,477,4261,8,477,1,478,1,478,1,478,3,478,4266,8,478,1,479,
        1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,3,479,4278,
        8,479,1,480,1,480,1,481,1,481,1,481,1,481,1,481,1,482,1,482,1,482,
        1,482,1,482,1,483,1,483,1,483,1,483,1,483,1,484,1,484,1,484,1,484,
        1,484,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,486,1,486,1,487,
        1,487,1,488,1,488,1,488,1,488,1,488,1,489,1,489,1,490,1,490,1,490,
        1,490,1,490,1,490,1,490,1,491,1,491,1,492,1,492,1,493,1,493,1,493,
        1,493,1,493,1,494,1,494,1,494,1,494,1,494,1,495,1,495,1,495,1,495,
        1,495,1,496,1,496,1,496,1,496,1,496,1,496,1,496,1,497,1,497,1,498,
        1,498,1,499,1,499,1,499,1,499,1,499,1,500,1,500,1,500,1,500,1,500,
        1,501,1,501,1,501,1,501,1,501,1,502,1,502,1,503,1,503,1,504,3,504,
        4377,8,504,1,504,3,504,4380,8,504,1,504,3,504,4383,8,504,1,504,1,
        504,1,505,1,505,1,506,1,506,1,507,1,507,1,508,1,508,1,509,1,509,
        1,510,1,510,1,511,1,511,1,511,1,511,1,511,3,511,4404,8,511,1,512,
        1,512,1,512,1,512,3,512,4410,8,512,1,512,3,512,4413,8,512,1,513,
        1,513,1,513,1,513,3,513,4419,8,513,1,513,3,513,4422,8,513,1,514,
        1,514,1,514,3,514,4427,8,514,1,514,3,514,4430,8,514,1,515,1,515,
        1,515,1,515,3,515,4436,8,515,1,515,3,515,4439,8,515,1,516,1,516,
        1,516,1,516,3,516,4445,8,516,1,516,3,516,4448,8,516,1,517,1,517,
        3,517,4452,8,517,1,518,1,518,3,518,4456,8,518,1,519,1,519,3,519,
        4460,8,519,1,520,1,520,1,521,1,521,1,521,1,521,1,521,3,521,4469,
        8,521,1,522,1,522,1,522,1,522,1,523,1,523,1,524,1,524,1,525,1,525,
        3,525,4481,8,525,1,526,1,526,1,526,1,526,1,526,1,527,1,527,3,527,
        4490,8,527,1,528,1,528,1,529,1,529,1,530,1,530,1,531,1,531,1,532,
        1,532,3,532,4502,8,532,1,533,1,533,1,534,1,534,1,535,1,535,1,536,
        1,536,1,537,1,537,3,537,4514,8,537,1,538,1,538,1,539,1,539,1,540,
        1,540,1,541,1,541,1,542,1,542,1,543,1,543,1,544,1,544,1,545,1,545,
        1,546,1,546,1,547,1,547,3,547,4536,8,547,1,548,1,548,1,548,1,548,
        1,548,1,548,1,548,1,548,3,548,4546,8,548,1,549,1,549,1,549,3,549,
        4551,8,549,1,550,1,550,1,550,1,551,1,551,1,551,1,552,1,552,1,552,
        1,553,1,553,1,554,1,554,1,555,1,555,1,555,3,555,4569,8,555,1,556,
        1,556,3,556,4573,8,556,1,557,1,557,1,558,1,558,1,559,1,559,3,559,
        4581,8,559,1,560,1,560,1,560,1,560,1,560,3,560,4588,8,560,1,561,
        1,561,1,562,1,562,1,563,1,563,1,564,1,564,1,565,1,565,1,566,1,566,
        1,567,1,567,1,568,1,568,1,568,1,569,1,569,1,570,1,570,1,571,1,571,
        1,572,1,572,1,573,1,573,1,573,0,8,184,428,466,468,674,818,842,952,
        574,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
        44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
        88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
        124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
        156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,
        188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
        220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,
        252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,
        284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,
        316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,
        348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,
        380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,
        412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,
        444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,
        476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,
        508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,
        540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,570,
        572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,602,
        604,606,608,610,612,614,616,618,620,622,624,626,628,630,632,634,
        636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,666,
        668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,698,
        700,702,704,706,708,710,712,714,716,718,720,722,724,726,728,730,
        732,734,736,738,740,742,744,746,748,750,752,754,756,758,760,762,
        764,766,768,770,772,774,776,778,780,782,784,786,788,790,792,794,
        796,798,800,802,804,806,808,810,812,814,816,818,820,822,824,826,
        828,830,832,834,836,838,840,842,844,846,848,850,852,854,856,858,
        860,862,864,866,868,870,872,874,876,878,880,882,884,886,888,890,
        892,894,896,898,900,902,904,906,908,910,912,914,916,918,920,922,
        924,926,928,930,932,934,936,938,940,942,944,946,948,950,952,954,
        956,958,960,962,964,966,968,970,972,974,976,978,980,982,984,986,
        988,990,992,994,996,998,1000,1002,1004,1006,1008,1010,1012,1014,
        1016,1018,1020,1022,1024,1026,1028,1030,1032,1034,1036,1038,1040,
        1042,1044,1046,1048,1050,1052,1054,1056,1058,1060,1062,1064,1066,
        1068,1070,1072,1074,1076,1078,1080,1082,1084,1086,1088,1090,1092,
        1094,1096,1098,1100,1102,1104,1106,1108,1110,1112,1114,1116,1118,
        1120,1122,1124,1126,1128,1130,1132,1134,1136,1138,1140,1142,1144,
        1146,0,45,2,0,53,53,165,165,1,0,65,66,2,0,79,79,150,150,2,0,159,
        159,304,304,4,0,277,277,311,311,316,316,321,321,2,0,166,166,168,
        168,2,0,102,102,290,290,2,0,127,127,360,360,6,0,336,337,340,340,
        347,347,356,356,373,373,384,384,2,0,28,29,77,78,2,0,159,159,195,
        195,3,0,67,67,106,106,375,375,1,0,104,105,2,0,283,283,319,319,2,
        0,315,315,347,347,2,0,315,315,384,384,2,0,211,211,332,332,1,0,37,
        38,1,0,73,74,2,0,26,26,133,133,6,0,335,335,343,343,346,346,365,365,
        367,367,372,372,2,0,373,373,376,376,2,0,359,359,383,383,2,0,161,
        161,232,232,2,0,129,129,181,181,2,0,141,141,222,222,3,0,40,40,142,
        142,183,183,6,0,33,33,56,56,62,62,144,145,200,201,203,203,2,0,22,
        22,80,80,1,0,169,170,1,0,51,52,2,0,42,42,157,157,8,0,21,21,30,30,
        32,32,59,61,75,75,174,174,192,193,204,205,1,0,48,49,3,0,39,39,128,
        128,209,209,1,0,296,299,1,0,4,5,2,0,71,71,208,208,1,0,3,4,3,0,9,
        10,13,13,15,15,1,0,16,19,2,0,301,301,320,320,2,0,285,285,308,308,
        2,0,284,284,307,307,1,0,277,324,4744,0,1157,1,0,0,0,2,1161,1,0,0,
        0,4,1179,1,0,0,0,6,1193,1,0,0,0,8,1197,1,0,0,0,10,1199,1,0,0,0,12,
        1207,1,0,0,0,14,1211,1,0,0,0,16,1216,1,0,0,0,18,1220,1,0,0,0,20,
        1225,1,0,0,0,22,1228,1,0,0,0,24,1235,1,0,0,0,26,1241,1,0,0,0,28,
        1248,1,0,0,0,30,1252,1,0,0,0,32,1272,1,0,0,0,34,1274,1,0,0,0,36,
        1277,1,0,0,0,38,1279,1,0,0,0,40,1284,1,0,0,0,42,1292,1,0,0,0,44,
        1298,1,0,0,0,46,1300,1,0,0,0,48,1302,1,0,0,0,50,1304,1,0,0,0,52,
        1308,1,0,0,0,54,1310,1,0,0,0,56,1314,1,0,0,0,58,1319,1,0,0,0,60,
        1327,1,0,0,0,62,1334,1,0,0,0,64,1336,1,0,0,0,66,1346,1,0,0,0,68,
        1348,1,0,0,0,70,1355,1,0,0,0,72,1365,1,0,0,0,74,1369,1,0,0,0,76,
        1373,1,0,0,0,78,1383,1,0,0,0,80,1387,1,0,0,0,82,1390,1,0,0,0,84,
        1398,1,0,0,0,86,1402,1,0,0,0,88,1409,1,0,0,0,90,1411,1,0,0,0,92,
        1417,1,0,0,0,94,1419,1,0,0,0,96,1425,1,0,0,0,98,1428,1,0,0,0,100,
        1434,1,0,0,0,102,1442,1,0,0,0,104,1444,1,0,0,0,106,1453,1,0,0,0,
        108,1461,1,0,0,0,110,1488,1,0,0,0,112,1512,1,0,0,0,114,1514,1,0,
        0,0,116,1517,1,0,0,0,118,1522,1,0,0,0,120,1533,1,0,0,0,122,1565,
        1,0,0,0,124,1567,1,0,0,0,126,1571,1,0,0,0,128,1583,1,0,0,0,130,1587,
        1,0,0,0,132,1591,1,0,0,0,134,1593,1,0,0,0,136,1598,1,0,0,0,138,1603,
        1,0,0,0,140,1605,1,0,0,0,142,1610,1,0,0,0,144,1616,1,0,0,0,146,1620,
        1,0,0,0,148,1626,1,0,0,0,150,1628,1,0,0,0,152,1631,1,0,0,0,154,1634,
        1,0,0,0,156,1645,1,0,0,0,158,1647,1,0,0,0,160,1653,1,0,0,0,162,1661,
        1,0,0,0,164,1665,1,0,0,0,166,1668,1,0,0,0,168,1678,1,0,0,0,170,1680,
        1,0,0,0,172,1684,1,0,0,0,174,1689,1,0,0,0,176,1694,1,0,0,0,178,1702,
        1,0,0,0,180,1704,1,0,0,0,182,1706,1,0,0,0,184,1708,1,0,0,0,186,1722,
        1,0,0,0,188,1736,1,0,0,0,190,1738,1,0,0,0,192,1742,1,0,0,0,194,1754,
        1,0,0,0,196,1756,1,0,0,0,198,1759,1,0,0,0,200,1763,1,0,0,0,202,1766,
        1,0,0,0,204,1774,1,0,0,0,206,1777,1,0,0,0,208,1783,1,0,0,0,210,1790,
        1,0,0,0,212,1794,1,0,0,0,214,1796,1,0,0,0,216,1799,1,0,0,0,218,1811,
        1,0,0,0,220,1814,1,0,0,0,222,1818,1,0,0,0,224,1820,1,0,0,0,226,1825,
        1,0,0,0,228,1828,1,0,0,0,230,1841,1,0,0,0,232,1843,1,0,0,0,234,1848,
        1,0,0,0,236,1851,1,0,0,0,238,1854,1,0,0,0,240,1856,1,0,0,0,242,1872,
        1,0,0,0,244,1879,1,0,0,0,246,1881,1,0,0,0,248,1896,1,0,0,0,250,1898,
        1,0,0,0,252,1906,1,0,0,0,254,1910,1,0,0,0,256,1913,1,0,0,0,258,1942,
        1,0,0,0,260,1950,1,0,0,0,262,1954,1,0,0,0,264,1957,1,0,0,0,266,1960,
        1,0,0,0,268,1965,1,0,0,0,270,1973,1,0,0,0,272,1980,1,0,0,0,274,1983,
        1,0,0,0,276,1990,1,0,0,0,278,1993,1,0,0,0,280,1997,1,0,0,0,282,2003,
        1,0,0,0,284,2011,1,0,0,0,286,2020,1,0,0,0,288,2028,1,0,0,0,290,2030,
        1,0,0,0,292,2033,1,0,0,0,294,2036,1,0,0,0,296,2040,1,0,0,0,298,2053,
        1,0,0,0,300,2055,1,0,0,0,302,2058,1,0,0,0,304,2069,1,0,0,0,306,2071,
        1,0,0,0,308,2074,1,0,0,0,310,2082,1,0,0,0,312,2089,1,0,0,0,314,2091,
        1,0,0,0,316,2100,1,0,0,0,318,2107,1,0,0,0,320,2110,1,0,0,0,322,2113,
        1,0,0,0,324,2116,1,0,0,0,326,2118,1,0,0,0,328,2126,1,0,0,0,330,2135,
        1,0,0,0,332,2144,1,0,0,0,334,2146,1,0,0,0,336,2152,1,0,0,0,338,2158,
        1,0,0,0,340,2172,1,0,0,0,342,2185,1,0,0,0,344,2189,1,0,0,0,346,2191,
        1,0,0,0,348,2195,1,0,0,0,350,2200,1,0,0,0,352,2202,1,0,0,0,354,2209,
        1,0,0,0,356,2211,1,0,0,0,358,2221,1,0,0,0,360,2227,1,0,0,0,362,2229,
        1,0,0,0,364,2237,1,0,0,0,366,2245,1,0,0,0,368,2253,1,0,0,0,370,2265,
        1,0,0,0,372,2282,1,0,0,0,374,2285,1,0,0,0,376,2296,1,0,0,0,378,2301,
        1,0,0,0,380,2305,1,0,0,0,382,2307,1,0,0,0,384,2312,1,0,0,0,386,2321,
        1,0,0,0,388,2325,1,0,0,0,390,2328,1,0,0,0,392,2332,1,0,0,0,394,2334,
        1,0,0,0,396,2337,1,0,0,0,398,2341,1,0,0,0,400,2349,1,0,0,0,402,2355,
        1,0,0,0,404,2364,1,0,0,0,406,2366,1,0,0,0,408,2370,1,0,0,0,410,2374,
        1,0,0,0,412,2378,1,0,0,0,414,2382,1,0,0,0,416,2386,1,0,0,0,418,2390,
        1,0,0,0,420,2394,1,0,0,0,422,2396,1,0,0,0,424,2409,1,0,0,0,426,2412,
        1,0,0,0,428,2424,1,0,0,0,430,2437,1,0,0,0,432,2439,1,0,0,0,434,2445,
        1,0,0,0,436,2447,1,0,0,0,438,2451,1,0,0,0,440,2461,1,0,0,0,442,2463,
        1,0,0,0,444,2472,1,0,0,0,446,2474,1,0,0,0,448,2478,1,0,0,0,450,2482,
        1,0,0,0,452,2486,1,0,0,0,454,2490,1,0,0,0,456,2494,1,0,0,0,458,2498,
        1,0,0,0,460,2505,1,0,0,0,462,2507,1,0,0,0,464,2517,1,0,0,0,466,2527,
        1,0,0,0,468,2537,1,0,0,0,470,2551,1,0,0,0,472,2553,1,0,0,0,474,2556,
        1,0,0,0,476,2561,1,0,0,0,478,2570,1,0,0,0,480,2572,1,0,0,0,482,2575,
        1,0,0,0,484,2578,1,0,0,0,486,2581,1,0,0,0,488,2584,1,0,0,0,490,2588,
        1,0,0,0,492,2592,1,0,0,0,494,2597,1,0,0,0,496,2599,1,0,0,0,498,2607,
        1,0,0,0,500,2609,1,0,0,0,502,2612,1,0,0,0,504,2615,1,0,0,0,506,2623,
        1,0,0,0,508,2627,1,0,0,0,510,2629,1,0,0,0,512,2632,1,0,0,0,514,2645,
        1,0,0,0,516,2647,1,0,0,0,518,2649,1,0,0,0,520,2652,1,0,0,0,522,2656,
        1,0,0,0,524,2664,1,0,0,0,526,2671,1,0,0,0,528,2673,1,0,0,0,530,2679,
        1,0,0,0,532,2681,1,0,0,0,534,2684,1,0,0,0,536,2687,1,0,0,0,538,2692,
        1,0,0,0,540,2698,1,0,0,0,542,2700,1,0,0,0,544,2707,1,0,0,0,546,2709,
        1,0,0,0,548,2711,1,0,0,0,550,2715,1,0,0,0,552,2730,1,0,0,0,554,2740,
        1,0,0,0,556,2743,1,0,0,0,558,2747,1,0,0,0,560,2751,1,0,0,0,562,2754,
        1,0,0,0,564,2763,1,0,0,0,566,2767,1,0,0,0,568,2770,1,0,0,0,570,2793,
        1,0,0,0,572,2795,1,0,0,0,574,2797,1,0,0,0,576,2801,1,0,0,0,578,2803,
        1,0,0,0,580,2813,1,0,0,0,582,2817,1,0,0,0,584,2825,1,0,0,0,586,2836,
        1,0,0,0,588,2850,1,0,0,0,590,2857,1,0,0,0,592,2859,1,0,0,0,594,2866,
        1,0,0,0,596,2869,1,0,0,0,598,2873,1,0,0,0,600,2875,1,0,0,0,602,2879,
        1,0,0,0,604,2890,1,0,0,0,606,2896,1,0,0,0,608,2909,1,0,0,0,610,2916,
        1,0,0,0,612,2923,1,0,0,0,614,2926,1,0,0,0,616,2930,1,0,0,0,618,2932,
        1,0,0,0,620,2936,1,0,0,0,622,2938,1,0,0,0,624,2942,1,0,0,0,626,2946,
        1,0,0,0,628,2950,1,0,0,0,630,2954,1,0,0,0,632,2958,1,0,0,0,634,2971,
        1,0,0,0,636,2982,1,0,0,0,638,2984,1,0,0,0,640,2986,1,0,0,0,642,2991,
        1,0,0,0,644,2995,1,0,0,0,646,2997,1,0,0,0,648,3003,1,0,0,0,650,3009,
        1,0,0,0,652,3015,1,0,0,0,654,3017,1,0,0,0,656,3019,1,0,0,0,658,3021,
        1,0,0,0,660,3030,1,0,0,0,662,3032,1,0,0,0,664,3040,1,0,0,0,666,3046,
        1,0,0,0,668,3054,1,0,0,0,670,3060,1,0,0,0,672,3063,1,0,0,0,674,3125,
        1,0,0,0,676,3146,1,0,0,0,678,3155,1,0,0,0,680,3157,1,0,0,0,682,3196,
        1,0,0,0,684,3233,1,0,0,0,686,3235,1,0,0,0,688,3237,1,0,0,0,690,3239,
        1,0,0,0,692,3243,1,0,0,0,694,3247,1,0,0,0,696,3251,1,0,0,0,698,3299,
        1,0,0,0,700,3345,1,0,0,0,702,3391,1,0,0,0,704,3393,1,0,0,0,706,3406,
        1,0,0,0,708,3408,1,0,0,0,710,3455,1,0,0,0,712,3459,1,0,0,0,714,3466,
        1,0,0,0,716,3480,1,0,0,0,718,3496,1,0,0,0,720,3498,1,0,0,0,722,3514,
        1,0,0,0,724,3528,1,0,0,0,726,3530,1,0,0,0,728,3543,1,0,0,0,730,3549,
        1,0,0,0,732,3553,1,0,0,0,734,3555,1,0,0,0,736,3560,1,0,0,0,738,3564,
        1,0,0,0,740,3567,1,0,0,0,742,3574,1,0,0,0,744,3582,1,0,0,0,746,3588,
        1,0,0,0,748,3590,1,0,0,0,750,3595,1,0,0,0,752,3603,1,0,0,0,754,3605,
        1,0,0,0,756,3610,1,0,0,0,758,3616,1,0,0,0,760,3621,1,0,0,0,762,3625,
        1,0,0,0,764,3641,1,0,0,0,766,3643,1,0,0,0,768,3649,1,0,0,0,770,3657,
        1,0,0,0,772,3660,1,0,0,0,774,3666,1,0,0,0,776,3677,1,0,0,0,778,3679,
        1,0,0,0,780,3681,1,0,0,0,782,3701,1,0,0,0,784,3704,1,0,0,0,786,3710,
        1,0,0,0,788,3713,1,0,0,0,790,3720,1,0,0,0,792,3729,1,0,0,0,794,3732,
        1,0,0,0,796,3738,1,0,0,0,798,3741,1,0,0,0,800,3750,1,0,0,0,802,3758,
        1,0,0,0,804,3760,1,0,0,0,806,3762,1,0,0,0,808,3770,1,0,0,0,810,3778,
        1,0,0,0,812,3780,1,0,0,0,814,3794,1,0,0,0,816,3808,1,0,0,0,818,3833,
        1,0,0,0,820,3873,1,0,0,0,822,3875,1,0,0,0,824,3882,1,0,0,0,826,3884,
        1,0,0,0,828,3891,1,0,0,0,830,3896,1,0,0,0,832,3901,1,0,0,0,834,3910,
        1,0,0,0,836,3919,1,0,0,0,838,3921,1,0,0,0,840,3923,1,0,0,0,842,3936,
        1,0,0,0,844,3946,1,0,0,0,846,3952,1,0,0,0,848,3966,1,0,0,0,850,3970,
        1,0,0,0,852,3974,1,0,0,0,854,3978,1,0,0,0,856,3980,1,0,0,0,858,3982,
        1,0,0,0,860,3988,1,0,0,0,862,3993,1,0,0,0,864,4013,1,0,0,0,866,4017,
        1,0,0,0,868,4019,1,0,0,0,870,4031,1,0,0,0,872,4042,1,0,0,0,874,4047,
        1,0,0,0,876,4052,1,0,0,0,878,4057,1,0,0,0,880,4059,1,0,0,0,882,4078,
        1,0,0,0,884,4082,1,0,0,0,886,4084,1,0,0,0,888,4086,1,0,0,0,890,4095,
        1,0,0,0,892,4097,1,0,0,0,894,4105,1,0,0,0,896,4107,1,0,0,0,898,4115,
        1,0,0,0,900,4122,1,0,0,0,902,4124,1,0,0,0,904,4126,1,0,0,0,906,4129,
        1,0,0,0,908,4133,1,0,0,0,910,4135,1,0,0,0,912,4140,1,0,0,0,914,4142,
        1,0,0,0,916,4144,1,0,0,0,918,4146,1,0,0,0,920,4151,1,0,0,0,922,4158,
        1,0,0,0,924,4160,1,0,0,0,926,4165,1,0,0,0,928,4169,1,0,0,0,930,4171,
        1,0,0,0,932,4178,1,0,0,0,934,4183,1,0,0,0,936,4186,1,0,0,0,938,4194,
        1,0,0,0,940,4202,1,0,0,0,942,4205,1,0,0,0,944,4209,1,0,0,0,946,4215,
        1,0,0,0,948,4223,1,0,0,0,950,4227,1,0,0,0,952,4234,1,0,0,0,954,4260,
        1,0,0,0,956,4265,1,0,0,0,958,4277,1,0,0,0,960,4279,1,0,0,0,962,4281,
        1,0,0,0,964,4286,1,0,0,0,966,4291,1,0,0,0,968,4296,1,0,0,0,970,4301,
        1,0,0,0,972,4308,1,0,0,0,974,4310,1,0,0,0,976,4312,1,0,0,0,978,4317,
        1,0,0,0,980,4319,1,0,0,0,982,4326,1,0,0,0,984,4328,1,0,0,0,986,4330,
        1,0,0,0,988,4335,1,0,0,0,990,4340,1,0,0,0,992,4345,1,0,0,0,994,4352,
        1,0,0,0,996,4354,1,0,0,0,998,4356,1,0,0,0,1000,4361,1,0,0,0,1002,
        4366,1,0,0,0,1004,4371,1,0,0,0,1006,4373,1,0,0,0,1008,4382,1,0,0,
        0,1010,4386,1,0,0,0,1012,4388,1,0,0,0,1014,4390,1,0,0,0,1016,4392,
        1,0,0,0,1018,4394,1,0,0,0,1020,4396,1,0,0,0,1022,4403,1,0,0,0,1024,
        4412,1,0,0,0,1026,4421,1,0,0,0,1028,4423,1,0,0,0,1030,4438,1,0,0,
        0,1032,4447,1,0,0,0,1034,4451,1,0,0,0,1036,4455,1,0,0,0,1038,4459,
        1,0,0,0,1040,4461,1,0,0,0,1042,4463,1,0,0,0,1044,4470,1,0,0,0,1046,
        4474,1,0,0,0,1048,4476,1,0,0,0,1050,4480,1,0,0,0,1052,4482,1,0,0,
        0,1054,4489,1,0,0,0,1056,4491,1,0,0,0,1058,4493,1,0,0,0,1060,4495,
        1,0,0,0,1062,4497,1,0,0,0,1064,4501,1,0,0,0,1066,4503,1,0,0,0,1068,
        4505,1,0,0,0,1070,4507,1,0,0,0,1072,4509,1,0,0,0,1074,4513,1,0,0,
        0,1076,4515,1,0,0,0,1078,4517,1,0,0,0,1080,4519,1,0,0,0,1082,4521,
        1,0,0,0,1084,4523,1,0,0,0,1086,4525,1,0,0,0,1088,4527,1,0,0,0,1090,
        4529,1,0,0,0,1092,4531,1,0,0,0,1094,4535,1,0,0,0,1096,4545,1,0,0,
        0,1098,4550,1,0,0,0,1100,4552,1,0,0,0,1102,4555,1,0,0,0,1104,4558,
        1,0,0,0,1106,4561,1,0,0,0,1108,4563,1,0,0,0,1110,4568,1,0,0,0,1112,
        4572,1,0,0,0,1114,4574,1,0,0,0,1116,4576,1,0,0,0,1118,4580,1,0,0,
        0,1120,4587,1,0,0,0,1122,4589,1,0,0,0,1124,4591,1,0,0,0,1126,4593,
        1,0,0,0,1128,4595,1,0,0,0,1130,4597,1,0,0,0,1132,4599,1,0,0,0,1134,
        4601,1,0,0,0,1136,4603,1,0,0,0,1138,4606,1,0,0,0,1140,4608,1,0,0,
        0,1142,4610,1,0,0,0,1144,4612,1,0,0,0,1146,4614,1,0,0,0,1148,1150,
        3,2,1,0,1149,1151,3,34,17,0,1150,1149,1,0,0,0,1150,1151,1,0,0,0,
        1151,1152,1,0,0,0,1152,1153,5,0,0,1,1153,1158,1,0,0,0,1154,1155,
        3,34,17,0,1155,1156,5,0,0,1,1156,1158,1,0,0,0,1157,1148,1,0,0,0,
        1157,1154,1,0,0,0,1158,1,1,0,0,0,1159,1162,3,4,2,0,1160,1162,3,6,
        3,0,1161,1159,1,0,0,0,1161,1160,1,0,0,0,1162,3,1,0,0,0,1163,1165,
        3,30,15,0,1164,1163,1,0,0,0,1165,1166,1,0,0,0,1166,1164,1,0,0,0,
        1166,1167,1,0,0,0,1167,1180,1,0,0,0,1168,1170,3,10,5,0,1169,1168,
        1,0,0,0,1170,1171,1,0,0,0,1171,1169,1,0,0,0,1171,1172,1,0,0,0,1172,
        1176,1,0,0,0,1173,1175,3,30,15,0,1174,1173,1,0,0,0,1175,1178,1,0,
        0,0,1176,1174,1,0,0,0,1176,1177,1,0,0,0,1177,1180,1,0,0,0,1178,1176,
        1,0,0,0,1179,1164,1,0,0,0,1179,1169,1,0,0,0,1180,5,1,0,0,0,1181,
        1186,3,38,19,0,1182,1184,3,52,26,0,1183,1185,3,8,4,0,1184,1183,1,
        0,0,0,1184,1185,1,0,0,0,1185,1187,1,0,0,0,1186,1182,1,0,0,0,1186,
        1187,1,0,0,0,1187,1194,1,0,0,0,1188,1190,3,52,26,0,1189,1191,3,8,
        4,0,1190,1189,1,0,0,0,1190,1191,1,0,0,0,1191,1194,1,0,0,0,1192,1194,
        3,8,4,0,1193,1181,1,0,0,0,1193,1188,1,0,0,0,1193,1192,1,0,0,0,1194,
        7,1,0,0,0,1195,1198,3,46,23,0,1196,1198,3,48,24,0,1197,1195,1,0,
        0,0,1197,1196,1,0,0,0,1198,9,1,0,0,0,1199,1200,5,188,0,0,1200,1205,
        5,190,0,0,1201,1206,3,12,6,0,1202,1206,3,14,7,0,1203,1206,3,16,8,
        0,1204,1206,3,20,10,0,1205,1201,1,0,0,0,1205,1202,1,0,0,0,1205,1203,
        1,0,0,0,1205,1204,1,0,0,0,1206,11,1,0,0,0,1207,1208,5,185,0,0,1208,
        1209,3,538,269,0,1209,13,1,0,0,0,1210,1212,5,305,0,0,1211,1210,1,
        0,0,0,1211,1212,1,0,0,0,1212,1213,1,0,0,0,1213,1214,5,289,0,0,1214,
        1215,3,88,44,0,1215,15,1,0,0,0,1216,1217,5,207,0,0,1217,1218,5,324,
        0,0,1218,1219,3,18,9,0,1219,17,1,0,0,0,1220,1221,3,1114,557,0,1221,
        19,1,0,0,0,1222,1226,3,22,11,0,1223,1226,3,24,12,0,1224,1226,3,26,
        13,0,1225,1222,1,0,0,0,1225,1223,1,0,0,0,1225,1224,1,0,0,0,1226,
        21,1,0,0,0,1227,1229,5,305,0,0,1228,1227,1,0,0,0,1228,1229,1,0,0,
        0,1229,1230,1,0,0,0,1230,1231,5,289,0,0,1231,1232,3,28,14,0,1232,
        1233,3,72,36,0,1233,23,1,0,0,0,1234,1236,5,278,0,0,1235,1234,1,0,
        0,0,1235,1236,1,0,0,0,1236,1237,1,0,0,0,1237,1238,5,313,0,0,1238,
        1239,3,28,14,0,1239,1240,3,78,39,0,1240,25,1,0,0,0,1241,1242,5,225,
        0,0,1242,1243,3,28,14,0,1243,1244,3,84,42,0,1244,27,1,0,0,0,1245,
        1246,5,108,0,0,1246,1247,5,152,0,0,1247,1249,5,89,0,0,1248,1245,
        1,0,0,0,1248,1249,1,0,0,0,1249,1250,1,0,0,0,1250,1251,3,36,18,0,
        1251,29,1,0,0,0,1252,1253,5,188,0,0,1253,1255,5,179,0,0,1254,1256,
        3,32,16,0,1255,1254,1,0,0,0,1255,1256,1,0,0,0,1256,31,1,0,0,0,1257,
        1259,5,22,0,0,1258,1257,1,0,0,0,1258,1259,1,0,0,0,1259,1260,1,0,
        0,0,1260,1273,7,0,0,0,1261,1273,5,185,0,0,1262,1264,5,305,0,0,1263,
        1262,1,0,0,0,1263,1264,1,0,0,0,1264,1265,1,0,0,0,1265,1273,5,289,
        0,0,1266,1267,5,207,0,0,1267,1273,5,324,0,0,1268,1270,5,164,0,0,
        1269,1268,1,0,0,0,1269,1270,1,0,0,0,1270,1271,1,0,0,0,1271,1273,
        3,36,18,0,1272,1258,1,0,0,0,1272,1261,1,0,0,0,1272,1263,1,0,0,0,
        1272,1266,1,0,0,0,1272,1269,1,0,0,0,1273,33,1,0,0,0,1274,1275,5,
        188,0,0,1275,1276,5,54,0,0,1276,35,1,0,0,0,1277,1278,5,327,0,0,1278,
        37,1,0,0,0,1279,1280,5,199,0,0,1280,1282,5,317,0,0,1281,1283,3,40,
        20,0,1282,1281,1,0,0,0,1282,1283,1,0,0,0,1283,39,1,0,0,0,1284,1289,
        3,42,21,0,1285,1286,5,361,0,0,1286,1288,3,42,21,0,1287,1285,1,0,
        0,0,1288,1291,1,0,0,0,1289,1287,1,0,0,0,1289,1290,1,0,0,0,1290,41,
        1,0,0,0,1291,1289,1,0,0,0,1292,1293,3,44,22,0,1293,43,1,0,0,0,1294,
        1295,5,306,0,0,1295,1299,5,303,0,0,1296,1297,5,306,0,0,1297,1299,
        5,323,0,0,1298,1294,1,0,0,0,1298,1296,1,0,0,0,1299,45,1,0,0,0,1300,
        1301,5,182,0,0,1301,47,1,0,0,0,1302,1303,5,57,0,0,1303,49,1,0,0,
        0,1304,1305,5,369,0,0,1305,1306,3,52,26,0,1306,1307,5,380,0,0,1307,
        51,1,0,0,0,1308,1309,3,58,29,0,1309,53,1,0,0,0,1310,1311,5,369,0,
        0,1311,1312,3,58,29,0,1312,1313,5,380,0,0,1313,55,1,0,0,0,1314,1315,
        5,369,0,0,1315,1316,3,58,29,0,1316,1317,5,380,0,0,1317,57,1,0,0,
        0,1318,1320,3,290,145,0,1319,1318,1,0,0,0,1319,1320,1,0,0,0,1320,
        1322,1,0,0,0,1321,1323,3,60,30,0,1322,1321,1,0,0,0,1322,1323,1,0,
        0,0,1323,1324,1,0,0,0,1324,1325,3,64,32,0,1325,59,1,0,0,0,1326,1328,
        3,62,31,0,1327,1326,1,0,0,0,1328,1329,1,0,0,0,1329,1327,1,0,0,0,
        1329,1330,1,0,0,0,1330,61,1,0,0,0,1331,1335,3,70,35,0,1332,1335,
        3,76,38,0,1333,1335,3,82,41,0,1334,1331,1,0,0,0,1334,1332,1,0,0,
        0,1334,1333,1,0,0,0,1335,63,1,0,0,0,1336,1340,3,66,33,0,1337,1339,
        3,68,34,0,1338,1337,1,0,0,0,1339,1342,1,0,0,0,1340,1338,1,0,0,0,
        1340,1341,1,0,0,0,1341,65,1,0,0,0,1342,1340,1,0,0,0,1343,1347,3,
        98,49,0,1344,1347,3,130,65,0,1345,1347,3,182,91,0,1346,1343,1,0,
        0,0,1346,1344,1,0,0,0,1346,1345,1,0,0,0,1347,67,1,0,0,0,1348,1350,
        5,149,0,0,1349,1351,3,502,251,0,1350,1349,1,0,0,0,1350,1351,1,0,
        0,0,1351,1352,1,0,0,0,1352,1353,3,66,33,0,1353,69,1,0,0,0,1354,1356,
        5,305,0,0,1355,1354,1,0,0,0,1355,1356,1,0,0,0,1356,1357,1,0,0,0,
        1357,1358,5,289,0,0,1358,1359,3,1092,546,0,1359,1360,3,72,36,0,1360,
        71,1,0,0,0,1361,1363,3,676,338,0,1362,1361,1,0,0,0,1362,1363,1,0,
        0,0,1363,1364,1,0,0,0,1364,1366,3,738,369,0,1365,1362,1,0,0,0,1365,
        1366,1,0,0,0,1366,1367,1,0,0,0,1367,1368,3,74,37,0,1368,73,1,0,0,
        0,1369,1370,5,365,0,0,1370,1371,3,88,44,0,1371,75,1,0,0,0,1372,1374,
        5,278,0,0,1373,1372,1,0,0,0,1373,1374,1,0,0,0,1374,1375,1,0,0,0,
        1375,1376,5,313,0,0,1376,1377,3,1092,546,0,1377,1378,3,78,39,0,1378,
        77,1,0,0,0,1379,1381,3,676,338,0,1380,1379,1,0,0,0,1380,1381,1,0,
        0,0,1381,1382,1,0,0,0,1382,1384,3,744,372,0,1383,1380,1,0,0,0,1383,
        1384,1,0,0,0,1384,1385,1,0,0,0,1385,1386,3,80,40,0,1386,79,1,0,0,
        0,1387,1388,5,365,0,0,1388,1389,3,92,46,0,1389,81,1,0,0,0,1390,1391,
        5,225,0,0,1391,1392,3,1092,546,0,1392,1393,3,84,42,0,1393,83,1,0,
        0,0,1394,1396,3,676,338,0,1395,1394,1,0,0,0,1395,1396,1,0,0,0,1396,
        1397,1,0,0,0,1397,1399,3,674,337,0,1398,1395,1,0,0,0,1398,1399,1,
        0,0,0,1399,1400,1,0,0,0,1400,1401,3,86,43,0,1401,85,1,0,0,0,1402,
        1403,5,365,0,0,1403,1404,3,818,409,0,1404,87,1,0,0,0,1405,1410,3,
        554,277,0,1406,1410,3,96,48,0,1407,1410,3,1058,529,0,1408,1410,3,
        90,45,0,1409,1405,1,0,0,0,1409,1406,1,0,0,0,1409,1407,1,0,0,0,1409,
        1408,1,0,0,0,1410,89,1,0,0,0,1411,1412,7,1,0,0,1412,91,1,0,0,0,1413,
        1418,3,94,47,0,1414,1418,3,564,282,0,1415,1418,3,96,48,0,1416,1418,
        3,1058,529,0,1417,1413,1,0,0,0,1417,1414,1,0,0,0,1417,1415,1,0,0,
        0,1417,1416,1,0,0,0,1418,93,1,0,0,0,1419,1420,3,56,28,0,1420,95,
        1,0,0,0,1421,1422,5,228,0,0,1422,1426,3,842,421,0,1423,1426,3,844,
        422,0,1424,1426,3,848,424,0,1425,1421,1,0,0,0,1425,1423,1,0,0,0,
        1425,1424,1,0,0,0,1426,97,1,0,0,0,1427,1429,3,100,50,0,1428,1427,
        1,0,0,0,1429,1430,1,0,0,0,1430,1428,1,0,0,0,1430,1431,1,0,0,0,1431,
        99,1,0,0,0,1432,1435,3,102,51,0,1433,1435,3,128,64,0,1434,1432,1,
        0,0,0,1434,1433,1,0,0,0,1435,101,1,0,0,0,1436,1443,3,104,52,0,1437,
        1443,3,106,53,0,1438,1443,3,108,54,0,1439,1443,3,118,59,0,1440,1443,
        3,120,60,0,1441,1443,3,126,63,0,1442,1436,1,0,0,0,1442,1437,1,0,
        0,0,1442,1438,1,0,0,0,1442,1439,1,0,0,0,1442,1440,1,0,0,0,1442,1441,
        1,0,0,0,1443,103,1,0,0,0,1444,1445,5,63,0,0,1445,1449,5,185,0,0,
        1446,1447,5,108,0,0,1447,1448,5,152,0,0,1448,1450,5,89,0,0,1449,
        1446,1,0,0,0,1449,1450,1,0,0,0,1450,1451,1,0,0,0,1451,1452,3,542,
        271,0,1452,105,1,0,0,0,1453,1454,5,82,0,0,1454,1457,5,185,0,0,1455,
        1456,5,108,0,0,1456,1458,5,89,0,0,1457,1455,1,0,0,0,1457,1458,1,
        0,0,0,1458,1459,1,0,0,0,1459,1460,3,542,271,0,1460,107,1,0,0,0,1461,
        1477,5,63,0,0,1462,1464,5,305,0,0,1463,1462,1,0,0,0,1463,1464,1,
        0,0,0,1464,1465,1,0,0,0,1465,1469,5,289,0,0,1466,1467,5,108,0,0,
        1467,1468,5,152,0,0,1468,1470,5,89,0,0,1469,1466,1,0,0,0,1469,1470,
        1,0,0,0,1470,1478,1,0,0,0,1471,1472,5,161,0,0,1472,1474,5,178,0,
        0,1473,1475,5,305,0,0,1474,1473,1,0,0,0,1474,1475,1,0,0,0,1475,1476,
        1,0,0,0,1476,1478,5,289,0,0,1477,1463,1,0,0,0,1477,1471,1,0,0,0,
        1478,1479,1,0,0,0,1479,1482,3,556,278,0,1480,1483,3,110,55,0,1481,
        1483,3,112,56,0,1482,1480,1,0,0,0,1482,1481,1,0,0,0,1483,1485,1,
        0,0,0,1484,1486,3,116,58,0,1485,1484,1,0,0,0,1485,1486,1,0,0,0,1486,
        109,1,0,0,0,1487,1489,3,676,338,0,1488,1487,1,0,0,0,1488,1489,1,
        0,0,0,1489,1490,1,0,0,0,1490,1495,5,25,0,0,1491,1493,5,305,0,0,1492,
        1491,1,0,0,0,1492,1493,1,0,0,0,1493,1494,1,0,0,0,1494,1496,5,289,
        0,0,1495,1492,1,0,0,0,1495,1496,1,0,0,0,1496,111,1,0,0,0,1497,1513,
        3,114,57,0,1498,1500,3,676,338,0,1499,1498,1,0,0,0,1499,1500,1,0,
        0,0,1500,1501,1,0,0,0,1501,1513,3,560,280,0,1502,1504,3,676,338,
        0,1503,1502,1,0,0,0,1503,1504,1,0,0,0,1504,1509,1,0,0,0,1505,1507,
        5,305,0,0,1506,1505,1,0,0,0,1506,1507,1,0,0,0,1507,1508,1,0,0,0,
        1508,1510,5,289,0,0,1509,1506,1,0,0,0,1509,1510,1,0,0,0,1510,1511,
        1,0,0,0,1511,1513,3,574,287,0,1512,1497,1,0,0,0,1512,1499,1,0,0,
        0,1512,1503,1,0,0,0,1513,113,1,0,0,0,1514,1515,5,131,0,0,1515,1516,
        3,88,44,0,1516,115,1,0,0,0,1517,1518,5,27,0,0,1518,1519,5,58,0,0,
        1519,1520,5,158,0,0,1520,1521,3,88,44,0,1521,117,1,0,0,0,1522,1524,
        5,82,0,0,1523,1525,5,305,0,0,1524,1523,1,0,0,0,1524,1525,1,0,0,0,
        1525,1526,1,0,0,0,1526,1529,5,289,0,0,1527,1528,5,108,0,0,1528,1530,
        5,89,0,0,1529,1527,1,0,0,0,1529,1530,1,0,0,0,1530,1531,1,0,0,0,1531,
        1532,3,556,278,0,1532,119,1,0,0,0,1533,1551,5,63,0,0,1534,1536,5,
        305,0,0,1535,1534,1,0,0,0,1535,1536,1,0,0,0,1536,1537,1,0,0,0,1537,
        1538,5,289,0,0,1538,1542,5,318,0,0,1539,1540,5,108,0,0,1540,1541,
        5,152,0,0,1541,1543,5,89,0,0,1542,1539,1,0,0,0,1542,1543,1,0,0,0,
        1543,1552,1,0,0,0,1544,1545,5,161,0,0,1545,1547,5,178,0,0,1546,1548,
        5,305,0,0,1547,1546,1,0,0,0,1547,1548,1,0,0,0,1548,1549,1,0,0,0,
        1549,1550,5,289,0,0,1550,1552,5,318,0,0,1551,1535,1,0,0,0,1551,1544,
        1,0,0,0,1552,1553,1,0,0,0,1553,1554,3,562,281,0,1554,1555,3,122,
        61,0,1555,121,1,0,0,0,1556,1558,5,27,0,0,1557,1556,1,0,0,0,1557,
        1558,1,0,0,0,1558,1559,1,0,0,0,1559,1566,3,124,62,0,1560,1566,3,
        114,57,0,1561,1563,5,27,0,0,1562,1561,1,0,0,0,1562,1563,1,0,0,0,
        1563,1564,1,0,0,0,1564,1566,3,574,287,0,1565,1557,1,0,0,0,1565,1560,
        1,0,0,0,1565,1562,1,0,0,0,1566,123,1,0,0,0,1567,1568,5,58,0,0,1568,
        1569,5,158,0,0,1569,1570,3,560,280,0,1570,125,1,0,0,0,1571,1573,
        5,82,0,0,1572,1574,5,305,0,0,1573,1572,1,0,0,0,1573,1574,1,0,0,0,
        1574,1575,1,0,0,0,1575,1576,5,289,0,0,1576,1579,5,318,0,0,1577,1578,
        5,108,0,0,1578,1580,5,89,0,0,1579,1577,1,0,0,0,1579,1580,1,0,0,0,
        1580,1581,1,0,0,0,1581,1582,3,562,281,0,1582,127,1,0,0,0,1583,1584,
        3,274,137,0,1584,129,1,0,0,0,1585,1588,3,132,66,0,1586,1588,3,138,
        69,0,1587,1585,1,0,0,0,1587,1586,1,0,0,0,1588,131,1,0,0,0,1589,1592,
        3,134,67,0,1590,1592,3,136,68,0,1591,1589,1,0,0,0,1591,1590,1,0,
        0,0,1592,133,1,0,0,0,1593,1594,3,292,146,0,1594,1596,3,142,71,0,
        1595,1597,3,244,122,0,1596,1595,1,0,0,0,1596,1597,1,0,0,0,1597,135,
        1,0,0,0,1598,1599,3,292,146,0,1599,1600,3,54,27,0,1600,137,1,0,0,
        0,1601,1604,3,140,70,0,1602,1604,3,54,27,0,1603,1601,1,0,0,0,1603,
        1602,1,0,0,0,1604,139,1,0,0,0,1605,1607,3,142,71,0,1606,1608,3,244,
        122,0,1607,1606,1,0,0,0,1607,1608,1,0,0,0,1608,141,1,0,0,0,1609,
        1611,3,144,72,0,1610,1609,1,0,0,0,1611,1612,1,0,0,0,1612,1610,1,
        0,0,0,1612,1613,1,0,0,0,1613,143,1,0,0,0,1614,1617,3,208,104,0,1615,
        1617,3,146,73,0,1616,1614,1,0,0,0,1616,1615,1,0,0,0,1617,145,1,0,
        0,0,1618,1621,3,148,74,0,1619,1621,3,180,90,0,1620,1618,1,0,0,0,
        1620,1619,1,0,0,0,1621,147,1,0,0,0,1622,1627,3,150,75,0,1623,1627,
        3,152,76,0,1624,1627,3,164,82,0,1625,1627,3,174,87,0,1626,1622,1,
        0,0,0,1626,1623,1,0,0,0,1626,1624,1,0,0,0,1626,1625,1,0,0,0,1627,
        149,1,0,0,0,1628,1629,5,110,0,0,1629,1630,3,324,162,0,1630,151,1,
        0,0,0,1631,1632,5,190,0,0,1632,1633,3,154,77,0,1633,153,1,0,0,0,
        1634,1639,3,156,78,0,1635,1636,5,361,0,0,1636,1638,3,156,78,0,1637,
        1635,1,0,0,0,1638,1641,1,0,0,0,1639,1637,1,0,0,0,1639,1640,1,0,0,
        0,1640,155,1,0,0,0,1641,1639,1,0,0,0,1642,1646,3,158,79,0,1643,1646,
        3,160,80,0,1644,1646,3,162,81,0,1645,1642,1,0,0,0,1645,1643,1,0,
        0,0,1645,1644,1,0,0,0,1646,157,1,0,0,0,1647,1648,3,912,456,0,1648,
        1649,5,375,0,0,1649,1650,3,1082,541,0,1650,1651,5,365,0,0,1651,1652,
        3,818,409,0,1652,159,1,0,0,0,1653,1654,3,912,456,0,1654,1655,5,365,
        0,0,1655,1657,5,369,0,0,1656,1658,3,398,199,0,1657,1656,1,0,0,0,
        1657,1658,1,0,0,0,1658,1659,1,0,0,0,1659,1660,5,380,0,0,1660,161,
        1,0,0,0,1661,1662,3,912,456,0,1662,1663,3,390,195,0,1663,1664,3,
        1080,540,0,1664,163,1,0,0,0,1665,1666,5,177,0,0,1666,1667,3,166,
        83,0,1667,165,1,0,0,0,1668,1673,3,168,84,0,1669,1670,5,361,0,0,1670,
        1672,3,168,84,0,1671,1669,1,0,0,0,1672,1675,1,0,0,0,1673,1671,1,
        0,0,0,1673,1674,1,0,0,0,1674,167,1,0,0,0,1675,1673,1,0,0,0,1676,
        1679,3,170,85,0,1677,1679,3,172,86,0,1678,1676,1,0,0,0,1678,1677,
        1,0,0,0,1679,169,1,0,0,0,1680,1681,3,912,456,0,1681,1682,5,375,0,
        0,1682,1683,3,1082,541,0,1683,171,1,0,0,0,1684,1685,3,912,456,0,
        1685,1686,3,390,195,0,1686,1687,3,1080,540,0,1687,173,1,0,0,0,1688,
        1690,7,2,0,0,1689,1688,1,0,0,0,1689,1690,1,0,0,0,1690,1691,1,0,0,
        0,1691,1692,5,76,0,0,1692,1693,3,176,88,0,1693,175,1,0,0,0,1694,
        1699,3,178,89,0,1695,1696,5,361,0,0,1696,1698,3,178,89,0,1697,1695,
        1,0,0,0,1698,1701,1,0,0,0,1699,1697,1,0,0,0,1699,1700,1,0,0,0,1700,
        177,1,0,0,0,1701,1699,1,0,0,0,1702,1703,3,818,409,0,1703,179,1,0,
        0,0,1704,1705,3,274,137,0,1705,181,1,0,0,0,1706,1707,3,184,92,0,
        1707,183,1,0,0,0,1708,1709,6,92,-1,0,1709,1710,3,190,95,0,1710,1717,
        1,0,0,0,1711,1712,10,2,0,0,1712,1713,3,186,93,0,1713,1714,3,190,
        95,0,1714,1716,1,0,0,0,1715,1711,1,0,0,0,1716,1719,1,0,0,0,1717,
        1715,1,0,0,0,1717,1718,1,0,0,0,1718,185,1,0,0,0,1719,1717,1,0,0,
        0,1720,1723,3,188,94,0,1721,1723,5,163,0,0,1722,1720,1,0,0,0,1722,
        1721,1,0,0,0,1723,187,1,0,0,0,1724,1726,5,220,0,0,1725,1727,3,902,
        451,0,1726,1725,1,0,0,0,1726,1727,1,0,0,0,1727,1737,1,0,0,0,1728,
        1730,5,88,0,0,1729,1731,3,902,451,0,1730,1729,1,0,0,0,1730,1731,
        1,0,0,0,1731,1737,1,0,0,0,1732,1734,5,125,0,0,1733,1735,3,902,451,
        0,1734,1733,1,0,0,0,1734,1735,1,0,0,0,1735,1737,1,0,0,0,1736,1724,
        1,0,0,0,1736,1728,1,0,0,0,1736,1732,1,0,0,0,1737,189,1,0,0,0,1738,
        1739,3,192,96,0,1739,191,1,0,0,0,1740,1743,3,194,97,0,1741,1743,
        3,204,102,0,1742,1740,1,0,0,0,1742,1741,1,0,0,0,1743,193,1,0,0,0,
        1744,1746,3,196,98,0,1745,1744,1,0,0,0,1746,1749,1,0,0,0,1747,1745,
        1,0,0,0,1747,1748,1,0,0,0,1748,1750,1,0,0,0,1749,1747,1,0,0,0,1750,
        1755,3,198,99,0,1751,1755,3,200,100,0,1752,1755,3,202,101,0,1753,
        1755,3,256,128,0,1754,1747,1,0,0,0,1754,1751,1,0,0,0,1754,1752,1,
        0,0,0,1754,1753,1,0,0,0,1755,195,1,0,0,0,1756,1757,3,292,146,0,1757,
        1758,3,206,103,0,1758,197,1,0,0,0,1759,1760,3,292,146,0,1760,1761,
        3,206,103,0,1761,1762,3,244,122,0,1762,199,1,0,0,0,1763,1764,3,292,
        146,0,1764,1765,3,244,122,0,1765,201,1,0,0,0,1766,1767,3,292,146,
        0,1767,1768,3,56,28,0,1768,203,1,0,0,0,1769,1771,3,206,103,0,1770,
        1769,1,0,0,0,1770,1771,1,0,0,0,1771,1772,1,0,0,0,1772,1775,3,244,
        122,0,1773,1775,3,56,28,0,1774,1770,1,0,0,0,1774,1773,1,0,0,0,1775,
        205,1,0,0,0,1776,1778,3,208,104,0,1777,1776,1,0,0,0,1778,1779,1,
        0,0,0,1779,1777,1,0,0,0,1779,1780,1,0,0,0,1780,207,1,0,0,0,1781,
        1784,3,210,105,0,1782,1784,3,222,111,0,1783,1781,1,0,0,0,1783,1782,
        1,0,0,0,1784,209,1,0,0,0,1785,1791,3,212,106,0,1786,1791,3,226,113,
        0,1787,1791,3,232,116,0,1788,1791,3,224,112,0,1789,1791,3,242,121,
        0,1790,1785,1,0,0,0,1790,1786,1,0,0,0,1790,1787,1,0,0,0,1790,1788,
        1,0,0,0,1790,1789,1,0,0,0,1791,211,1,0,0,0,1792,1795,3,214,107,0,
        1793,1795,3,216,108,0,1794,1792,1,0,0,0,1794,1793,1,0,0,0,1795,213,
        1,0,0,0,1796,1797,5,143,0,0,1797,1798,3,294,147,0,1798,215,1,0,0,
        0,1799,1800,5,160,0,0,1800,1801,3,218,109,0,1801,217,1,0,0,0,1802,
        1812,3,214,107,0,1803,1804,5,369,0,0,1804,1805,3,220,110,0,1805,
        1806,5,380,0,0,1806,1812,1,0,0,0,1807,1808,5,371,0,0,1808,1809,3,
        220,110,0,1809,1810,5,382,0,0,1810,1812,1,0,0,0,1811,1802,1,0,0,
        0,1811,1803,1,0,0,0,1811,1807,1,0,0,0,1812,219,1,0,0,0,1813,1815,
        3,212,106,0,1814,1813,1,0,0,0,1815,1816,1,0,0,0,1816,1814,1,0,0,
        0,1816,1817,1,0,0,0,1817,221,1,0,0,0,1818,1819,3,274,137,0,1819,
        223,1,0,0,0,1820,1823,5,91,0,0,1821,1824,3,500,250,0,1822,1824,3,
        774,387,0,1823,1821,1,0,0,0,1823,1822,1,0,0,0,1824,225,1,0,0,0,1825,
        1826,5,130,0,0,1826,1827,3,228,114,0,1827,227,1,0,0,0,1828,1833,
        3,230,115,0,1829,1830,5,361,0,0,1830,1832,3,230,115,0,1831,1829,
        1,0,0,0,1832,1835,1,0,0,0,1833,1831,1,0,0,0,1833,1834,1,0,0,0,1834,
        229,1,0,0,0,1835,1833,1,0,0,0,1836,1842,3,82,41,0,1837,1838,3,1092,
        546,0,1838,1839,5,365,0,0,1839,1840,3,818,409,0,1840,1842,1,0,0,
        0,1841,1836,1,0,0,0,1841,1837,1,0,0,0,1842,231,1,0,0,0,1843,1844,
        5,100,0,0,1844,1846,3,234,117,0,1845,1847,3,240,120,0,1846,1845,
        1,0,0,0,1846,1847,1,0,0,0,1847,233,1,0,0,0,1848,1849,3,236,118,0,
        1849,1850,3,238,119,0,1850,235,1,0,0,0,1851,1852,3,1092,546,0,1852,
        1853,5,109,0,0,1853,237,1,0,0,0,1854,1855,3,818,409,0,1855,239,1,
        0,0,0,1856,1857,5,231,0,0,1857,1858,7,3,0,0,1858,1859,3,1092,546,
        0,1859,241,1,0,0,0,1860,1862,3,520,260,0,1861,1863,3,534,267,0,1862,
        1861,1,0,0,0,1862,1863,1,0,0,0,1863,1865,1,0,0,0,1864,1866,3,532,
        266,0,1865,1864,1,0,0,0,1865,1866,1,0,0,0,1866,1873,1,0,0,0,1867,
        1869,3,534,267,0,1868,1870,3,532,266,0,1869,1868,1,0,0,0,1869,1870,
        1,0,0,0,1870,1873,1,0,0,0,1871,1873,3,532,266,0,1872,1860,1,0,0,
        0,1872,1867,1,0,0,0,1872,1871,1,0,0,0,1873,243,1,0,0,0,1874,1876,
        3,246,123,0,1875,1877,3,242,121,0,1876,1875,1,0,0,0,1876,1877,1,
        0,0,0,1877,1880,1,0,0,0,1878,1880,5,92,0,0,1879,1874,1,0,0,0,1879,
        1878,1,0,0,0,1880,245,1,0,0,0,1881,1882,5,180,0,0,1882,1883,3,248,
        124,0,1883,247,1,0,0,0,1884,1886,3,902,451,0,1885,1884,1,0,0,0,1885,
        1886,1,0,0,0,1886,1889,1,0,0,0,1887,1890,5,359,0,0,1888,1890,3,250,
        125,0,1889,1887,1,0,0,0,1889,1888,1,0,0,0,1890,1892,1,0,0,0,1891,
        1893,3,512,256,0,1892,1891,1,0,0,0,1892,1893,1,0,0,0,1893,1897,1,
        0,0,0,1894,1895,5,300,0,0,1895,1897,5,279,0,0,1896,1885,1,0,0,0,
        1896,1894,1,0,0,0,1897,249,1,0,0,0,1898,1903,3,252,126,0,1899,1900,
        5,361,0,0,1900,1902,3,252,126,0,1901,1899,1,0,0,0,1902,1905,1,0,
        0,0,1903,1901,1,0,0,0,1903,1904,1,0,0,0,1904,251,1,0,0,0,1905,1903,
        1,0,0,0,1906,1908,3,840,420,0,1907,1909,3,254,127,0,1908,1907,1,
        0,0,0,1908,1909,1,0,0,0,1909,253,1,0,0,0,1910,1911,5,27,0,0,1911,
        1912,3,1110,555,0,1912,255,1,0,0,0,1913,1915,5,187,0,0,1914,1916,
        3,902,451,0,1915,1914,1,0,0,0,1915,1916,1,0,0,0,1916,1919,1,0,0,
        0,1917,1920,5,359,0,0,1918,1920,3,258,129,0,1919,1917,1,0,0,0,1919,
        1918,1,0,0,0,1920,1940,1,0,0,0,1921,1923,3,266,133,0,1922,1924,3,
        500,250,0,1923,1922,1,0,0,0,1923,1924,1,0,0,0,1924,1926,1,0,0,0,
        1925,1927,3,512,256,0,1926,1925,1,0,0,0,1926,1927,1,0,0,0,1927,1929,
        1,0,0,0,1928,1930,3,264,132,0,1929,1928,1,0,0,0,1929,1930,1,0,0,
        0,1930,1932,1,0,0,0,1931,1933,3,520,260,0,1932,1931,1,0,0,0,1932,
        1933,1,0,0,0,1933,1935,1,0,0,0,1934,1936,3,534,267,0,1935,1934,1,
        0,0,0,1935,1936,1,0,0,0,1936,1938,1,0,0,0,1937,1939,3,532,266,0,
        1938,1937,1,0,0,0,1938,1939,1,0,0,0,1939,1941,1,0,0,0,1940,1921,
        1,0,0,0,1940,1941,1,0,0,0,1941,257,1,0,0,0,1942,1947,3,260,130,0,
        1943,1944,5,361,0,0,1944,1946,3,260,130,0,1945,1943,1,0,0,0,1946,
        1949,1,0,0,0,1947,1945,1,0,0,0,1947,1948,1,0,0,0,1948,259,1,0,0,
        0,1949,1947,1,0,0,0,1950,1952,3,840,420,0,1951,1953,3,262,131,0,
        1952,1951,1,0,0,0,1952,1953,1,0,0,0,1953,261,1,0,0,0,1954,1955,5,
        27,0,0,1955,1956,3,1110,555,0,1956,263,1,0,0,0,1957,1958,5,103,0,
        0,1958,1959,3,774,387,0,1959,265,1,0,0,0,1960,1963,5,101,0,0,1961,
        1964,3,268,134,0,1962,1964,3,272,136,0,1963,1961,1,0,0,0,1963,1962,
        1,0,0,0,1964,267,1,0,0,0,1965,1970,3,270,135,0,1966,1967,5,361,0,
        0,1967,1969,3,270,135,0,1968,1966,1,0,0,0,1969,1972,1,0,0,0,1970,
        1968,1,0,0,0,1970,1971,1,0,0,0,1971,269,1,0,0,0,1972,1970,1,0,0,
        0,1973,1974,3,88,44,0,1974,1975,3,212,106,0,1975,271,1,0,0,0,1976,
        1981,3,56,28,0,1977,1978,3,88,44,0,1978,1979,3,56,28,0,1979,1981,
        1,0,0,0,1980,1976,1,0,0,0,1980,1977,1,0,0,0,1981,273,1,0,0,0,1982,
        1984,5,160,0,0,1983,1982,1,0,0,0,1983,1984,1,0,0,0,1984,1985,1,0,
        0,0,1985,1986,5,44,0,0,1986,1987,3,276,138,0,1987,275,1,0,0,0,1988,
        1991,3,278,139,0,1989,1991,3,284,142,0,1990,1988,1,0,0,0,1990,1989,
        1,0,0,0,1991,277,1,0,0,0,1992,1994,3,280,140,0,1993,1992,1,0,0,0,
        1993,1994,1,0,0,0,1994,1995,1,0,0,0,1995,1996,3,50,25,0,1996,279,
        1,0,0,0,1997,1999,5,371,0,0,1998,2000,3,282,141,0,1999,1998,1,0,
        0,0,1999,2000,1,0,0,0,2000,2001,1,0,0,0,2001,2002,5,382,0,0,2002,
        281,1,0,0,0,2003,2008,3,912,456,0,2004,2005,5,361,0,0,2005,2007,
        3,912,456,0,2006,2004,1,0,0,0,2007,2010,1,0,0,0,2008,2006,1,0,0,
        0,2008,2009,1,0,0,0,2009,283,1,0,0,0,2010,2008,1,0,0,0,2011,2012,
        3,566,283,0,2012,2014,5,371,0,0,2013,2015,3,286,143,0,2014,2013,
        1,0,0,0,2014,2015,1,0,0,0,2015,2016,1,0,0,0,2016,2018,5,382,0,0,
        2017,2019,3,502,251,0,2018,2017,1,0,0,0,2018,2019,1,0,0,0,2019,285,
        1,0,0,0,2020,2025,3,288,144,0,2021,2022,5,361,0,0,2022,2024,3,288,
        144,0,2023,2021,1,0,0,0,2024,2027,1,0,0,0,2025,2023,1,0,0,0,2025,
        2026,1,0,0,0,2026,287,1,0,0,0,2027,2025,1,0,0,0,2028,2029,3,818,
        409,0,2029,289,1,0,0,0,2030,2031,5,31,0,0,2031,2032,3,538,269,0,
        2032,291,1,0,0,0,2033,2034,5,223,0,0,2034,2035,3,88,44,0,2035,293,
        1,0,0,0,2036,2038,3,302,151,0,2037,2039,3,296,148,0,2038,2037,1,
        0,0,0,2038,2039,1,0,0,0,2039,295,1,0,0,0,2040,2041,5,234,0,0,2041,
        2042,3,298,149,0,2042,297,1,0,0,0,2043,2048,3,300,150,0,2044,2045,
        5,361,0,0,2045,2047,3,300,150,0,2046,2044,1,0,0,0,2047,2050,1,0,
        0,0,2048,2046,1,0,0,0,2048,2049,1,0,0,0,2049,2054,1,0,0,0,2050,2048,
        1,0,0,0,2051,2052,5,300,0,0,2052,2054,5,279,0,0,2053,2043,1,0,0,
        0,2053,2051,1,0,0,0,2054,299,1,0,0,0,2055,2056,3,912,456,0,2056,
        301,1,0,0,0,2057,2059,3,304,152,0,2058,2057,1,0,0,0,2058,2059,1,
        0,0,0,2059,2060,1,0,0,0,2060,2062,3,314,157,0,2061,2063,3,320,160,
        0,2062,2061,1,0,0,0,2062,2063,1,0,0,0,2063,2065,1,0,0,0,2064,2066,
        3,322,161,0,2065,2064,1,0,0,0,2065,2066,1,0,0,0,2066,303,1,0,0,0,
        2067,2070,3,306,153,0,2068,2070,3,308,154,0,2069,2067,1,0,0,0,2069,
        2068,1,0,0,0,2070,305,1,0,0,0,2071,2072,5,309,0,0,2072,2073,3,310,
        155,0,2073,307,1,0,0,0,2074,2075,5,282,0,0,2075,2076,3,312,156,0,
        2076,309,1,0,0,0,2077,2079,5,286,0,0,2078,2080,5,279,0,0,2079,2078,
        1,0,0,0,2079,2080,1,0,0,0,2080,2083,1,0,0,0,2081,2083,5,287,0,0,
        2082,2077,1,0,0,0,2082,2081,1,0,0,0,2083,311,1,0,0,0,2084,2086,3,
        1144,572,0,2085,2087,5,279,0,0,2086,2085,1,0,0,0,2086,2087,1,0,0,
        0,2087,2090,1,0,0,0,2088,2090,3,1142,571,0,2089,2084,1,0,0,0,2089,
        2088,1,0,0,0,2090,313,1,0,0,0,2091,2096,3,316,158,0,2092,2093,5,
        361,0,0,2093,2095,3,316,158,0,2094,2092,1,0,0,0,2095,2098,1,0,0,
        0,2096,2094,1,0,0,0,2096,2097,1,0,0,0,2097,315,1,0,0,0,2098,2096,
        1,0,0,0,2099,2101,3,318,159,0,2100,2099,1,0,0,0,2100,2101,1,0,0,
        0,2101,2103,1,0,0,0,2102,2104,3,344,172,0,2103,2102,1,0,0,0,2103,
        2104,1,0,0,0,2104,2105,1,0,0,0,2105,2106,3,372,186,0,2106,317,1,
        0,0,0,2107,2108,3,1088,544,0,2108,2109,5,365,0,0,2109,319,1,0,0,
        0,2110,2111,5,291,0,0,2111,2112,3,344,172,0,2112,321,1,0,0,0,2113,
        2114,5,230,0,0,2114,2115,3,774,387,0,2115,323,1,0,0,0,2116,2117,
        3,326,163,0,2117,325,1,0,0,0,2118,2123,3,328,164,0,2119,2120,5,361,
        0,0,2120,2122,3,328,164,0,2121,2119,1,0,0,0,2122,2125,1,0,0,0,2123,
        2121,1,0,0,0,2123,2124,1,0,0,0,2124,327,1,0,0,0,2125,2123,1,0,0,
        0,2126,2132,3,330,165,0,2127,2128,3,332,166,0,2128,2129,3,330,165,
        0,2129,2131,1,0,0,0,2130,2127,1,0,0,0,2131,2134,1,0,0,0,2132,2130,
        1,0,0,0,2132,2133,1,0,0,0,2133,329,1,0,0,0,2134,2132,1,0,0,0,2135,
        2137,5,371,0,0,2136,2138,3,340,170,0,2137,2136,1,0,0,0,2137,2138,
        1,0,0,0,2138,2139,1,0,0,0,2139,2140,5,382,0,0,2140,331,1,0,0,0,2141,
        2145,3,334,167,0,2142,2145,3,336,168,0,2143,2145,3,338,169,0,2144,
        2141,1,0,0,0,2144,2142,1,0,0,0,2144,2143,1,0,0,0,2145,333,1,0,0,
        0,2146,2148,5,338,0,0,2147,2149,3,340,170,0,2148,2147,1,0,0,0,2148,
        2149,1,0,0,0,2149,2150,1,0,0,0,2150,2151,5,348,0,0,2151,335,1,0,
        0,0,2152,2154,5,344,0,0,2153,2155,3,340,170,0,2154,2153,1,0,0,0,
        2154,2155,1,0,0,0,2155,2156,1,0,0,0,2156,2157,5,329,0,0,2157,337,
        1,0,0,0,2158,2160,5,355,0,0,2159,2161,3,340,170,0,2160,2159,1,0,
        0,0,2160,2161,1,0,0,0,2161,2162,1,0,0,0,2162,2163,5,349,0,0,2163,
        339,1,0,0,0,2164,2166,3,386,193,0,2165,2167,3,342,171,0,2166,2165,
        1,0,0,0,2166,2167,1,0,0,0,2167,2173,1,0,0,0,2168,2170,3,386,193,
        0,2169,2168,1,0,0,0,2169,2170,1,0,0,0,2170,2171,1,0,0,0,2171,2173,
        3,342,171,0,2172,2164,1,0,0,0,2172,2169,1,0,0,0,2173,341,1,0,0,0,
        2174,2175,3,390,195,0,2175,2177,3,662,331,0,2176,2178,3,396,198,
        0,2177,2176,1,0,0,0,2177,2178,1,0,0,0,2178,2186,1,0,0,0,2179,2180,
        3,390,195,0,2180,2181,3,662,331,0,2181,2183,1,0,0,0,2182,2179,1,
        0,0,0,2182,2183,1,0,0,0,2183,2184,1,0,0,0,2184,2186,3,396,198,0,
        2185,2174,1,0,0,0,2185,2182,1,0,0,0,2186,343,1,0,0,0,2187,2190,3,
        346,173,0,2188,2190,3,350,175,0,2189,2187,1,0,0,0,2189,2188,1,0,
        0,0,2190,345,1,0,0,0,2191,2193,3,348,174,0,2192,2194,3,354,177,0,
        2193,2192,1,0,0,0,2193,2194,1,0,0,0,2194,347,1,0,0,0,2195,2196,7,
        4,0,0,2196,349,1,0,0,0,2197,2201,3,352,176,0,2198,2201,3,356,178,
        0,2199,2201,3,360,180,0,2200,2197,1,0,0,0,2200,2198,1,0,0,0,2200,
        2199,1,0,0,0,2201,351,1,0,0,0,2202,2204,5,22,0,0,2203,2205,3,348,
        174,0,2204,2203,1,0,0,0,2204,2205,1,0,0,0,2205,2207,1,0,0,0,2206,
        2208,3,354,177,0,2207,2206,1,0,0,0,2207,2208,1,0,0,0,2208,353,1,
        0,0,0,2209,2210,7,5,0,0,2210,355,1,0,0,0,2211,2213,5,25,0,0,2212,
        2214,3,358,179,0,2213,2212,1,0,0,0,2213,2214,1,0,0,0,2214,2216,1,
        0,0,0,2215,2217,3,348,174,0,2216,2215,1,0,0,0,2216,2217,1,0,0,0,
        2217,2219,1,0,0,0,2218,2220,3,354,177,0,2219,2218,1,0,0,0,2219,2220,
        1,0,0,0,2220,357,1,0,0,0,2221,2222,3,852,426,0,2222,359,1,0,0,0,
        2223,2228,3,362,181,0,2224,2228,3,364,182,0,2225,2228,3,366,183,
        0,2226,2228,3,368,184,0,2227,2223,1,0,0,0,2227,2224,1,0,0,0,2227,
        2225,1,0,0,0,2227,2226,1,0,0,0,2228,361,1,0,0,0,2229,2230,5,22,0,
        0,2230,2232,5,310,0,0,2231,2233,3,348,174,0,2232,2231,1,0,0,0,2232,
        2233,1,0,0,0,2233,2235,1,0,0,0,2234,2236,3,354,177,0,2235,2234,1,
        0,0,0,2235,2236,1,0,0,0,2236,363,1,0,0,0,2237,2238,5,25,0,0,2238,
        2240,5,310,0,0,2239,2241,3,348,174,0,2240,2239,1,0,0,0,2240,2241,
        1,0,0,0,2241,2243,1,0,0,0,2242,2244,3,354,177,0,2243,2242,1,0,0,
        0,2243,2244,1,0,0,0,2244,365,1,0,0,0,2245,2246,5,310,0,0,2246,2248,
        3,358,179,0,2247,2249,3,348,174,0,2248,2247,1,0,0,0,2248,2249,1,
        0,0,0,2249,2251,1,0,0,0,2250,2252,3,354,177,0,2251,2250,1,0,0,0,
        2251,2252,1,0,0,0,2252,367,1,0,0,0,2253,2255,5,310,0,0,2254,2256,
        3,370,185,0,2255,2254,1,0,0,0,2255,2256,1,0,0,0,2256,2258,1,0,0,
        0,2257,2259,3,348,174,0,2258,2257,1,0,0,0,2258,2259,1,0,0,0,2259,
        2261,1,0,0,0,2260,2262,3,354,177,0,2261,2260,1,0,0,0,2261,2262,1,
        0,0,0,2262,2263,1,0,0,0,2263,2264,7,6,0,0,2264,369,1,0,0,0,2265,
        2266,3,852,426,0,2266,371,1,0,0,0,2267,2283,3,374,187,0,2268,2271,
        3,374,187,0,2269,2270,5,328,0,0,2270,2272,3,374,187,0,2271,2269,
        1,0,0,0,2272,2273,1,0,0,0,2273,2271,1,0,0,0,2273,2274,1,0,0,0,2274,
        2283,1,0,0,0,2275,2278,3,374,187,0,2276,2277,5,386,0,0,2277,2279,
        3,374,187,0,2278,2276,1,0,0,0,2279,2280,1,0,0,0,2280,2278,1,0,0,
        0,2280,2281,1,0,0,0,2281,2283,1,0,0,0,2282,2267,1,0,0,0,2282,2268,
        1,0,0,0,2282,2275,1,0,0,0,2283,373,1,0,0,0,2284,2286,3,376,188,0,
        2285,2284,1,0,0,0,2286,2287,1,0,0,0,2287,2285,1,0,0,0,2287,2288,
        1,0,0,0,2288,375,1,0,0,0,2289,2297,3,378,189,0,2290,2291,3,378,189,
        0,2291,2292,3,434,217,0,2292,2297,1,0,0,0,2293,2294,3,378,189,0,
        2294,2295,5,377,0,0,2295,2297,1,0,0,0,2296,2289,1,0,0,0,2296,2290,
        1,0,0,0,2296,2293,1,0,0,0,2297,377,1,0,0,0,2298,2302,3,380,190,0,
        2299,2302,3,422,211,0,2300,2302,3,444,222,0,2301,2298,1,0,0,0,2301,
        2299,1,0,0,0,2301,2300,1,0,0,0,2302,379,1,0,0,0,2303,2306,3,382,
        191,0,2304,2306,3,402,201,0,2305,2303,1,0,0,0,2305,2304,1,0,0,0,
        2306,381,1,0,0,0,2307,2308,5,371,0,0,2308,2309,3,384,192,0,2309,
        2310,5,382,0,0,2310,383,1,0,0,0,2311,2313,3,386,193,0,2312,2311,
        1,0,0,0,2312,2313,1,0,0,0,2313,2315,1,0,0,0,2314,2316,3,388,194,
        0,2315,2314,1,0,0,0,2315,2316,1,0,0,0,2316,2318,1,0,0,0,2317,2319,
        3,392,196,0,2318,2317,1,0,0,0,2318,2319,1,0,0,0,2319,385,1,0,0,0,
        2320,2322,5,314,0,0,2321,2320,1,0,0,0,2321,2322,1,0,0,0,2322,2323,
        1,0,0,0,2323,2324,3,1086,543,0,2324,387,1,0,0,0,2325,2326,3,390,
        195,0,2326,2327,3,428,214,0,2327,389,1,0,0,0,2328,2329,7,7,0,0,2329,
        391,1,0,0,0,2330,2333,3,394,197,0,2331,2333,3,396,198,0,2332,2330,
        1,0,0,0,2332,2331,1,0,0,0,2333,393,1,0,0,0,2334,2335,5,230,0,0,2335,
        2336,3,774,387,0,2336,395,1,0,0,0,2337,2338,5,369,0,0,2338,2339,
        3,398,199,0,2339,2340,5,380,0,0,2340,397,1,0,0,0,2341,2346,3,400,
        200,0,2342,2343,5,361,0,0,2343,2345,3,400,200,0,2344,2342,1,0,0,
        0,2345,2348,1,0,0,0,2346,2344,1,0,0,0,2346,2347,1,0,0,0,2347,399,
        1,0,0,0,2348,2346,1,0,0,0,2349,2350,3,1082,541,0,2350,2351,5,360,
        0,0,2351,2352,3,818,409,0,2352,401,1,0,0,0,2353,2356,3,404,202,0,
        2354,2356,3,420,210,0,2355,2353,1,0,0,0,2355,2354,1,0,0,0,2356,403,
        1,0,0,0,2357,2365,3,406,203,0,2358,2365,3,408,204,0,2359,2365,3,
        410,205,0,2360,2365,3,412,206,0,2361,2365,3,414,207,0,2362,2365,
        3,416,208,0,2363,2365,3,418,209,0,2364,2357,1,0,0,0,2364,2358,1,
        0,0,0,2364,2359,1,0,0,0,2364,2360,1,0,0,0,2364,2361,1,0,0,0,2364,
        2362,1,0,0,0,2364,2363,1,0,0,0,2365,405,1,0,0,0,2366,2367,5,338,
        0,0,2367,2368,3,384,192,0,2368,2369,5,348,0,0,2369,407,1,0,0,0,2370,
        2371,5,355,0,0,2371,2372,3,384,192,0,2372,2373,5,349,0,0,2373,409,
        1,0,0,0,2374,2375,5,344,0,0,2375,2376,3,384,192,0,2376,2377,5,329,
        0,0,2377,411,1,0,0,0,2378,2379,5,339,0,0,2379,2380,3,384,192,0,2380,
        2381,5,349,0,0,2381,413,1,0,0,0,2382,2383,5,355,0,0,2383,2384,3,
        384,192,0,2384,2385,5,330,0,0,2385,415,1,0,0,0,2386,2387,5,338,0,
        0,2387,2388,3,384,192,0,2388,2389,5,329,0,0,2389,417,1,0,0,0,2390,
        2391,5,344,0,0,2391,2392,3,384,192,0,2392,2393,5,348,0,0,2393,419,
        1,0,0,0,2394,2395,7,8,0,0,2395,421,1,0,0,0,2396,2398,5,371,0,0,2397,
        2399,3,424,212,0,2398,2397,1,0,0,0,2398,2399,1,0,0,0,2399,2401,1,
        0,0,0,2400,2402,3,346,173,0,2401,2400,1,0,0,0,2401,2402,1,0,0,0,
        2402,2403,1,0,0,0,2403,2405,3,372,186,0,2404,2406,3,426,213,0,2405,
        2404,1,0,0,0,2405,2406,1,0,0,0,2406,2407,1,0,0,0,2407,2408,5,382,
        0,0,2408,423,1,0,0,0,2409,2410,3,1090,545,0,2410,2411,5,365,0,0,
        2411,425,1,0,0,0,2412,2413,5,230,0,0,2413,2414,3,774,387,0,2414,
        427,1,0,0,0,2415,2416,6,214,-1,0,2416,2417,5,366,0,0,2417,2425,3,
        428,214,6,2418,2425,3,1080,540,0,2419,2425,5,374,0,0,2420,2421,5,
        371,0,0,2421,2422,3,428,214,0,2422,2423,5,382,0,0,2423,2425,1,0,
        0,0,2424,2415,1,0,0,0,2424,2418,1,0,0,0,2424,2419,1,0,0,0,2424,2420,
        1,0,0,0,2425,2434,1,0,0,0,2426,2427,10,5,0,0,2427,2428,5,358,0,0,
        2428,2433,3,428,214,6,2429,2430,10,4,0,0,2430,2431,5,386,0,0,2431,
        2433,3,428,214,5,2432,2426,1,0,0,0,2432,2429,1,0,0,0,2433,2436,1,
        0,0,0,2434,2432,1,0,0,0,2434,2435,1,0,0,0,2435,429,1,0,0,0,2436,
        2434,1,0,0,0,2437,2438,3,912,456,0,2438,431,1,0,0,0,2439,2440,3,
        912,456,0,2440,433,1,0,0,0,2441,2446,5,359,0,0,2442,2446,5,376,0,
        0,2443,2446,3,436,218,0,2444,2446,3,438,219,0,2445,2441,1,0,0,0,
        2445,2442,1,0,0,0,2445,2443,1,0,0,0,2445,2444,1,0,0,0,2446,435,1,
        0,0,0,2447,2448,5,369,0,0,2448,2449,3,1124,562,0,2449,2450,5,380,
        0,0,2450,437,1,0,0,0,2451,2453,5,369,0,0,2452,2454,3,440,220,0,2453,
        2452,1,0,0,0,2453,2454,1,0,0,0,2454,2455,1,0,0,0,2455,2457,5,361,
        0,0,2456,2458,3,442,221,0,2457,2456,1,0,0,0,2457,2458,1,0,0,0,2458,
        2459,1,0,0,0,2459,2460,5,380,0,0,2460,439,1,0,0,0,2461,2462,3,1124,
        562,0,2462,441,1,0,0,0,2463,2464,3,1124,562,0,2464,443,1,0,0,0,2465,
        2473,3,446,223,0,2466,2473,3,448,224,0,2467,2473,3,450,225,0,2468,
        2473,3,452,226,0,2469,2473,3,454,227,0,2470,2473,3,456,228,0,2471,
        2473,3,458,229,0,2472,2465,1,0,0,0,2472,2466,1,0,0,0,2472,2467,1,
        0,0,0,2472,2468,1,0,0,0,2472,2469,1,0,0,0,2472,2470,1,0,0,0,2472,
        2471,1,0,0,0,2473,445,1,0,0,0,2474,2475,5,341,0,0,2475,2476,3,460,
        230,0,2476,2477,5,351,0,0,2477,447,1,0,0,0,2478,2479,5,357,0,0,2479,
        2480,3,460,230,0,2480,2481,5,353,0,0,2481,449,1,0,0,0,2482,2483,
        5,345,0,0,2483,2484,3,460,230,0,2484,2485,5,352,0,0,2485,451,1,0,
        0,0,2486,2487,5,342,0,0,2487,2488,3,460,230,0,2488,2489,5,353,0,
        0,2489,453,1,0,0,0,2490,2491,5,357,0,0,2491,2492,3,460,230,0,2492,
        2493,5,354,0,0,2493,455,1,0,0,0,2494,2495,5,341,0,0,2495,2496,3,
        460,230,0,2496,2497,5,352,0,0,2497,457,1,0,0,0,2498,2499,5,345,0,
        0,2499,2500,3,460,230,0,2500,2501,5,351,0,0,2501,459,1,0,0,0,2502,
        2506,3,466,233,0,2503,2506,3,462,231,0,2504,2506,3,464,232,0,2505,
        2502,1,0,0,0,2505,2503,1,0,0,0,2505,2504,1,0,0,0,2506,461,1,0,0,
        0,2507,2508,3,466,233,0,2508,2509,5,386,0,0,2509,2514,3,466,233,
        0,2510,2511,5,386,0,0,2511,2513,3,466,233,0,2512,2510,1,0,0,0,2513,
        2516,1,0,0,0,2514,2512,1,0,0,0,2514,2515,1,0,0,0,2515,463,1,0,0,
        0,2516,2514,1,0,0,0,2517,2518,3,466,233,0,2518,2519,5,328,0,0,2519,
        2524,3,466,233,0,2520,2521,5,328,0,0,2521,2523,3,466,233,0,2522,
        2520,1,0,0,0,2523,2526,1,0,0,0,2524,2522,1,0,0,0,2524,2525,1,0,0,
        0,2525,465,1,0,0,0,2526,2524,1,0,0,0,2527,2528,6,233,-1,0,2528,2529,
        3,468,234,0,2529,2534,1,0,0,0,2530,2531,10,1,0,0,2531,2533,3,468,
        234,0,2532,2530,1,0,0,0,2533,2536,1,0,0,0,2534,2532,1,0,0,0,2534,
        2535,1,0,0,0,2535,467,1,0,0,0,2536,2534,1,0,0,0,2537,2538,6,234,
        -1,0,2538,2539,3,470,235,0,2539,2545,1,0,0,0,2540,2541,10,1,0,0,
        2541,2542,5,358,0,0,2542,2544,3,470,235,0,2543,2540,1,0,0,0,2544,
        2547,1,0,0,0,2545,2543,1,0,0,0,2545,2546,1,0,0,0,2546,469,1,0,0,
        0,2547,2545,1,0,0,0,2548,2552,3,476,238,0,2549,2552,3,472,236,0,
        2550,2552,3,474,237,0,2551,2548,1,0,0,0,2551,2549,1,0,0,0,2551,2550,
        1,0,0,0,2552,471,1,0,0,0,2553,2554,3,476,238,0,2554,2555,3,434,217,
        0,2555,473,1,0,0,0,2556,2557,3,476,238,0,2557,2558,5,377,0,0,2558,
        475,1,0,0,0,2559,2562,3,478,239,0,2560,2562,3,494,247,0,2561,2559,
        1,0,0,0,2561,2560,1,0,0,0,2562,477,1,0,0,0,2563,2571,3,480,240,0,
        2564,2571,3,482,241,0,2565,2571,3,484,242,0,2566,2571,3,486,243,
        0,2567,2571,3,488,244,0,2568,2571,3,490,245,0,2569,2571,3,492,246,
        0,2570,2563,1,0,0,0,2570,2564,1,0,0,0,2570,2565,1,0,0,0,2570,2566,
        1,0,0,0,2570,2567,1,0,0,0,2570,2568,1,0,0,0,2570,2569,1,0,0,0,2571,
        479,1,0,0,0,2572,2573,5,372,0,0,2573,2574,3,494,247,0,2574,481,1,
        0,0,0,2575,2576,5,384,0,0,2576,2577,3,494,247,0,2577,483,1,0,0,0,
        2578,2579,3,494,247,0,2579,2580,5,367,0,0,2580,485,1,0,0,0,2581,
        2582,5,337,0,0,2582,2583,3,494,247,0,2583,487,1,0,0,0,2584,2585,
        5,384,0,0,2585,2586,3,494,247,0,2586,2587,5,367,0,0,2587,489,1,0,
        0,0,2588,2589,5,372,0,0,2589,2590,3,494,247,0,2590,2591,5,367,0,
        0,2591,491,1,0,0,0,2592,2593,5,373,0,0,2593,2594,3,494,247,0,2594,
        493,1,0,0,0,2595,2598,3,498,249,0,2596,2598,3,496,248,0,2597,2595,
        1,0,0,0,2597,2596,1,0,0,0,2598,495,1,0,0,0,2599,2600,5,366,0,0,2600,
        2601,3,498,249,0,2601,497,1,0,0,0,2602,2608,3,1080,540,0,2603,2604,
        5,371,0,0,2604,2605,3,460,230,0,2605,2606,5,382,0,0,2606,2608,1,
        0,0,0,2607,2602,1,0,0,0,2607,2603,1,0,0,0,2608,499,1,0,0,0,2609,
        2610,5,230,0,0,2610,2611,3,774,387,0,2611,501,1,0,0,0,2612,2613,
        5,234,0,0,2613,2614,3,504,252,0,2614,503,1,0,0,0,2615,2620,3,506,
        253,0,2616,2617,5,361,0,0,2617,2619,3,506,253,0,2618,2616,1,0,0,
        0,2619,2622,1,0,0,0,2620,2618,1,0,0,0,2620,2621,1,0,0,0,2621,505,
        1,0,0,0,2622,2620,1,0,0,0,2623,2625,3,508,254,0,2624,2626,3,510,
        255,0,2625,2624,1,0,0,0,2625,2626,1,0,0,0,2626,507,1,0,0,0,2627,
        2628,3,1084,542,0,2628,509,1,0,0,0,2629,2630,5,27,0,0,2630,2631,
        3,1092,546,0,2631,511,1,0,0,0,2632,2633,5,102,0,0,2633,2634,5,41,
        0,0,2634,2635,3,514,257,0,2635,513,1,0,0,0,2636,2641,3,516,258,0,
        2637,2638,5,361,0,0,2638,2640,3,516,258,0,2639,2637,1,0,0,0,2640,
        2643,1,0,0,0,2641,2639,1,0,0,0,2641,2642,1,0,0,0,2642,2646,1,0,0,
        0,2643,2641,1,0,0,0,2644,2646,3,518,259,0,2645,2636,1,0,0,0,2645,
        2644,1,0,0,0,2646,515,1,0,0,0,2647,2648,3,912,456,0,2648,517,1,0,
        0,0,2649,2650,5,371,0,0,2650,2651,5,382,0,0,2651,519,1,0,0,0,2652,
        2653,5,162,0,0,2653,2654,5,41,0,0,2654,2655,3,522,261,0,2655,521,
        1,0,0,0,2656,2661,3,524,262,0,2657,2658,5,361,0,0,2658,2660,3,524,
        262,0,2659,2657,1,0,0,0,2660,2663,1,0,0,0,2661,2659,1,0,0,0,2661,
        2662,1,0,0,0,2662,523,1,0,0,0,2663,2661,1,0,0,0,2664,2666,3,526,
        263,0,2665,2667,3,528,264,0,2666,2665,1,0,0,0,2666,2667,1,0,0,0,
        2667,2669,1,0,0,0,2668,2670,3,530,265,0,2669,2668,1,0,0,0,2669,2670,
        1,0,0,0,2670,525,1,0,0,0,2671,2672,3,840,420,0,2672,527,1,0,0,0,
        2673,2674,7,9,0,0,2674,529,1,0,0,0,2675,2676,5,155,0,0,2676,2680,
        5,288,0,0,2677,2678,5,155,0,0,2678,2680,5,295,0,0,2679,2675,1,0,
        0,0,2679,2677,1,0,0,0,2680,531,1,0,0,0,2681,2682,5,132,0,0,2682,
        2683,3,852,426,0,2683,533,1,0,0,0,2684,2685,3,536,268,0,2685,2686,
        3,852,426,0,2686,535,1,0,0,0,2687,2688,7,10,0,0,2688,537,1,0,0,0,
        2689,2693,3,540,270,0,2690,2693,3,544,272,0,2691,2693,3,572,286,
        0,2692,2689,1,0,0,0,2692,2690,1,0,0,0,2692,2691,1,0,0,0,2693,539,
        1,0,0,0,2694,2699,5,383,0,0,2695,2696,3,548,274,0,2696,2697,3,1062,
        531,0,2697,2699,1,0,0,0,2698,2694,1,0,0,0,2698,2695,1,0,0,0,2699,
        541,1,0,0,0,2700,2701,3,548,274,0,2701,2702,3,1062,531,0,2702,543,
        1,0,0,0,2703,2708,3,546,273,0,2704,2705,3,550,275,0,2705,2706,3,
        1062,531,0,2706,2708,1,0,0,0,2707,2703,1,0,0,0,2707,2704,1,0,0,0,
        2708,545,1,0,0,0,2709,2710,7,11,0,0,2710,547,1,0,0,0,2711,2713,5,
        383,0,0,2712,2714,3,552,276,0,2713,2712,1,0,0,0,2713,2714,1,0,0,
        0,2714,549,1,0,0,0,2715,2720,5,334,0,0,2716,2717,5,383,0,0,2717,
        2719,5,334,0,0,2718,2716,1,0,0,0,2719,2722,1,0,0,0,2720,2718,1,0,
        0,0,2720,2721,1,0,0,0,2721,2723,1,0,0,0,2722,2720,1,0,0,0,2723,2725,
        5,383,0,0,2724,2726,3,552,276,0,2725,2724,1,0,0,0,2725,2726,1,0,
        0,0,2726,551,1,0,0,0,2727,2728,3,1060,530,0,2728,2729,5,383,0,0,
        2729,2731,1,0,0,0,2730,2727,1,0,0,0,2731,2732,1,0,0,0,2732,2730,
        1,0,0,0,2732,2733,1,0,0,0,2733,553,1,0,0,0,2734,2735,3,570,285,0,
        2735,2736,3,1064,532,0,2736,2741,1,0,0,0,2737,2741,3,1066,533,0,
        2738,2741,3,558,279,0,2739,2741,3,572,286,0,2740,2734,1,0,0,0,2740,
        2737,1,0,0,0,2740,2738,1,0,0,0,2740,2739,1,0,0,0,2741,555,1,0,0,
        0,2742,2744,3,570,285,0,2743,2742,1,0,0,0,2743,2744,1,0,0,0,2744,
        2745,1,0,0,0,2745,2746,3,1064,532,0,2746,557,1,0,0,0,2747,2748,7,
        12,0,0,2748,559,1,0,0,0,2749,2752,3,562,281,0,2750,2752,3,572,286,
        0,2751,2749,1,0,0,0,2751,2750,1,0,0,0,2752,561,1,0,0,0,2753,2755,
        3,570,285,0,2754,2753,1,0,0,0,2754,2755,1,0,0,0,2755,2756,1,0,0,
        0,2756,2757,3,1068,534,0,2757,563,1,0,0,0,2758,2759,3,570,285,0,
        2759,2760,3,1074,537,0,2760,2764,1,0,0,0,2761,2764,3,1076,538,0,
        2762,2764,3,572,286,0,2763,2758,1,0,0,0,2763,2761,1,0,0,0,2763,2762,
        1,0,0,0,2764,565,1,0,0,0,2765,2768,3,568,284,0,2766,2768,3,572,286,
        0,2767,2765,1,0,0,0,2767,2766,1,0,0,0,2768,567,1,0,0,0,2769,2771,
        3,570,285,0,2770,2769,1,0,0,0,2770,2771,1,0,0,0,2771,2772,1,0,0,
        0,2772,2773,3,1078,539,0,2773,569,1,0,0,0,2774,2776,3,538,269,0,
        2775,2777,5,383,0,0,2776,2775,1,0,0,0,2776,2777,1,0,0,0,2777,2783,
        1,0,0,0,2778,2779,3,1056,528,0,2779,2780,5,375,0,0,2780,2782,1,0,
        0,0,2781,2778,1,0,0,0,2782,2785,1,0,0,0,2783,2781,1,0,0,0,2783,2784,
        1,0,0,0,2784,2794,1,0,0,0,2785,2783,1,0,0,0,2786,2787,3,1056,528,
        0,2787,2788,5,375,0,0,2788,2790,1,0,0,0,2789,2786,1,0,0,0,2790,2791,
        1,0,0,0,2791,2789,1,0,0,0,2791,2792,1,0,0,0,2792,2794,1,0,0,0,2793,
        2774,1,0,0,0,2793,2789,1,0,0,0,2794,571,1,0,0,0,2795,2796,5,326,
        0,0,2796,573,1,0,0,0,2797,2798,5,369,0,0,2798,2799,3,576,288,0,2799,
        2800,5,380,0,0,2800,575,1,0,0,0,2801,2802,3,578,289,0,2802,577,1,
        0,0,0,2803,2808,3,580,290,0,2804,2805,5,361,0,0,2805,2807,3,580,
        290,0,2806,2804,1,0,0,0,2807,2810,1,0,0,0,2808,2806,1,0,0,0,2808,
        2809,1,0,0,0,2809,579,1,0,0,0,2810,2808,1,0,0,0,2811,2814,3,582,
        291,0,2812,2814,3,602,301,0,2813,2811,1,0,0,0,2813,2812,1,0,0,0,
        2814,581,1,0,0,0,2815,2818,3,584,292,0,2816,2818,3,586,293,0,2817,
        2815,1,0,0,0,2817,2816,1,0,0,0,2818,583,1,0,0,0,2819,2821,3,1140,
        570,0,2820,2822,5,318,0,0,2821,2820,1,0,0,0,2821,2822,1,0,0,0,2822,
        2823,1,0,0,0,2823,2824,3,1070,535,0,2824,2826,1,0,0,0,2825,2819,
        1,0,0,0,2825,2826,1,0,0,0,2826,2827,1,0,0,0,2827,2829,5,371,0,0,
        2828,2830,3,592,296,0,2829,2828,1,0,0,0,2829,2830,1,0,0,0,2830,2832,
        1,0,0,0,2831,2833,3,590,295,0,2832,2831,1,0,0,0,2832,2833,1,0,0,
        0,2833,2834,1,0,0,0,2834,2835,5,382,0,0,2835,585,1,0,0,0,2836,2838,
        3,1140,570,0,2837,2839,5,318,0,0,2838,2837,1,0,0,0,2838,2839,1,0,
        0,0,2839,2840,1,0,0,0,2840,2843,3,588,294,0,2841,2842,5,27,0,0,2842,
        2844,3,592,296,0,2843,2841,1,0,0,0,2843,2844,1,0,0,0,2844,587,1,
        0,0,0,2845,2847,3,1070,535,0,2846,2848,3,590,295,0,2847,2846,1,0,
        0,0,2847,2848,1,0,0,0,2848,2851,1,0,0,0,2849,2851,3,590,295,0,2850,
        2845,1,0,0,0,2850,2849,1,0,0,0,2851,589,1,0,0,0,2852,2854,3,596,
        298,0,2853,2855,3,594,297,0,2854,2853,1,0,0,0,2854,2855,1,0,0,0,
        2855,2858,1,0,0,0,2856,2858,3,594,297,0,2857,2852,1,0,0,0,2857,2856,
        1,0,0,0,2858,591,1,0,0,0,2859,2860,3,1112,556,0,2860,593,1,0,0,0,
        2861,2867,3,598,299,0,2862,2867,3,600,300,0,2863,2864,3,598,299,
        0,2864,2865,3,600,300,0,2865,2867,1,0,0,0,2866,2861,1,0,0,0,2866,
        2862,1,0,0,0,2866,2863,1,0,0,0,2867,595,1,0,0,0,2868,2870,3,660,
        330,0,2869,2868,1,0,0,0,2869,2870,1,0,0,0,2870,2871,1,0,0,0,2871,
        2872,5,1,0,0,2872,597,1,0,0,0,2873,2874,3,660,330,0,2874,599,1,0,
        0,0,2875,2876,3,664,332,0,2876,601,1,0,0,0,2877,2880,3,604,302,0,
        2878,2880,3,606,303,0,2879,2877,1,0,0,0,2879,2878,1,0,0,0,2880,603,
        1,0,0,0,2881,2883,3,638,319,0,2882,2881,1,0,0,0,2882,2883,1,0,0,
        0,2883,2884,1,0,0,0,2884,2886,3,1144,572,0,2885,2887,5,318,0,0,2886,
        2885,1,0,0,0,2886,2887,1,0,0,0,2887,2888,1,0,0,0,2888,2889,3,1072,
        536,0,2889,2891,1,0,0,0,2890,2882,1,0,0,0,2890,2891,1,0,0,0,2891,
        2894,1,0,0,0,2892,2895,3,620,310,0,2893,2895,3,626,313,0,2894,2892,
        1,0,0,0,2894,2893,1,0,0,0,2895,605,1,0,0,0,2896,2897,3,638,319,0,
        2897,2899,3,1144,572,0,2898,2900,5,318,0,0,2899,2898,1,0,0,0,2899,
        2900,1,0,0,0,2900,2901,1,0,0,0,2901,2902,3,608,304,0,2902,2903,3,
        640,320,0,2903,607,1,0,0,0,2904,2906,3,1072,536,0,2905,2907,3,610,
        305,0,2906,2905,1,0,0,0,2906,2907,1,0,0,0,2907,2910,1,0,0,0,2908,
        2910,3,610,305,0,2909,2904,1,0,0,0,2909,2908,1,0,0,0,2910,609,1,
        0,0,0,2911,2913,3,614,307,0,2912,2914,3,612,306,0,2913,2912,1,0,
        0,0,2913,2914,1,0,0,0,2914,2917,1,0,0,0,2915,2917,3,612,306,0,2916,
        2911,1,0,0,0,2916,2915,1,0,0,0,2917,611,1,0,0,0,2918,2924,3,616,
        308,0,2919,2924,3,618,309,0,2920,2921,3,616,308,0,2921,2922,3,618,
        309,0,2922,2924,1,0,0,0,2923,2918,1,0,0,0,2923,2919,1,0,0,0,2923,
        2920,1,0,0,0,2924,613,1,0,0,0,2925,2927,3,660,330,0,2926,2925,1,
        0,0,0,2926,2927,1,0,0,0,2927,2928,1,0,0,0,2928,2929,5,1,0,0,2929,
        615,1,0,0,0,2930,2931,3,660,330,0,2931,617,1,0,0,0,2932,2933,3,664,
        332,0,2933,619,1,0,0,0,2934,2937,3,622,311,0,2935,2937,3,624,312,
        0,2936,2934,1,0,0,0,2936,2935,1,0,0,0,2937,621,1,0,0,0,2938,2939,
        3,634,317,0,2939,2940,3,628,314,0,2940,2941,3,636,318,0,2941,623,
        1,0,0,0,2942,2943,3,636,318,0,2943,2944,3,630,315,0,2944,2945,3,
        634,317,0,2945,625,1,0,0,0,2946,2947,3,634,317,0,2947,2948,3,632,
        316,0,2948,2949,3,636,318,0,2949,627,1,0,0,0,2950,2951,5,344,0,0,
        2951,2952,3,610,305,0,2952,2953,5,329,0,0,2953,629,1,0,0,0,2954,
        2955,5,338,0,0,2955,2956,3,610,305,0,2956,2957,5,348,0,0,2957,631,
        1,0,0,0,2958,2959,5,355,0,0,2959,2960,3,610,305,0,2960,2961,5,349,
        0,0,2961,633,1,0,0,0,2962,2963,5,371,0,0,2963,2964,3,656,328,0,2964,
        2965,5,382,0,0,2965,2972,1,0,0,0,2966,2968,5,371,0,0,2967,2969,3,
        590,295,0,2968,2967,1,0,0,0,2968,2969,1,0,0,0,2969,2970,1,0,0,0,
        2970,2972,5,382,0,0,2971,2962,1,0,0,0,2971,2966,1,0,0,0,2972,635,
        1,0,0,0,2973,2974,5,371,0,0,2974,2975,3,658,329,0,2975,2976,5,382,
        0,0,2976,2983,1,0,0,0,2977,2979,5,371,0,0,2978,2980,3,590,295,0,
        2979,2978,1,0,0,0,2979,2980,1,0,0,0,2980,2981,1,0,0,0,2981,2983,
        5,382,0,0,2982,2973,1,0,0,0,2982,2977,1,0,0,0,2983,637,1,0,0,0,2984,
        2985,7,13,0,0,2985,639,1,0,0,0,2986,2987,5,280,0,0,2987,2988,3,642,
        321,0,2988,641,1,0,0,0,2989,2992,3,644,322,0,2990,2992,3,650,325,
        0,2991,2989,1,0,0,0,2991,2990,1,0,0,0,2992,643,1,0,0,0,2993,2996,
        3,646,323,0,2994,2996,3,648,324,0,2995,2993,1,0,0,0,2995,2994,1,
        0,0,0,2996,645,1,0,0,0,2997,2998,5,371,0,0,2998,2999,3,656,328,0,
        2999,3000,3,652,326,0,3000,3001,3,658,329,0,3001,3002,5,382,0,0,
        3002,647,1,0,0,0,3003,3004,5,371,0,0,3004,3005,3,658,329,0,3005,
        3006,5,336,0,0,3006,3007,3,656,328,0,3007,3008,5,382,0,0,3008,649,
        1,0,0,0,3009,3010,5,371,0,0,3010,3011,3,656,328,0,3011,3012,3,654,
        327,0,3012,3013,3,658,329,0,3013,3014,5,382,0,0,3014,651,1,0,0,0,
        3015,3016,7,14,0,0,3016,653,1,0,0,0,3017,3018,7,15,0,0,3018,655,
        1,0,0,0,3019,3020,3,1112,556,0,3020,657,1,0,0,0,3021,3022,3,1112,
        556,0,3022,659,1,0,0,0,3023,3024,5,292,0,0,3024,3031,3,1080,540,
        0,3025,3026,5,294,0,0,3026,3031,3,662,331,0,3027,3028,3,390,195,
        0,3028,3029,3,662,331,0,3029,3031,1,0,0,0,3030,3023,1,0,0,0,3030,
        3025,1,0,0,0,3030,3027,1,0,0,0,3031,661,1,0,0,0,3032,3037,3,1080,
        540,0,3033,3034,5,358,0,0,3034,3036,3,1080,540,0,3035,3033,1,0,0,
        0,3036,3039,1,0,0,0,3037,3035,1,0,0,0,3037,3038,1,0,0,0,3038,663,
        1,0,0,0,3039,3037,1,0,0,0,3040,3042,5,369,0,0,3041,3043,3,666,333,
        0,3042,3041,1,0,0,0,3042,3043,1,0,0,0,3043,3044,1,0,0,0,3044,3045,
        5,380,0,0,3045,665,1,0,0,0,3046,3051,3,668,334,0,3047,3048,5,361,
        0,0,3048,3050,3,668,334,0,3049,3047,1,0,0,0,3050,3053,1,0,0,0,3051,
        3049,1,0,0,0,3051,3052,1,0,0,0,3052,667,1,0,0,0,3053,3051,1,0,0,
        0,3054,3056,3,1082,541,0,3055,3057,3,676,338,0,3056,3055,1,0,0,0,
        3056,3057,1,0,0,0,3057,3058,1,0,0,0,3058,3059,3,670,335,0,3059,669,
        1,0,0,0,3060,3061,3,674,337,0,3061,671,1,0,0,0,3062,3064,5,278,0,
        0,3063,3062,1,0,0,0,3063,3064,1,0,0,0,3064,3065,1,0,0,0,3065,3066,
        5,313,0,0,3066,3067,3,766,383,0,3067,673,1,0,0,0,3068,3069,6,337,
        -1,0,3069,3126,3,678,339,0,3070,3126,3,758,379,0,3071,3072,3,760,
        380,0,3072,3073,5,372,0,0,3073,3074,3,674,337,0,3074,3079,5,367,
        0,0,3075,3076,5,370,0,0,3076,3077,3,688,344,0,3077,3078,5,381,0,
        0,3078,3080,1,0,0,0,3079,3075,1,0,0,0,3079,3080,1,0,0,0,3080,3082,
        1,0,0,0,3081,3083,3,770,385,0,3082,3081,1,0,0,0,3082,3083,1,0,0,
        0,3083,3126,1,0,0,0,3084,3089,3,760,380,0,3085,3086,5,370,0,0,3086,
        3087,3,688,344,0,3087,3088,5,381,0,0,3088,3090,1,0,0,0,3089,3085,
        1,0,0,0,3089,3090,1,0,0,0,3090,3092,1,0,0,0,3091,3093,3,770,385,
        0,3092,3091,1,0,0,0,3092,3093,1,0,0,0,3093,3126,1,0,0,0,3094,3126,
        3,764,382,0,3095,3097,5,25,0,0,3096,3098,5,225,0,0,3097,3096,1,0,
        0,0,3097,3098,1,0,0,0,3098,3100,1,0,0,0,3099,3101,3,770,385,0,3100,
        3099,1,0,0,0,3100,3101,1,0,0,0,3101,3126,1,0,0,0,3102,3104,5,25,
        0,0,3103,3102,1,0,0,0,3103,3104,1,0,0,0,3104,3105,1,0,0,0,3105,3106,
        5,305,0,0,3106,3108,5,225,0,0,3107,3109,3,770,385,0,3108,3107,1,
        0,0,0,3108,3109,1,0,0,0,3109,3126,1,0,0,0,3110,3112,5,25,0,0,3111,
        3113,5,225,0,0,3112,3111,1,0,0,0,3112,3113,1,0,0,0,3113,3114,1,0,
        0,0,3114,3115,5,372,0,0,3115,3120,3,674,337,0,3116,3117,5,386,0,
        0,3117,3119,3,674,337,0,3118,3116,1,0,0,0,3119,3122,1,0,0,0,3120,
        3118,1,0,0,0,3120,3121,1,0,0,0,3121,3123,1,0,0,0,3122,3120,1,0,0,
        0,3123,3124,5,367,0,0,3124,3126,1,0,0,0,3125,3068,1,0,0,0,3125,3070,
        1,0,0,0,3125,3071,1,0,0,0,3125,3084,1,0,0,0,3125,3094,1,0,0,0,3125,
        3095,1,0,0,0,3125,3103,1,0,0,0,3125,3110,1,0,0,0,3126,3143,1,0,0,
        0,3127,3128,10,1,0,0,3128,3129,5,386,0,0,3129,3142,3,674,337,2,3130,
        3131,10,7,0,0,3131,3136,3,760,380,0,3132,3133,5,370,0,0,3133,3134,
        3,688,344,0,3134,3135,5,381,0,0,3135,3137,1,0,0,0,3136,3132,1,0,
        0,0,3136,3137,1,0,0,0,3137,3139,1,0,0,0,3138,3140,3,770,385,0,3139,
        3138,1,0,0,0,3139,3140,1,0,0,0,3140,3142,1,0,0,0,3141,3127,1,0,0,
        0,3141,3130,1,0,0,0,3142,3145,1,0,0,0,3143,3141,1,0,0,0,3143,3144,
        1,0,0,0,3144,675,1,0,0,0,3145,3143,1,0,0,0,3146,3147,7,16,0,0,3147,
        677,1,0,0,0,3148,3156,3,680,340,0,3149,3156,3,682,341,0,3150,3156,
        3,684,342,0,3151,3156,3,692,346,0,3152,3156,3,712,356,0,3153,3156,
        3,730,365,0,3154,3156,3,732,366,0,3155,3148,1,0,0,0,3155,3149,1,
        0,0,0,3155,3150,1,0,0,0,3155,3151,1,0,0,0,3155,3152,1,0,0,0,3155,
        3153,1,0,0,0,3155,3154,1,0,0,0,3156,679,1,0,0,0,3157,3159,7,17,0,
        0,3158,3160,3,770,385,0,3159,3158,1,0,0,0,3159,3160,1,0,0,0,3160,
        681,1,0,0,0,3161,3171,5,202,0,0,3162,3166,5,371,0,0,3163,3164,3,
        686,343,0,3164,3165,5,361,0,0,3165,3167,1,0,0,0,3166,3163,1,0,0,
        0,3166,3167,1,0,0,0,3167,3168,1,0,0,0,3168,3169,3,688,344,0,3169,
        3170,5,382,0,0,3170,3172,1,0,0,0,3171,3162,1,0,0,0,3171,3172,1,0,
        0,0,3172,3174,1,0,0,0,3173,3175,3,770,385,0,3174,3173,1,0,0,0,3174,
        3175,1,0,0,0,3175,3197,1,0,0,0,3176,3181,5,50,0,0,3177,3178,5,371,
        0,0,3178,3179,3,690,345,0,3179,3180,5,382,0,0,3180,3182,1,0,0,0,
        3181,3177,1,0,0,0,3181,3182,1,0,0,0,3182,3184,1,0,0,0,3183,3185,
        3,770,385,0,3184,3183,1,0,0,0,3184,3185,1,0,0,0,3185,3197,1,0,0,
        0,3186,3191,5,227,0,0,3187,3188,5,371,0,0,3188,3189,3,688,344,0,
        3189,3190,5,382,0,0,3190,3192,1,0,0,0,3191,3187,1,0,0,0,3191,3192,
        1,0,0,0,3192,3194,1,0,0,0,3193,3195,3,770,385,0,3194,3193,1,0,0,
        0,3194,3195,1,0,0,0,3195,3197,1,0,0,0,3196,3161,1,0,0,0,3196,3176,
        1,0,0,0,3196,3186,1,0,0,0,3197,683,1,0,0,0,3198,3208,5,43,0,0,3199,
        3203,5,371,0,0,3200,3201,3,686,343,0,3201,3202,5,361,0,0,3202,3204,
        1,0,0,0,3203,3200,1,0,0,0,3203,3204,1,0,0,0,3204,3205,1,0,0,0,3205,
        3206,3,688,344,0,3206,3207,5,382,0,0,3207,3209,1,0,0,0,3208,3199,
        1,0,0,0,3208,3209,1,0,0,0,3209,3211,1,0,0,0,3210,3212,3,770,385,
        0,3211,3210,1,0,0,0,3211,3212,1,0,0,0,3212,3234,1,0,0,0,3213,3218,
        5,36,0,0,3214,3215,5,371,0,0,3215,3216,3,690,345,0,3216,3217,5,382,
        0,0,3217,3219,1,0,0,0,3218,3214,1,0,0,0,3218,3219,1,0,0,0,3219,3221,
        1,0,0,0,3220,3222,3,770,385,0,3221,3220,1,0,0,0,3221,3222,1,0,0,
        0,3222,3234,1,0,0,0,3223,3228,5,226,0,0,3224,3225,5,371,0,0,3225,
        3226,3,688,344,0,3226,3227,5,382,0,0,3227,3229,1,0,0,0,3228,3224,
        1,0,0,0,3228,3229,1,0,0,0,3229,3231,1,0,0,0,3230,3232,3,770,385,
        0,3231,3230,1,0,0,0,3231,3232,1,0,0,0,3232,3234,1,0,0,0,3233,3198,
        1,0,0,0,3233,3213,1,0,0,0,3233,3223,1,0,0,0,3234,685,1,0,0,0,3235,
        3236,3,1124,562,0,3236,687,1,0,0,0,3237,3238,3,1124,562,0,3238,689,
        1,0,0,0,3239,3240,3,1124,562,0,3240,691,1,0,0,0,3241,3244,3,694,
        347,0,3242,3244,3,710,355,0,3243,3241,1,0,0,0,3243,3242,1,0,0,0,
        3244,693,1,0,0,0,3245,3248,3,696,348,0,3246,3248,3,704,352,0,3247,
        3245,1,0,0,0,3247,3246,1,0,0,0,3248,695,1,0,0,0,3249,3252,3,698,
        349,0,3250,3252,3,700,350,0,3251,3249,1,0,0,0,3251,3250,1,0,0,0,
        3252,697,1,0,0,0,3253,3255,5,113,0,0,3254,3256,3,770,385,0,3255,
        3254,1,0,0,0,3255,3256,1,0,0,0,3256,3300,1,0,0,0,3257,3259,5,115,
        0,0,3258,3260,3,770,385,0,3259,3258,1,0,0,0,3259,3260,1,0,0,0,3260,
        3300,1,0,0,0,3261,3263,5,117,0,0,3262,3264,3,770,385,0,3263,3262,
        1,0,0,0,3263,3264,1,0,0,0,3264,3300,1,0,0,0,3265,3267,5,119,0,0,
        3266,3268,3,770,385,0,3267,3266,1,0,0,0,3267,3268,1,0,0,0,3268,3300,
        1,0,0,0,3269,3271,5,121,0,0,3270,3272,3,770,385,0,3271,3270,1,0,
        0,0,3271,3272,1,0,0,0,3272,3300,1,0,0,0,3273,3275,5,123,0,0,3274,
        3276,3,770,385,0,3275,3274,1,0,0,0,3275,3276,1,0,0,0,3276,3300,1,
        0,0,0,3277,3279,5,197,0,0,3278,3280,3,770,385,0,3279,3278,1,0,0,
        0,3279,3280,1,0,0,0,3280,3300,1,0,0,0,3281,3286,5,111,0,0,3282,3283,
        5,371,0,0,3283,3284,3,706,353,0,3284,3285,5,382,0,0,3285,3287,1,
        0,0,0,3286,3282,1,0,0,0,3286,3287,1,0,0,0,3287,3289,1,0,0,0,3288,
        3290,3,770,385,0,3289,3288,1,0,0,0,3289,3290,1,0,0,0,3290,3300,1,
        0,0,0,3291,3293,5,35,0,0,3292,3294,3,770,385,0,3293,3292,1,0,0,0,
        3293,3294,1,0,0,0,3294,3300,1,0,0,0,3295,3297,5,191,0,0,3296,3295,
        1,0,0,0,3296,3297,1,0,0,0,3297,3298,1,0,0,0,3298,3300,3,702,351,
        0,3299,3253,1,0,0,0,3299,3257,1,0,0,0,3299,3261,1,0,0,0,3299,3265,
        1,0,0,0,3299,3269,1,0,0,0,3299,3273,1,0,0,0,3299,3277,1,0,0,0,3299,
        3281,1,0,0,0,3299,3291,1,0,0,0,3299,3296,1,0,0,0,3300,699,1,0,0,
        0,3301,3303,5,214,0,0,3302,3304,3,770,385,0,3303,3302,1,0,0,0,3303,
        3304,1,0,0,0,3304,3346,1,0,0,0,3305,3307,5,215,0,0,3306,3308,3,770,
        385,0,3307,3306,1,0,0,0,3307,3308,1,0,0,0,3308,3346,1,0,0,0,3309,
        3311,5,216,0,0,3310,3312,3,770,385,0,3311,3310,1,0,0,0,3311,3312,
        1,0,0,0,3312,3346,1,0,0,0,3313,3315,5,217,0,0,3314,3316,3,770,385,
        0,3315,3314,1,0,0,0,3315,3316,1,0,0,0,3316,3346,1,0,0,0,3317,3319,
        5,218,0,0,3318,3320,3,770,385,0,3319,3318,1,0,0,0,3319,3320,1,0,
        0,0,3320,3346,1,0,0,0,3321,3323,5,219,0,0,3322,3324,3,770,385,0,
        3323,3322,1,0,0,0,3323,3324,1,0,0,0,3324,3346,1,0,0,0,3325,3327,
        5,224,0,0,3326,3328,3,770,385,0,3327,3326,1,0,0,0,3327,3328,1,0,
        0,0,3328,3346,1,0,0,0,3329,3334,5,213,0,0,3330,3331,5,371,0,0,3331,
        3332,3,706,353,0,3332,3333,5,382,0,0,3333,3335,1,0,0,0,3334,3330,
        1,0,0,0,3334,3335,1,0,0,0,3335,3337,1,0,0,0,3336,3338,3,770,385,
        0,3337,3336,1,0,0,0,3337,3338,1,0,0,0,3338,3346,1,0,0,0,3339,3341,
        5,212,0,0,3340,3342,3,770,385,0,3341,3340,1,0,0,0,3341,3342,1,0,
        0,0,3342,3346,1,0,0,0,3343,3344,5,221,0,0,3344,3346,3,702,351,0,
        3345,3301,1,0,0,0,3345,3305,1,0,0,0,3345,3309,1,0,0,0,3345,3313,
        1,0,0,0,3345,3317,1,0,0,0,3345,3321,1,0,0,0,3345,3325,1,0,0,0,3345,
        3329,1,0,0,0,3345,3339,1,0,0,0,3345,3343,1,0,0,0,3346,701,1,0,0,
        0,3347,3349,5,114,0,0,3348,3350,3,770,385,0,3349,3348,1,0,0,0,3349,
        3350,1,0,0,0,3350,3392,1,0,0,0,3351,3353,5,116,0,0,3352,3354,3,770,
        385,0,3353,3352,1,0,0,0,3353,3354,1,0,0,0,3354,3392,1,0,0,0,3355,
        3357,5,118,0,0,3356,3358,3,770,385,0,3357,3356,1,0,0,0,3357,3358,
        1,0,0,0,3358,3392,1,0,0,0,3359,3361,5,120,0,0,3360,3362,3,770,385,
        0,3361,3360,1,0,0,0,3361,3362,1,0,0,0,3362,3392,1,0,0,0,3363,3365,
        5,122,0,0,3364,3366,3,770,385,0,3365,3364,1,0,0,0,3365,3366,1,0,
        0,0,3366,3392,1,0,0,0,3367,3369,5,124,0,0,3368,3370,3,770,385,0,
        3369,3368,1,0,0,0,3369,3370,1,0,0,0,3370,3392,1,0,0,0,3371,3372,
        5,196,0,0,3372,3374,5,112,0,0,3373,3375,3,770,385,0,3374,3373,1,
        0,0,0,3374,3375,1,0,0,0,3375,3392,1,0,0,0,3376,3381,5,112,0,0,3377,
        3378,5,371,0,0,3378,3379,3,706,353,0,3379,3380,5,382,0,0,3380,3382,
        1,0,0,0,3381,3377,1,0,0,0,3381,3382,1,0,0,0,3382,3384,1,0,0,0,3383,
        3385,3,770,385,0,3384,3383,1,0,0,0,3384,3385,1,0,0,0,3385,3392,1,
        0,0,0,3386,3387,5,34,0,0,3387,3389,5,112,0,0,3388,3390,3,770,385,
        0,3389,3388,1,0,0,0,3389,3390,1,0,0,0,3390,3392,1,0,0,0,3391,3347,
        1,0,0,0,3391,3351,1,0,0,0,3391,3355,1,0,0,0,3391,3359,1,0,0,0,3391,
        3363,1,0,0,0,3391,3367,1,0,0,0,3391,3371,1,0,0,0,3391,3376,1,0,0,
        0,3391,3386,1,0,0,0,3392,703,1,0,0,0,3393,3404,7,18,0,0,3394,3395,
        5,371,0,0,3395,3398,3,706,353,0,3396,3397,5,361,0,0,3397,3399,3,
        708,354,0,3398,3396,1,0,0,0,3398,3399,1,0,0,0,3399,3400,1,0,0,0,
        3400,3402,5,382,0,0,3401,3403,3,770,385,0,3402,3401,1,0,0,0,3402,
        3403,1,0,0,0,3403,3405,1,0,0,0,3404,3394,1,0,0,0,3404,3405,1,0,0,
        0,3405,705,1,0,0,0,3406,3407,3,1126,563,0,3407,707,1,0,0,0,3408,
        3409,3,1126,563,0,3409,709,1,0,0,0,3410,3412,5,94,0,0,3411,3413,
        3,770,385,0,3412,3411,1,0,0,0,3412,3413,1,0,0,0,3413,3456,1,0,0,
        0,3414,3416,5,95,0,0,3415,3417,3,770,385,0,3416,3415,1,0,0,0,3416,
        3417,1,0,0,0,3417,3456,1,0,0,0,3418,3420,5,96,0,0,3419,3421,3,770,
        385,0,3420,3419,1,0,0,0,3420,3421,1,0,0,0,3421,3456,1,0,0,0,3422,
        3424,5,97,0,0,3423,3425,3,770,385,0,3424,3423,1,0,0,0,3424,3425,
        1,0,0,0,3425,3456,1,0,0,0,3426,3428,5,98,0,0,3427,3429,3,770,385,
        0,3428,3427,1,0,0,0,3428,3429,1,0,0,0,3429,3456,1,0,0,0,3430,3439,
        5,93,0,0,3431,3432,5,371,0,0,3432,3435,3,706,353,0,3433,3434,5,361,
        0,0,3434,3436,3,708,354,0,3435,3433,1,0,0,0,3435,3436,1,0,0,0,3436,
        3437,1,0,0,0,3437,3438,5,382,0,0,3438,3440,1,0,0,0,3439,3431,1,0,
        0,0,3439,3440,1,0,0,0,3440,3442,1,0,0,0,3441,3443,3,770,385,0,3442,
        3441,1,0,0,0,3442,3443,1,0,0,0,3443,3456,1,0,0,0,3444,3446,5,175,
        0,0,3445,3447,3,770,385,0,3446,3445,1,0,0,0,3446,3447,1,0,0,0,3447,
        3456,1,0,0,0,3448,3450,5,81,0,0,3449,3451,5,172,0,0,3450,3449,1,
        0,0,0,3450,3451,1,0,0,0,3451,3453,1,0,0,0,3452,3454,3,770,385,0,
        3453,3452,1,0,0,0,3453,3454,1,0,0,0,3454,3456,1,0,0,0,3455,3410,
        1,0,0,0,3455,3414,1,0,0,0,3455,3418,1,0,0,0,3455,3422,1,0,0,0,3455,
        3426,1,0,0,0,3455,3430,1,0,0,0,3455,3444,1,0,0,0,3455,3448,1,0,0,
        0,3456,711,1,0,0,0,3457,3460,3,714,357,0,3458,3460,3,726,363,0,3459,
        3457,1,0,0,0,3459,3458,1,0,0,0,3460,713,1,0,0,0,3461,3467,3,716,
        358,0,3462,3467,3,718,359,0,3463,3467,3,720,360,0,3464,3467,3,722,
        361,0,3465,3467,3,724,362,0,3466,3461,1,0,0,0,3466,3462,1,0,0,0,
        3466,3463,1,0,0,0,3466,3464,1,0,0,0,3466,3465,1,0,0,0,3467,715,1,
        0,0,0,3468,3469,5,235,0,0,3469,3471,5,71,0,0,3470,3472,3,770,385,
        0,3471,3470,1,0,0,0,3471,3472,1,0,0,0,3472,3481,1,0,0,0,3473,3474,
        5,208,0,0,3474,3475,5,231,0,0,3475,3476,5,207,0,0,3476,3478,5,324,
        0,0,3477,3479,3,770,385,0,3478,3477,1,0,0,0,3478,3479,1,0,0,0,3479,
        3481,1,0,0,0,3480,3468,1,0,0,0,3480,3473,1,0,0,0,3481,717,1,0,0,
        0,3482,3483,5,135,0,0,3483,3485,5,71,0,0,3484,3486,3,770,385,0,3485,
        3484,1,0,0,0,3485,3486,1,0,0,0,3486,3497,1,0,0,0,3487,3491,5,208,
        0,0,3488,3489,5,322,0,0,3489,3490,5,207,0,0,3490,3492,5,324,0,0,
        3491,3488,1,0,0,0,3491,3492,1,0,0,0,3492,3494,1,0,0,0,3493,3495,
        3,770,385,0,3494,3493,1,0,0,0,3494,3495,1,0,0,0,3495,3497,1,0,0,
        0,3496,3482,1,0,0,0,3496,3487,1,0,0,0,3497,719,1,0,0,0,3498,3500,
        5,70,0,0,3499,3501,3,770,385,0,3500,3499,1,0,0,0,3500,3501,1,0,0,
        0,3501,721,1,0,0,0,3502,3503,5,235,0,0,3503,3505,5,207,0,0,3504,
        3506,3,770,385,0,3505,3504,1,0,0,0,3505,3506,1,0,0,0,3506,3515,1,
        0,0,0,3507,3508,5,207,0,0,3508,3509,5,231,0,0,3509,3510,5,207,0,
        0,3510,3512,5,324,0,0,3511,3513,3,770,385,0,3512,3511,1,0,0,0,3512,
        3513,1,0,0,0,3513,3515,1,0,0,0,3514,3502,1,0,0,0,3514,3507,1,0,0,
        0,3515,723,1,0,0,0,3516,3517,5,135,0,0,3517,3519,5,207,0,0,3518,
        3520,3,770,385,0,3519,3518,1,0,0,0,3519,3520,1,0,0,0,3520,3529,1,
        0,0,0,3521,3522,5,207,0,0,3522,3523,5,322,0,0,3523,3524,5,207,0,
        0,3524,3526,5,324,0,0,3525,3527,3,770,385,0,3526,3525,1,0,0,0,3526,
        3527,1,0,0,0,3527,3529,1,0,0,0,3528,3516,1,0,0,0,3528,3521,1,0,0,
        0,3529,725,1,0,0,0,3530,3531,5,83,0,0,3531,3532,5,371,0,0,3532,3533,
        3,728,364,0,3533,3535,5,382,0,0,3534,3536,3,770,385,0,3535,3534,
        1,0,0,0,3535,3536,1,0,0,0,3536,727,1,0,0,0,3537,3538,5,233,0,0,3538,
        3539,5,315,0,0,3539,3544,5,148,0,0,3540,3541,5,72,0,0,3541,3542,
        5,315,0,0,3542,3544,5,186,0,0,3543,3537,1,0,0,0,3543,3540,1,0,0,
        0,3544,729,1,0,0,0,3545,3550,3,738,369,0,3546,3550,3,744,372,0,3547,
        3550,3,746,373,0,3548,3550,3,752,376,0,3549,3545,1,0,0,0,3549,3546,
        1,0,0,0,3549,3547,1,0,0,0,3549,3548,1,0,0,0,3550,731,1,0,0,0,3551,
        3554,3,734,367,0,3552,3554,3,736,368,0,3553,3551,1,0,0,0,3553,3552,
        1,0,0,0,3554,733,1,0,0,0,3555,3556,5,154,0,0,3556,735,1,0,0,0,3557,
        3558,5,154,0,0,3558,3561,3,770,385,0,3559,3561,5,153,0,0,3560,3557,
        1,0,0,0,3560,3559,1,0,0,0,3561,737,1,0,0,0,3562,3565,3,742,371,0,
        3563,3565,3,740,370,0,3564,3562,1,0,0,0,3564,3563,1,0,0,0,3565,739,
        1,0,0,0,3566,3568,5,305,0,0,3567,3566,1,0,0,0,3567,3568,1,0,0,0,
        3568,3569,1,0,0,0,3569,3570,5,289,0,0,3570,3572,3,574,287,0,3571,
        3573,3,770,385,0,3572,3571,1,0,0,0,3572,3573,1,0,0,0,3573,741,1,
        0,0,0,3574,3576,5,25,0,0,3575,3577,5,305,0,0,3576,3575,1,0,0,0,3576,
        3577,1,0,0,0,3577,3578,1,0,0,0,3578,3580,5,289,0,0,3579,3581,3,770,
        385,0,3580,3579,1,0,0,0,3580,3581,1,0,0,0,3581,743,1,0,0,0,3582,
        3584,3,672,336,0,3583,3585,3,770,385,0,3584,3583,1,0,0,0,3584,3585,
        1,0,0,0,3585,745,1,0,0,0,3586,3589,3,750,375,0,3587,3589,3,748,374,
        0,3588,3586,1,0,0,0,3588,3587,1,0,0,0,3589,747,1,0,0,0,3590,3592,
        3,582,291,0,3591,3593,3,770,385,0,3592,3591,1,0,0,0,3592,3593,1,
        0,0,0,3593,749,1,0,0,0,3594,3596,5,25,0,0,3595,3594,1,0,0,0,3595,
        3596,1,0,0,0,3596,3597,1,0,0,0,3597,3599,3,1140,570,0,3598,3600,
        3,770,385,0,3599,3598,1,0,0,0,3599,3600,1,0,0,0,3600,751,1,0,0,0,
        3601,3604,3,756,378,0,3602,3604,3,754,377,0,3603,3601,1,0,0,0,3603,
        3602,1,0,0,0,3604,753,1,0,0,0,3605,3607,3,602,301,0,3606,3608,3,
        770,385,0,3607,3606,1,0,0,0,3607,3608,1,0,0,0,3608,755,1,0,0,0,3609,
        3611,5,25,0,0,3610,3609,1,0,0,0,3610,3611,1,0,0,0,3611,3612,1,0,
        0,0,3612,3614,3,1144,572,0,3613,3615,3,770,385,0,3614,3613,1,0,0,
        0,3614,3615,1,0,0,0,3615,757,1,0,0,0,3616,3618,5,166,0,0,3617,3619,
        3,770,385,0,3618,3617,1,0,0,0,3618,3619,1,0,0,0,3619,759,1,0,0,0,
        3620,3622,5,102,0,0,3621,3620,1,0,0,0,3621,3622,1,0,0,0,3622,3623,
        1,0,0,0,3623,3624,3,762,381,0,3624,761,1,0,0,0,3625,3626,7,19,0,
        0,3626,763,1,0,0,0,3627,3629,5,25,0,0,3628,3627,1,0,0,0,3628,3629,
        1,0,0,0,3629,3630,1,0,0,0,3630,3632,5,176,0,0,3631,3633,3,770,385,
        0,3632,3631,1,0,0,0,3632,3633,1,0,0,0,3633,3642,1,0,0,0,3634,3636,
        5,176,0,0,3635,3634,1,0,0,0,3635,3636,1,0,0,0,3636,3637,1,0,0,0,
        3637,3639,3,766,383,0,3638,3640,3,770,385,0,3639,3638,1,0,0,0,3639,
        3640,1,0,0,0,3640,3642,1,0,0,0,3641,3628,1,0,0,0,3641,3635,1,0,0,
        0,3642,765,1,0,0,0,3643,3645,5,369,0,0,3644,3646,3,768,384,0,3645,
        3644,1,0,0,0,3645,3646,1,0,0,0,3646,3647,1,0,0,0,3647,3648,5,380,
        0,0,3648,767,1,0,0,0,3649,3654,3,772,386,0,3650,3651,5,361,0,0,3651,
        3653,3,772,386,0,3652,3650,1,0,0,0,3653,3656,1,0,0,0,3654,3652,1,
        0,0,0,3654,3655,1,0,0,0,3655,769,1,0,0,0,3656,3654,1,0,0,0,3657,
        3658,5,152,0,0,3658,3659,5,154,0,0,3659,771,1,0,0,0,3660,3662,3,
        1084,542,0,3661,3663,3,676,338,0,3662,3661,1,0,0,0,3662,3663,1,0,
        0,0,3663,3664,1,0,0,0,3664,3665,3,674,337,0,3665,773,1,0,0,0,3666,
        3667,3,822,411,0,3667,775,1,0,0,0,3668,3678,3,780,390,0,3669,3678,
        3,782,391,0,3670,3678,3,786,393,0,3671,3678,3,792,396,0,3672,3678,
        3,796,398,0,3673,3678,3,802,401,0,3674,3678,3,812,406,0,3675,3678,
        3,814,407,0,3676,3678,3,816,408,0,3677,3668,1,0,0,0,3677,3669,1,
        0,0,0,3677,3670,1,0,0,0,3677,3671,1,0,0,0,3677,3672,1,0,0,0,3677,
        3673,1,0,0,0,3677,3674,1,0,0,0,3677,3675,1,0,0,0,3677,3676,1,0,0,
        0,3678,777,1,0,0,0,3679,3680,7,20,0,0,3680,779,1,0,0,0,3681,3699,
        5,89,0,0,3682,3683,5,369,0,0,3683,3684,3,302,151,0,3684,3685,5,380,
        0,0,3685,3700,1,0,0,0,3686,3687,5,371,0,0,3687,3688,3,302,151,0,
        3688,3689,5,382,0,0,3689,3700,1,0,0,0,3690,3691,5,369,0,0,3691,3692,
        3,220,110,0,3692,3693,5,380,0,0,3693,3700,1,0,0,0,3694,3695,5,371,
        0,0,3695,3696,3,220,110,0,3696,3697,5,382,0,0,3697,3700,1,0,0,0,
        3698,3700,3,56,28,0,3699,3682,1,0,0,0,3699,3686,1,0,0,0,3699,3690,
        1,0,0,0,3699,3694,1,0,0,0,3699,3698,1,0,0,0,3700,781,1,0,0,0,3701,
        3702,3,842,421,0,3702,3703,3,784,392,0,3703,783,1,0,0,0,3704,3706,
        5,127,0,0,3705,3707,5,152,0,0,3706,3705,1,0,0,0,3706,3707,1,0,0,
        0,3707,3708,1,0,0,0,3708,3709,5,154,0,0,3709,785,1,0,0,0,3710,3711,
        3,842,421,0,3711,3712,3,788,394,0,3712,787,1,0,0,0,3713,3715,5,127,
        0,0,3714,3716,5,152,0,0,3715,3714,1,0,0,0,3715,3716,1,0,0,0,3716,
        3717,1,0,0,0,3717,3718,3,676,338,0,3718,3719,3,674,337,0,3719,789,
        1,0,0,0,3720,3722,5,127,0,0,3721,3723,5,152,0,0,3722,3721,1,0,0,
        0,3722,3723,1,0,0,0,3723,3725,1,0,0,0,3724,3726,3,1016,508,0,3725,
        3724,1,0,0,0,3725,3726,1,0,0,0,3726,3727,1,0,0,0,3727,3728,5,302,
        0,0,3728,791,1,0,0,0,3729,3730,3,432,216,0,3730,3731,3,794,397,0,
        3731,793,1,0,0,0,3732,3734,5,127,0,0,3733,3735,5,152,0,0,3734,3733,
        1,0,0,0,3734,3735,1,0,0,0,3735,3736,1,0,0,0,3736,3737,5,283,0,0,
        3737,795,1,0,0,0,3738,3739,3,432,216,0,3739,3740,3,798,399,0,3740,
        797,1,0,0,0,3741,3742,3,800,400,0,3742,3743,3,428,214,0,3743,799,
        1,0,0,0,3744,3746,5,127,0,0,3745,3747,5,152,0,0,3746,3745,1,0,0,
        0,3746,3747,1,0,0,0,3747,3748,1,0,0,0,3748,3751,5,293,0,0,3749,3751,
        5,360,0,0,3750,3744,1,0,0,0,3750,3749,1,0,0,0,3751,801,1,0,0,0,3752,
        3753,3,804,402,0,3753,3754,3,806,403,0,3754,3759,1,0,0,0,3755,3756,
        3,804,402,0,3756,3757,3,808,404,0,3757,3759,1,0,0,0,3758,3752,1,
        0,0,0,3758,3755,1,0,0,0,3759,803,1,0,0,0,3760,3761,3,432,216,0,3761,
        805,1,0,0,0,3762,3764,5,127,0,0,3763,3765,5,152,0,0,3764,3763,1,
        0,0,0,3764,3765,1,0,0,0,3765,3766,1,0,0,0,3766,3767,5,312,0,0,3767,
        3768,5,158,0,0,3768,3769,3,810,405,0,3769,807,1,0,0,0,3770,3772,
        5,127,0,0,3771,3773,5,152,0,0,3772,3771,1,0,0,0,3772,3773,1,0,0,
        0,3773,3774,1,0,0,0,3774,3775,5,281,0,0,3775,3776,5,158,0,0,3776,
        3777,3,810,405,0,3777,809,1,0,0,0,3778,3779,3,432,216,0,3779,811,
        1,0,0,0,3780,3781,5,23,0,0,3781,3782,5,371,0,0,3782,3783,3,432,216,
        0,3783,3784,5,361,0,0,3784,3789,3,432,216,0,3785,3786,5,361,0,0,
        3786,3788,3,432,216,0,3787,3785,1,0,0,0,3788,3791,1,0,0,0,3789,3787,
        1,0,0,0,3789,3790,1,0,0,0,3790,3792,1,0,0,0,3791,3789,1,0,0,0,3792,
        3793,5,382,0,0,3793,813,1,0,0,0,3794,3795,5,184,0,0,3795,3796,5,
        371,0,0,3796,3797,3,432,216,0,3797,3798,5,361,0,0,3798,3803,3,432,
        216,0,3799,3800,5,361,0,0,3800,3802,3,432,216,0,3801,3799,1,0,0,
        0,3802,3805,1,0,0,0,3803,3801,1,0,0,0,3803,3804,1,0,0,0,3804,3806,
        1,0,0,0,3805,3803,1,0,0,0,3806,3807,5,382,0,0,3807,815,1,0,0,0,3808,
        3809,5,173,0,0,3809,3810,5,371,0,0,3810,3811,3,432,216,0,3811,3812,
        5,361,0,0,3812,3813,3,1082,541,0,3813,3814,5,382,0,0,3814,817,1,
        0,0,0,3815,3816,6,409,-1,0,3816,3817,7,21,0,0,3817,3834,3,818,409,
        15,3818,3834,3,776,388,0,3819,3820,5,152,0,0,3820,3834,3,818,409,
        8,3821,3823,5,305,0,0,3822,3821,1,0,0,0,3822,3823,1,0,0,0,3823,3824,
        1,0,0,0,3824,3825,5,289,0,0,3825,3834,3,88,44,0,3826,3828,5,278,
        0,0,3827,3826,1,0,0,0,3827,3828,1,0,0,0,3828,3829,1,0,0,0,3829,3830,
        5,313,0,0,3830,3834,3,92,46,0,3831,3834,3,820,410,0,3832,3834,3,
        842,421,0,3833,3815,1,0,0,0,3833,3818,1,0,0,0,3833,3819,1,0,0,0,
        3833,3822,1,0,0,0,3833,3827,1,0,0,0,3833,3831,1,0,0,0,3833,3832,
        1,0,0,0,3834,3864,1,0,0,0,3835,3836,10,14,0,0,3836,3837,7,22,0,0,
        3837,3863,3,818,409,15,3838,3839,10,13,0,0,3839,3840,7,21,0,0,3840,
        3863,3,818,409,14,3841,3842,10,12,0,0,3842,3843,5,331,0,0,3843,3863,
        3,818,409,13,3844,3845,10,11,0,0,3845,3846,3,778,389,0,3846,3847,
        3,818,409,12,3847,3863,1,0,0,0,3848,3849,10,6,0,0,3849,3850,5,24,
        0,0,3850,3863,3,818,409,7,3851,3852,10,5,0,0,3852,3853,7,23,0,0,
        3853,3863,3,818,409,6,3854,3855,10,9,0,0,3855,3863,3,790,395,0,3856,
        3857,10,7,0,0,3857,3859,5,127,0,0,3858,3860,5,152,0,0,3859,3858,
        1,0,0,0,3859,3860,1,0,0,0,3860,3861,1,0,0,0,3861,3863,3,950,475,
        0,3862,3835,1,0,0,0,3862,3838,1,0,0,0,3862,3841,1,0,0,0,3862,3844,
        1,0,0,0,3862,3848,1,0,0,0,3862,3851,1,0,0,0,3862,3854,1,0,0,0,3862,
        3856,1,0,0,0,3863,3866,1,0,0,0,3864,3862,1,0,0,0,3864,3865,1,0,0,
        0,3865,819,1,0,0,0,3866,3864,1,0,0,0,3867,3874,3,954,477,0,3868,
        3874,3,1042,521,0,3869,3874,3,1022,511,0,3870,3874,3,1050,525,0,
        3871,3874,3,824,412,0,3872,3874,3,928,464,0,3873,3867,1,0,0,0,3873,
        3868,1,0,0,0,3873,3869,1,0,0,0,3873,3870,1,0,0,0,3873,3871,1,0,0,
        0,3873,3872,1,0,0,0,3874,821,1,0,0,0,3875,3876,3,818,409,0,3876,
        823,1,0,0,0,3877,3883,3,826,413,0,3878,3883,3,828,414,0,3879,3883,
        3,830,415,0,3880,3883,3,832,416,0,3881,3883,3,834,417,0,3882,3877,
        1,0,0,0,3882,3878,1,0,0,0,3882,3879,1,0,0,0,3882,3880,1,0,0,0,3882,
        3881,1,0,0,0,3883,825,1,0,0,0,3884,3885,7,24,0,0,3885,3886,5,371,
        0,0,3886,3887,3,818,409,0,3887,3888,5,361,0,0,3888,3889,3,1018,509,
        0,3889,3890,5,382,0,0,3890,827,1,0,0,0,3891,3892,5,210,0,0,3892,
        3893,5,371,0,0,3893,3894,3,1008,504,0,3894,3895,5,382,0,0,3895,829,
        1,0,0,0,3896,3897,7,25,0,0,3897,3898,5,371,0,0,3898,3899,3,818,409,
        0,3899,3900,5,382,0,0,3900,831,1,0,0,0,3901,3902,7,26,0,0,3902,3903,
        5,371,0,0,3903,3906,3,818,409,0,3904,3905,5,361,0,0,3905,3907,3,
        818,409,0,3906,3904,1,0,0,0,3906,3907,1,0,0,0,3907,3908,1,0,0,0,
        3908,3909,5,382,0,0,3909,833,1,0,0,0,3910,3911,5,151,0,0,3911,3912,
        5,371,0,0,3912,3915,3,818,409,0,3913,3914,5,361,0,0,3914,3916,3,
        1016,508,0,3915,3913,1,0,0,0,3915,3916,1,0,0,0,3916,3917,1,0,0,0,
        3917,3918,5,382,0,0,3918,835,1,0,0,0,3919,3920,3,842,421,0,3920,
        837,1,0,0,0,3921,3922,3,842,421,0,3922,839,1,0,0,0,3923,3924,3,818,
        409,0,3924,841,1,0,0,0,3925,3926,6,421,-1,0,3926,3937,3,844,422,
        0,3927,3937,3,894,447,0,3928,3937,3,850,425,0,3929,3937,3,916,458,
        0,3930,3937,3,860,430,0,3931,3937,3,862,431,0,3932,3937,3,888,444,
        0,3933,3937,3,910,455,0,3934,3937,3,858,429,0,3935,3937,3,912,456,
        0,3936,3925,1,0,0,0,3936,3927,1,0,0,0,3936,3928,1,0,0,0,3936,3929,
        1,0,0,0,3936,3930,1,0,0,0,3936,3931,1,0,0,0,3936,3932,1,0,0,0,3936,
        3933,1,0,0,0,3936,3934,1,0,0,0,3936,3935,1,0,0,0,3937,3943,1,0,0,
        0,3938,3939,10,7,0,0,3939,3940,5,375,0,0,3940,3942,3,1082,541,0,
        3941,3938,1,0,0,0,3942,3945,1,0,0,0,3943,3941,1,0,0,0,3943,3944,
        1,0,0,0,3944,843,1,0,0,0,3945,3943,1,0,0,0,3946,3947,5,371,0,0,3947,
        3948,3,818,409,0,3948,3949,5,382,0,0,3949,845,1,0,0,0,3950,3953,
        3,848,424,0,3951,3953,3,912,456,0,3952,3950,1,0,0,0,3952,3951,1,
        0,0,0,3953,847,1,0,0,0,3954,3967,3,894,447,0,3955,3967,3,850,425,
        0,3956,3967,3,916,458,0,3957,3958,3,842,421,0,3958,3959,5,375,0,
        0,3959,3960,3,1082,541,0,3960,3967,1,0,0,0,3961,3967,3,860,430,0,
        3962,3967,3,862,431,0,3963,3967,3,888,444,0,3964,3967,3,910,455,
        0,3965,3967,3,858,429,0,3966,3954,1,0,0,0,3966,3955,1,0,0,0,3966,
        3956,1,0,0,0,3966,3957,1,0,0,0,3966,3961,1,0,0,0,3966,3962,1,0,0,
        0,3966,3963,1,0,0,0,3966,3964,1,0,0,0,3966,3965,1,0,0,0,3967,849,
        1,0,0,0,3968,3971,3,1094,547,0,3969,3971,3,854,427,0,3970,3968,1,
        0,0,0,3970,3969,1,0,0,0,3971,851,1,0,0,0,3972,3975,3,1124,562,0,
        3973,3975,3,856,428,0,3974,3972,1,0,0,0,3974,3973,1,0,0,0,3975,853,
        1,0,0,0,3976,3979,3,856,428,0,3977,3979,5,189,0,0,3978,3976,1,0,
        0,0,3978,3977,1,0,0,0,3979,855,1,0,0,0,3980,3981,5,327,0,0,3981,
        857,1,0,0,0,3982,3983,5,130,0,0,3983,3984,3,228,114,0,3984,3985,
        5,109,0,0,3985,3986,3,818,409,0,3986,3987,5,87,0,0,3987,859,1,0,
        0,0,3988,3989,5,225,0,0,3989,3990,3,56,28,0,3990,861,1,0,0,0,3991,
        3994,3,864,432,0,3992,3994,3,866,433,0,3993,3991,1,0,0,0,3993,3992,
        1,0,0,0,3994,863,1,0,0,0,3995,3996,5,156,0,0,3996,3997,5,371,0,0,
        3997,3998,3,818,409,0,3998,3999,5,361,0,0,3999,4000,3,818,409,0,
        4000,4001,5,382,0,0,4001,4014,1,0,0,0,4002,4003,5,55,0,0,4003,4004,
        5,371,0,0,4004,4007,3,818,409,0,4005,4006,5,361,0,0,4006,4008,3,
        818,409,0,4007,4005,1,0,0,0,4008,4009,1,0,0,0,4009,4007,1,0,0,0,
        4009,4010,1,0,0,0,4010,4011,1,0,0,0,4011,4012,5,382,0,0,4012,4014,
        1,0,0,0,4013,3995,1,0,0,0,4013,4002,1,0,0,0,4014,865,1,0,0,0,4015,
        4018,3,868,434,0,4016,4018,3,870,435,0,4017,4015,1,0,0,0,4017,4016,
        1,0,0,0,4018,867,1,0,0,0,4019,4020,5,46,0,0,4020,4022,3,878,439,
        0,4021,4023,3,872,436,0,4022,4021,1,0,0,0,4023,4024,1,0,0,0,4024,
        4022,1,0,0,0,4024,4025,1,0,0,0,4025,4027,1,0,0,0,4026,4028,3,876,
        438,0,4027,4026,1,0,0,0,4027,4028,1,0,0,0,4028,4029,1,0,0,0,4029,
        4030,5,87,0,0,4030,869,1,0,0,0,4031,4033,5,46,0,0,4032,4034,3,874,
        437,0,4033,4032,1,0,0,0,4034,4035,1,0,0,0,4035,4033,1,0,0,0,4035,
        4036,1,0,0,0,4036,4038,1,0,0,0,4037,4039,3,876,438,0,4038,4037,1,
        0,0,0,4038,4039,1,0,0,0,4039,4040,1,0,0,0,4040,4041,5,87,0,0,4041,
        871,1,0,0,0,4042,4043,5,229,0,0,4043,4044,3,880,440,0,4044,4045,
        5,206,0,0,4045,4046,3,884,442,0,4046,873,1,0,0,0,4047,4048,5,229,
        0,0,4048,4049,3,774,387,0,4049,4050,5,206,0,0,4050,4051,3,884,442,
        0,4051,875,1,0,0,0,4052,4053,5,86,0,0,4053,4054,3,884,442,0,4054,
        877,1,0,0,0,4055,4058,3,846,423,0,4056,4058,3,432,216,0,4057,4055,
        1,0,0,0,4057,4056,1,0,0,0,4058,879,1,0,0,0,4059,4064,3,882,441,0,
        4060,4061,5,361,0,0,4061,4063,3,882,441,0,4062,4060,1,0,0,0,4063,
        4066,1,0,0,0,4064,4062,1,0,0,0,4064,4065,1,0,0,0,4065,881,1,0,0,
        0,4066,4064,1,0,0,0,4067,4079,3,846,423,0,4068,4069,3,778,389,0,
        4069,4070,3,818,409,0,4070,4079,1,0,0,0,4071,4079,3,784,392,0,4072,
        4079,3,788,394,0,4073,4079,3,790,395,0,4074,4079,3,794,397,0,4075,
        4079,3,798,399,0,4076,4079,3,806,403,0,4077,4079,3,808,404,0,4078,
        4067,1,0,0,0,4078,4068,1,0,0,0,4078,4071,1,0,0,0,4078,4072,1,0,0,
        0,4078,4073,1,0,0,0,4078,4074,1,0,0,0,4078,4075,1,0,0,0,4078,4076,
        1,0,0,0,4078,4077,1,0,0,0,4079,883,1,0,0,0,4080,4083,3,886,443,0,
        4081,4083,3,1128,564,0,4082,4080,1,0,0,0,4082,4081,1,0,0,0,4083,
        885,1,0,0,0,4084,4085,3,818,409,0,4085,887,1,0,0,0,4086,4087,5,47,
        0,0,4087,4088,5,371,0,0,4088,4089,3,890,445,0,4089,4090,5,27,0,0,
        4090,4091,3,892,446,0,4091,4092,5,382,0,0,4092,889,1,0,0,0,4093,
        4096,3,818,409,0,4094,4096,3,1128,564,0,4095,4093,1,0,0,0,4095,4094,
        1,0,0,0,4096,891,1,0,0,0,4097,4098,3,674,337,0,4098,893,1,0,0,0,
        4099,4100,5,62,0,0,4100,4101,5,371,0,0,4101,4102,5,359,0,0,4102,
        4106,5,382,0,0,4103,4106,3,896,448,0,4104,4106,3,898,449,0,4105,
        4099,1,0,0,0,4105,4103,1,0,0,0,4105,4104,1,0,0,0,4106,895,1,0,0,
        0,4107,4108,3,900,450,0,4108,4110,5,371,0,0,4109,4111,3,902,451,
        0,4110,4109,1,0,0,0,4110,4111,1,0,0,0,4111,4112,1,0,0,0,4112,4113,
        3,818,409,0,4113,4114,5,382,0,0,4114,897,1,0,0,0,4115,4116,3,904,
        452,0,4116,4117,5,371,0,0,4117,4118,3,906,453,0,4118,4119,5,361,
        0,0,4119,4120,3,908,454,0,4120,4121,5,382,0,0,4121,899,1,0,0,0,4122,
        4123,7,27,0,0,4123,901,1,0,0,0,4124,4125,7,28,0,0,4125,903,1,0,0,
        0,4126,4127,7,29,0,0,4127,905,1,0,0,0,4128,4130,3,902,451,0,4129,
        4128,1,0,0,0,4129,4130,1,0,0,0,4130,4131,1,0,0,0,4131,4132,3,952,
        476,0,4132,907,1,0,0,0,4133,4134,3,952,476,0,4134,909,1,0,0,0,4135,
        4136,5,85,0,0,4136,4137,5,371,0,0,4137,4138,3,432,216,0,4138,4139,
        5,382,0,0,4139,911,1,0,0,0,4140,4141,3,1092,546,0,4141,913,1,0,0,
        0,4142,4143,3,818,409,0,4143,915,1,0,0,0,4144,4145,3,918,459,0,4145,
        917,1,0,0,0,4146,4147,5,166,0,0,4147,4148,5,370,0,0,4148,4149,3,
        920,460,0,4149,4150,5,381,0,0,4150,919,1,0,0,0,4151,4155,3,922,461,
        0,4152,4154,3,924,462,0,4153,4152,1,0,0,0,4154,4157,1,0,0,0,4155,
        4153,1,0,0,0,4155,4156,1,0,0,0,4156,921,1,0,0,0,4157,4155,1,0,0,
        0,4158,4159,3,836,418,0,4159,923,1,0,0,0,4160,4161,5,361,0,0,4161,
        4162,3,838,419,0,4162,4163,5,361,0,0,4163,4164,3,836,418,0,4164,
        925,1,0,0,0,4165,4166,3,818,409,0,4166,927,1,0,0,0,4167,4170,3,930,
        465,0,4168,4170,3,932,466,0,4169,4167,1,0,0,0,4169,4168,1,0,0,0,
        4170,929,1,0,0,0,4171,4172,5,210,0,0,4172,4173,5,371,0,0,4173,4174,
        3,926,463,0,4174,4175,5,361,0,0,4175,4176,3,952,476,0,4176,4177,
        5,382,0,0,4177,931,1,0,0,0,4178,4179,5,287,0,0,4179,4180,5,371,0,
        0,4180,4181,3,914,457,0,4181,4182,5,382,0,0,4182,933,1,0,0,0,4183,
        4184,3,936,468,0,4184,935,1,0,0,0,4185,4187,3,760,380,0,4186,4185,
        1,0,0,0,4186,4187,1,0,0,0,4187,4188,1,0,0,0,4188,4190,5,370,0,0,
        4189,4191,3,938,469,0,4190,4189,1,0,0,0,4190,4191,1,0,0,0,4191,4192,
        1,0,0,0,4192,4193,5,381,0,0,4193,937,1,0,0,0,4194,4199,3,940,470,
        0,4195,4196,5,361,0,0,4196,4198,3,940,470,0,4197,4195,1,0,0,0,4198,
        4201,1,0,0,0,4199,4197,1,0,0,0,4199,4200,1,0,0,0,4200,939,1,0,0,
        0,4201,4199,1,0,0,0,4202,4203,3,818,409,0,4203,941,1,0,0,0,4204,
        4206,5,176,0,0,4205,4204,1,0,0,0,4205,4206,1,0,0,0,4206,4207,1,0,
        0,0,4207,4208,3,944,472,0,4208,943,1,0,0,0,4209,4211,5,369,0,0,4210,
        4212,3,946,473,0,4211,4210,1,0,0,0,4211,4212,1,0,0,0,4212,4213,1,
        0,0,0,4213,4214,5,380,0,0,4214,945,1,0,0,0,4215,4220,3,948,474,0,
        4216,4217,5,361,0,0,4217,4219,3,948,474,0,4218,4216,1,0,0,0,4219,
        4222,1,0,0,0,4220,4218,1,0,0,0,4220,4221,1,0,0,0,4221,947,1,0,0,
        0,4222,4220,1,0,0,0,4223,4224,3,1084,542,0,4224,4225,5,360,0,0,4225,
        4226,3,818,409,0,4226,949,1,0,0,0,4227,4228,5,2,0,0,4228,951,1,0,
        0,0,4229,4230,6,476,-1,0,4230,4231,7,21,0,0,4231,4235,3,952,476,
        5,4232,4235,3,842,421,0,4233,4235,3,954,477,0,4234,4229,1,0,0,0,
        4234,4232,1,0,0,0,4234,4233,1,0,0,0,4235,4244,1,0,0,0,4236,4237,
        10,4,0,0,4237,4238,7,22,0,0,4238,4243,3,952,476,5,4239,4240,10,3,
        0,0,4240,4241,7,21,0,0,4241,4243,3,952,476,4,4242,4236,1,0,0,0,4242,
        4239,1,0,0,0,4243,4246,1,0,0,0,4244,4242,1,0,0,0,4244,4245,1,0,0,
        0,4245,953,1,0,0,0,4246,4244,1,0,0,0,4247,4261,3,956,478,0,4248,
        4261,3,958,479,0,4249,4261,3,968,484,0,4250,4261,3,970,485,0,4251,
        4261,3,976,488,0,4252,4261,3,980,490,0,4253,4261,3,986,493,0,4254,
        4261,3,988,494,0,4255,4261,3,990,495,0,4256,4261,3,992,496,0,4257,
        4261,3,998,499,0,4258,4261,3,1000,500,0,4259,4261,3,1002,501,0,4260,
        4247,1,0,0,0,4260,4248,1,0,0,0,4260,4249,1,0,0,0,4260,4250,1,0,0,
        0,4260,4251,1,0,0,0,4260,4252,1,0,0,0,4260,4253,1,0,0,0,4260,4254,
        1,0,0,0,4260,4255,1,0,0,0,4260,4256,1,0,0,0,4260,4257,1,0,0,0,4260,
        4258,1,0,0,0,4260,4259,1,0,0,0,4261,955,1,0,0,0,4262,4266,3,962,
        481,0,4263,4266,3,964,482,0,4264,4266,3,966,483,0,4265,4262,1,0,
        0,0,4265,4263,1,0,0,0,4265,4264,1,0,0,0,4266,957,1,0,0,0,4267,4268,
        5,45,0,0,4268,4269,5,371,0,0,4269,4270,3,960,480,0,4270,4271,5,382,
        0,0,4271,4278,1,0,0,0,4272,4273,5,194,0,0,4273,4274,5,371,0,0,4274,
        4275,3,926,463,0,4275,4276,5,382,0,0,4276,4278,1,0,0,0,4277,4267,
        1,0,0,0,4277,4272,1,0,0,0,4278,959,1,0,0,0,4279,4280,3,818,409,0,
        4280,961,1,0,0,0,4281,4282,7,30,0,0,4282,4283,5,371,0,0,4283,4284,
        3,1004,502,0,4284,4285,5,382,0,0,4285,963,1,0,0,0,4286,4287,7,31,
        0,0,4287,4288,5,371,0,0,4288,4289,3,1006,503,0,4289,4290,5,382,0,
        0,4290,965,1,0,0,0,4291,4292,5,167,0,0,4292,4293,5,371,0,0,4293,
        4294,3,914,457,0,4294,4295,5,382,0,0,4295,967,1,0,0,0,4296,4297,
        5,20,0,0,4297,4298,5,371,0,0,4298,4299,3,818,409,0,4299,4300,5,382,
        0,0,4300,969,1,0,0,0,4301,4302,5,147,0,0,4302,4303,5,371,0,0,4303,
        4304,3,972,486,0,4304,4305,5,361,0,0,4305,4306,3,974,487,0,4306,
        4307,5,382,0,0,4307,971,1,0,0,0,4308,4309,3,952,476,0,4309,973,1,
        0,0,0,4310,4311,3,952,476,0,4311,975,1,0,0,0,4312,4313,3,978,489,
        0,4313,4314,5,371,0,0,4314,4315,3,952,476,0,4315,4316,5,382,0,0,
        4316,977,1,0,0,0,4317,4318,7,32,0,0,4318,979,1,0,0,0,4319,4320,5,
        139,0,0,4320,4321,5,371,0,0,4321,4322,3,982,491,0,4322,4323,5,361,
        0,0,4323,4324,3,984,492,0,4324,4325,5,382,0,0,4325,981,1,0,0,0,4326,
        4327,3,952,476,0,4327,983,1,0,0,0,4328,4329,3,952,476,0,4329,985,
        1,0,0,0,4330,4331,5,140,0,0,4331,4332,5,371,0,0,4332,4333,3,952,
        476,0,4333,4334,5,382,0,0,4334,987,1,0,0,0,4335,4336,5,134,0,0,4336,
        4337,5,371,0,0,4337,4338,3,952,476,0,4338,4339,5,382,0,0,4339,989,
        1,0,0,0,4340,4341,5,90,0,0,4341,4342,5,371,0,0,4342,4343,3,952,476,
        0,4343,4344,5,382,0,0,4344,991,1,0,0,0,4345,4346,5,171,0,0,4346,
        4347,5,371,0,0,4347,4348,3,994,497,0,4348,4349,5,361,0,0,4349,4350,
        3,996,498,0,4350,4351,5,382,0,0,4351,993,1,0,0,0,4352,4353,3,952,
        476,0,4353,995,1,0,0,0,4354,4355,3,952,476,0,4355,997,1,0,0,0,4356,
        4357,5,198,0,0,4357,4358,5,371,0,0,4358,4359,3,952,476,0,4359,4360,
        5,382,0,0,4360,999,1,0,0,0,4361,4362,5,99,0,0,4362,4363,5,371,0,
        0,4363,4364,3,952,476,0,4364,4365,5,382,0,0,4365,1001,1,0,0,0,4366,
        4367,7,33,0,0,4367,4368,5,371,0,0,4368,4369,3,952,476,0,4369,4370,
        5,382,0,0,4370,1003,1,0,0,0,4371,4372,3,818,409,0,4372,1005,1,0,
        0,0,4373,4374,3,818,409,0,4374,1007,1,0,0,0,4375,4377,3,1012,506,
        0,4376,4375,1,0,0,0,4376,4377,1,0,0,0,4377,4379,1,0,0,0,4378,4380,
        3,1014,507,0,4379,4378,1,0,0,0,4379,4380,1,0,0,0,4380,4381,1,0,0,
        0,4381,4383,5,101,0,0,4382,4376,1,0,0,0,4382,4383,1,0,0,0,4383,4384,
        1,0,0,0,4384,4385,3,1010,505,0,4385,1009,1,0,0,0,4386,4387,3,818,
        409,0,4387,1011,1,0,0,0,4388,4389,7,34,0,0,4389,1013,1,0,0,0,4390,
        4391,3,818,409,0,4391,1015,1,0,0,0,4392,4393,7,35,0,0,4393,1017,
        1,0,0,0,4394,4395,3,952,476,0,4395,1019,1,0,0,0,4396,4397,3,818,
        409,0,4397,1021,1,0,0,0,4398,4404,3,1024,512,0,4399,4404,3,1026,
        513,0,4400,4404,3,1030,515,0,4401,4404,3,1028,514,0,4402,4404,3,
        1032,516,0,4403,4398,1,0,0,0,4403,4399,1,0,0,0,4403,4400,1,0,0,0,
        4403,4401,1,0,0,0,4403,4402,1,0,0,0,4404,1023,1,0,0,0,4405,4413,
        5,64,0,0,4406,4407,5,70,0,0,4407,4409,5,371,0,0,4408,4410,3,1034,
        517,0,4409,4408,1,0,0,0,4409,4410,1,0,0,0,4410,4411,1,0,0,0,4411,
        4413,5,382,0,0,4412,4405,1,0,0,0,4412,4406,1,0,0,0,4413,1025,1,0,
        0,0,4414,4422,5,68,0,0,4415,4416,5,237,0,0,4416,4418,5,371,0,0,4417,
        4419,3,1036,518,0,4418,4417,1,0,0,0,4418,4419,1,0,0,0,4419,4420,
        1,0,0,0,4420,4422,5,382,0,0,4421,4414,1,0,0,0,4421,4415,1,0,0,0,
        4422,1027,1,0,0,0,4423,4429,5,137,0,0,4424,4426,5,371,0,0,4425,4427,
        3,1036,518,0,4426,4425,1,0,0,0,4426,4427,1,0,0,0,4427,4428,1,0,0,
        0,4428,4430,5,382,0,0,4429,4424,1,0,0,0,4429,4430,1,0,0,0,4430,1029,
        1,0,0,0,4431,4439,5,69,0,0,4432,4433,5,236,0,0,4433,4435,5,371,0,
        0,4434,4436,3,1038,519,0,4435,4434,1,0,0,0,4435,4436,1,0,0,0,4436,
        4437,1,0,0,0,4437,4439,5,382,0,0,4438,4431,1,0,0,0,4438,4432,1,0,
        0,0,4439,1031,1,0,0,0,4440,4448,5,138,0,0,4441,4442,5,136,0,0,4442,
        4444,5,371,0,0,4443,4445,3,1038,519,0,4444,4443,1,0,0,0,4444,4445,
        1,0,0,0,4445,4446,1,0,0,0,4446,4448,5,382,0,0,4447,4440,1,0,0,0,
        4447,4441,1,0,0,0,4448,1033,1,0,0,0,4449,4452,3,1130,565,0,4450,
        4452,3,942,471,0,4451,4449,1,0,0,0,4451,4450,1,0,0,0,4452,1035,1,
        0,0,0,4453,4456,3,1132,566,0,4454,4456,3,942,471,0,4455,4453,1,0,
        0,0,4455,4454,1,0,0,0,4456,1037,1,0,0,0,4457,4460,3,1134,567,0,4458,
        4460,3,942,471,0,4459,4457,1,0,0,0,4459,4458,1,0,0,0,4460,1039,1,
        0,0,0,4461,4462,3,818,409,0,4462,1041,1,0,0,0,4463,4464,5,84,0,0,
        4464,4465,5,371,0,0,4465,4466,3,1044,522,0,4466,4468,5,382,0,0,4467,
        4469,3,728,364,0,4468,4467,1,0,0,0,4468,4469,1,0,0,0,4469,1043,1,
        0,0,0,4470,4471,3,1046,523,0,4471,4472,5,361,0,0,4472,4473,3,1048,
        524,0,4473,1045,1,0,0,0,4474,4475,3,1020,510,0,4475,1047,1,0,0,0,
        4476,4477,3,1020,510,0,4477,1049,1,0,0,0,4478,4481,3,1052,526,0,
        4479,4481,3,968,484,0,4480,4478,1,0,0,0,4480,4479,1,0,0,0,4481,1051,
        1,0,0,0,4482,4483,5,83,0,0,4483,4484,5,371,0,0,4484,4485,3,1054,
        527,0,4485,4486,5,382,0,0,4486,1053,1,0,0,0,4487,4490,3,1138,569,
        0,4488,4490,3,942,471,0,4489,4487,1,0,0,0,4489,4488,1,0,0,0,4490,
        1055,1,0,0,0,4491,4492,3,1110,555,0,4492,1057,1,0,0,0,4493,4494,
        3,1112,556,0,4494,1059,1,0,0,0,4495,4496,3,1110,555,0,4496,1061,
        1,0,0,0,4497,4498,3,1110,555,0,4498,1063,1,0,0,0,4499,4502,3,1112,
        556,0,4500,4502,3,1066,533,0,4501,4499,1,0,0,0,4501,4500,1,0,0,0,
        4502,1065,1,0,0,0,4503,4504,7,36,0,0,4504,1067,1,0,0,0,4505,4506,
        3,1110,555,0,4506,1069,1,0,0,0,4507,4508,3,1110,555,0,4508,1071,
        1,0,0,0,4509,4510,3,1110,555,0,4510,1073,1,0,0,0,4511,4514,3,1112,
        556,0,4512,4514,3,1076,538,0,4513,4511,1,0,0,0,4513,4512,1,0,0,0,
        4514,1075,1,0,0,0,4515,4516,7,36,0,0,4516,1077,1,0,0,0,4517,4518,
        3,1110,555,0,4518,1079,1,0,0,0,4519,4520,3,1110,555,0,4520,1081,
        1,0,0,0,4521,4522,3,1110,555,0,4522,1083,1,0,0,0,4523,4524,3,1110,
        555,0,4524,1085,1,0,0,0,4525,4526,3,1092,546,0,4526,1087,1,0,0,0,
        4527,4528,3,1092,546,0,4528,1089,1,0,0,0,4529,4530,3,1112,556,0,
        4530,1091,1,0,0,0,4531,4532,3,1112,556,0,4532,1093,1,0,0,0,4533,
        4536,3,1118,559,0,4534,4536,3,1096,548,0,4535,4533,1,0,0,0,4535,
        4534,1,0,0,0,4536,1095,1,0,0,0,4537,4546,5,2,0,0,4538,4546,3,1116,
        558,0,4539,4546,5,7,0,0,4540,4546,3,1098,549,0,4541,4546,3,1136,
        568,0,4542,4546,3,1128,564,0,4543,4546,3,1106,553,0,4544,4546,3,
        1108,554,0,4545,4537,1,0,0,0,4545,4538,1,0,0,0,4545,4539,1,0,0,0,
        4545,4540,1,0,0,0,4545,4541,1,0,0,0,4545,4542,1,0,0,0,4545,4543,
        1,0,0,0,4545,4544,1,0,0,0,4546,1097,1,0,0,0,4547,4551,3,1100,550,
        0,4548,4551,3,1102,551,0,4549,4551,3,1104,552,0,4550,4547,1,0,0,
        0,4550,4548,1,0,0,0,4550,4549,1,0,0,0,4551,1099,1,0,0,0,4552,4553,
        5,70,0,0,4553,4554,3,1130,565,0,4554,1101,1,0,0,0,4555,4556,5,207,
        0,0,4556,4557,3,1132,566,0,4557,1103,1,0,0,0,4558,4559,7,37,0,0,
        4559,4560,3,1134,567,0,4560,1105,1,0,0,0,4561,4562,3,936,468,0,4562,
        1107,1,0,0,0,4563,4564,3,942,471,0,4564,1109,1,0,0,0,4565,4569,3,
        1112,556,0,4566,4569,5,4,0,0,4567,4569,5,5,0,0,4568,4565,1,0,0,0,
        4568,4566,1,0,0,0,4568,4567,1,0,0,0,4569,1111,1,0,0,0,4570,4573,
        5,325,0,0,4571,4573,3,1146,573,0,4572,4570,1,0,0,0,4572,4571,1,0,
        0,0,4573,1113,1,0,0,0,4574,4575,3,1116,558,0,4575,1115,1,0,0,0,4576,
        4577,7,38,0,0,4577,1117,1,0,0,0,4578,4581,3,1120,560,0,4579,4581,
        3,1122,561,0,4580,4578,1,0,0,0,4580,4579,1,0,0,0,4581,1119,1,0,0,
        0,4582,4588,5,8,0,0,4583,4588,5,11,0,0,4584,4588,5,12,0,0,4585,4588,
        5,14,0,0,4586,4588,3,1124,562,0,4587,4582,1,0,0,0,4587,4583,1,0,
        0,0,4587,4584,1,0,0,0,4587,4585,1,0,0,0,4587,4586,1,0,0,0,4588,1121,
        1,0,0,0,4589,4590,7,39,0,0,4590,1123,1,0,0,0,4591,4592,7,40,0,0,
        4592,1125,1,0,0,0,4593,4594,5,16,0,0,4594,1127,1,0,0,0,4595,4596,
        5,154,0,0,4596,1129,1,0,0,0,4597,4598,3,1116,558,0,4598,1131,1,0,
        0,0,4599,4600,3,1116,558,0,4600,1133,1,0,0,0,4601,4602,3,1116,558,
        0,4602,1135,1,0,0,0,4603,4604,5,83,0,0,4604,4605,3,1138,569,0,4605,
        1137,1,0,0,0,4606,4607,3,1116,558,0,4607,1139,1,0,0,0,4608,4609,
        7,41,0,0,4609,1141,1,0,0,0,4610,4611,7,42,0,0,4611,1143,1,0,0,0,
        4612,4613,7,43,0,0,4613,1145,1,0,0,0,4614,4615,7,44,0,0,4615,1147,
        1,0,0,0,511,1150,1157,1161,1166,1171,1176,1179,1184,1186,1190,1193,
        1197,1205,1211,1225,1228,1235,1248,1255,1258,1263,1269,1272,1282,
        1289,1298,1319,1322,1329,1334,1340,1346,1350,1355,1362,1365,1373,
        1380,1383,1395,1398,1409,1417,1425,1430,1434,1442,1449,1457,1463,
        1469,1474,1477,1482,1485,1488,1492,1495,1499,1503,1506,1509,1512,
        1524,1529,1535,1542,1547,1551,1557,1562,1565,1573,1579,1587,1591,
        1596,1603,1607,1612,1616,1620,1626,1639,1645,1657,1673,1678,1689,
        1699,1717,1722,1726,1730,1734,1736,1742,1747,1754,1770,1774,1779,
        1783,1790,1794,1811,1816,1823,1833,1841,1846,1862,1865,1869,1872,
        1876,1879,1885,1889,1892,1896,1903,1908,1915,1919,1923,1926,1929,
        1932,1935,1938,1940,1947,1952,1963,1970,1980,1983,1990,1993,1999,
        2008,2014,2018,2025,2038,2048,2053,2058,2062,2065,2069,2079,2082,
        2086,2089,2096,2100,2103,2123,2132,2137,2144,2148,2154,2160,2166,
        2169,2172,2177,2182,2185,2189,2193,2200,2204,2207,2213,2216,2219,
        2227,2232,2235,2240,2243,2248,2251,2255,2258,2261,2273,2280,2282,
        2287,2296,2301,2305,2312,2315,2318,2321,2332,2346,2355,2364,2398,
        2401,2405,2424,2432,2434,2445,2453,2457,2472,2505,2514,2524,2534,
        2545,2551,2561,2570,2597,2607,2620,2625,2641,2645,2661,2666,2669,
        2679,2692,2698,2707,2713,2720,2725,2732,2740,2743,2751,2754,2763,
        2767,2770,2776,2783,2791,2793,2808,2813,2817,2821,2825,2829,2832,
        2838,2843,2847,2850,2854,2857,2866,2869,2879,2882,2886,2890,2894,
        2899,2906,2909,2913,2916,2923,2926,2936,2968,2971,2979,2982,2991,
        2995,3030,3037,3042,3051,3056,3063,3079,3082,3089,3092,3097,3100,
        3103,3108,3112,3120,3125,3136,3139,3141,3143,3155,3159,3166,3171,
        3174,3181,3184,3191,3194,3196,3203,3208,3211,3218,3221,3228,3231,
        3233,3243,3247,3251,3255,3259,3263,3267,3271,3275,3279,3286,3289,
        3293,3296,3299,3303,3307,3311,3315,3319,3323,3327,3334,3337,3341,
        3345,3349,3353,3357,3361,3365,3369,3374,3381,3384,3389,3391,3398,
        3402,3404,3412,3416,3420,3424,3428,3435,3439,3442,3446,3450,3453,
        3455,3459,3466,3471,3478,3480,3485,3491,3494,3496,3500,3505,3512,
        3514,3519,3526,3528,3535,3543,3549,3553,3560,3564,3567,3572,3576,
        3580,3584,3588,3592,3595,3599,3603,3607,3610,3614,3618,3621,3628,
        3632,3635,3639,3641,3645,3654,3662,3677,3699,3706,3715,3722,3725,
        3734,3746,3750,3758,3764,3772,3789,3803,3822,3827,3833,3859,3862,
        3864,3873,3882,3906,3915,3936,3943,3952,3966,3970,3974,3978,3993,
        4009,4013,4017,4024,4027,4035,4038,4057,4064,4078,4082,4095,4105,
        4110,4129,4155,4169,4186,4190,4199,4205,4211,4220,4234,4242,4244,
        4260,4265,4277,4376,4379,4382,4403,4409,4412,4418,4421,4426,4429,
        4435,4438,4444,4447,4451,4455,4459,4468,4480,4489,4501,4513,4535,
        4545,4550,4568,4572,4580,4587
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!GQLParser.__ATN) {
            GQLParser.__ATN = new antlr.ATNDeserializer().deserialize(GQLParser._serializedATN);
        }

        return GQLParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(GQLParser.literalNames, GQLParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return GQLParser.vocabulary;
    }

    private static readonly decisionsToDFA = GQLParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class GqlProgramContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public programActivity(): ProgramActivityContext | null {
        return this.getRuleContext(0, ProgramActivityContext);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(GQLParser.EOF, 0)!;
    }
    public sessionCloseCommand(): SessionCloseCommandContext | null {
        return this.getRuleContext(0, SessionCloseCommandContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_gqlProgram;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGqlProgram) {
             listener.enterGqlProgram(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGqlProgram) {
             listener.exitGqlProgram(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGqlProgram) {
            return visitor.visitGqlProgram(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProgramActivityContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sessionActivity(): SessionActivityContext | null {
        return this.getRuleContext(0, SessionActivityContext);
    }
    public transactionActivity(): TransactionActivityContext | null {
        return this.getRuleContext(0, TransactionActivityContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_programActivity;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterProgramActivity) {
             listener.enterProgramActivity(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitProgramActivity) {
             listener.exitProgramActivity(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitProgramActivity) {
            return visitor.visitProgramActivity(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SessionActivityContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sessionResetCommand(): SessionResetCommandContext[];
    public sessionResetCommand(i: number): SessionResetCommandContext | null;
    public sessionResetCommand(i?: number): SessionResetCommandContext[] | SessionResetCommandContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SessionResetCommandContext);
        }

        return this.getRuleContext(i, SessionResetCommandContext);
    }
    public sessionSetCommand(): SessionSetCommandContext[];
    public sessionSetCommand(i: number): SessionSetCommandContext | null;
    public sessionSetCommand(i?: number): SessionSetCommandContext[] | SessionSetCommandContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SessionSetCommandContext);
        }

        return this.getRuleContext(i, SessionSetCommandContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_sessionActivity;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSessionActivity) {
             listener.enterSessionActivity(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSessionActivity) {
             listener.exitSessionActivity(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSessionActivity) {
            return visitor.visitSessionActivity(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionActivityContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public startTransactionCommand(): StartTransactionCommandContext | null {
        return this.getRuleContext(0, StartTransactionCommandContext);
    }
    public procedureSpecification(): ProcedureSpecificationContext | null {
        return this.getRuleContext(0, ProcedureSpecificationContext);
    }
    public endTransactionCommand(): EndTransactionCommandContext | null {
        return this.getRuleContext(0, EndTransactionCommandContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_transactionActivity;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTransactionActivity) {
             listener.enterTransactionActivity(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTransactionActivity) {
             listener.exitTransactionActivity(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTransactionActivity) {
            return visitor.visitTransactionActivity(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EndTransactionCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rollbackCommand(): RollbackCommandContext | null {
        return this.getRuleContext(0, RollbackCommandContext);
    }
    public commitCommand(): CommitCommandContext | null {
        return this.getRuleContext(0, CommitCommandContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_endTransactionCommand;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEndTransactionCommand) {
             listener.enterEndTransactionCommand(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEndTransactionCommand) {
             listener.exitEndTransactionCommand(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEndTransactionCommand) {
            return visitor.visitEndTransactionCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SessionSetCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SESSION(): antlr.TerminalNode {
        return this.getToken(GQLParser.SESSION, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(GQLParser.SET, 0)!;
    }
    public sessionSetSchemaClause(): SessionSetSchemaClauseContext | null {
        return this.getRuleContext(0, SessionSetSchemaClauseContext);
    }
    public sessionSetGraphClause(): SessionSetGraphClauseContext | null {
        return this.getRuleContext(0, SessionSetGraphClauseContext);
    }
    public sessionSetTimeZoneClause(): SessionSetTimeZoneClauseContext | null {
        return this.getRuleContext(0, SessionSetTimeZoneClauseContext);
    }
    public sessionSetParameterClause(): SessionSetParameterClauseContext | null {
        return this.getRuleContext(0, SessionSetParameterClauseContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_sessionSetCommand;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSessionSetCommand) {
             listener.enterSessionSetCommand(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSessionSetCommand) {
             listener.exitSessionSetCommand(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSessionSetCommand) {
            return visitor.visitSessionSetCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SessionSetSchemaClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SCHEMA(): antlr.TerminalNode {
        return this.getToken(GQLParser.SCHEMA, 0)!;
    }
    public schemaReference(): SchemaReferenceContext {
        return this.getRuleContext(0, SchemaReferenceContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_sessionSetSchemaClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSessionSetSchemaClause) {
             listener.enterSessionSetSchemaClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSessionSetSchemaClause) {
             listener.exitSessionSetSchemaClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSessionSetSchemaClause) {
            return visitor.visitSessionSetSchemaClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SessionSetGraphClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRAPH(): antlr.TerminalNode {
        return this.getToken(GQLParser.GRAPH, 0)!;
    }
    public graphExpression(): GraphExpressionContext {
        return this.getRuleContext(0, GraphExpressionContext)!;
    }
    public PROPERTY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PROPERTY, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_sessionSetGraphClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSessionSetGraphClause) {
             listener.enterSessionSetGraphClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSessionSetGraphClause) {
             listener.exitSessionSetGraphClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSessionSetGraphClause) {
            return visitor.visitSessionSetGraphClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SessionSetTimeZoneClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TIME(): antlr.TerminalNode {
        return this.getToken(GQLParser.TIME, 0)!;
    }
    public ZONE(): antlr.TerminalNode {
        return this.getToken(GQLParser.ZONE, 0)!;
    }
    public setTimeZoneValue(): SetTimeZoneValueContext {
        return this.getRuleContext(0, SetTimeZoneValueContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_sessionSetTimeZoneClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSessionSetTimeZoneClause) {
             listener.enterSessionSetTimeZoneClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSessionSetTimeZoneClause) {
             listener.exitSessionSetTimeZoneClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSessionSetTimeZoneClause) {
            return visitor.visitSessionSetTimeZoneClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetTimeZoneValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public timeZoneString(): TimeZoneStringContext {
        return this.getRuleContext(0, TimeZoneStringContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_setTimeZoneValue;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSetTimeZoneValue) {
             listener.enterSetTimeZoneValue(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSetTimeZoneValue) {
             listener.exitSetTimeZoneValue(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSetTimeZoneValue) {
            return visitor.visitSetTimeZoneValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SessionSetParameterClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sessionSetGraphParameterClause(): SessionSetGraphParameterClauseContext | null {
        return this.getRuleContext(0, SessionSetGraphParameterClauseContext);
    }
    public sessionSetBindingTableParameterClause(): SessionSetBindingTableParameterClauseContext | null {
        return this.getRuleContext(0, SessionSetBindingTableParameterClauseContext);
    }
    public sessionSetValueParameterClause(): SessionSetValueParameterClauseContext | null {
        return this.getRuleContext(0, SessionSetValueParameterClauseContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_sessionSetParameterClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSessionSetParameterClause) {
             listener.enterSessionSetParameterClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSessionSetParameterClause) {
             listener.exitSessionSetParameterClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSessionSetParameterClause) {
            return visitor.visitSessionSetParameterClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SessionSetGraphParameterClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRAPH(): antlr.TerminalNode {
        return this.getToken(GQLParser.GRAPH, 0)!;
    }
    public sessionSetParameterName(): SessionSetParameterNameContext {
        return this.getRuleContext(0, SessionSetParameterNameContext)!;
    }
    public optTypedGraphInitializer(): OptTypedGraphInitializerContext {
        return this.getRuleContext(0, OptTypedGraphInitializerContext)!;
    }
    public PROPERTY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PROPERTY, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_sessionSetGraphParameterClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSessionSetGraphParameterClause) {
             listener.enterSessionSetGraphParameterClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSessionSetGraphParameterClause) {
             listener.exitSessionSetGraphParameterClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSessionSetGraphParameterClause) {
            return visitor.visitSessionSetGraphParameterClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SessionSetBindingTableParameterClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(GQLParser.TABLE, 0)!;
    }
    public sessionSetParameterName(): SessionSetParameterNameContext {
        return this.getRuleContext(0, SessionSetParameterNameContext)!;
    }
    public optTypedBindingTableInitializer(): OptTypedBindingTableInitializerContext {
        return this.getRuleContext(0, OptTypedBindingTableInitializerContext)!;
    }
    public BINDING(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.BINDING, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_sessionSetBindingTableParameterClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSessionSetBindingTableParameterClause) {
             listener.enterSessionSetBindingTableParameterClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSessionSetBindingTableParameterClause) {
             listener.exitSessionSetBindingTableParameterClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSessionSetBindingTableParameterClause) {
            return visitor.visitSessionSetBindingTableParameterClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SessionSetValueParameterClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALUE(): antlr.TerminalNode {
        return this.getToken(GQLParser.VALUE, 0)!;
    }
    public sessionSetParameterName(): SessionSetParameterNameContext {
        return this.getRuleContext(0, SessionSetParameterNameContext)!;
    }
    public optTypedValueInitializer(): OptTypedValueInitializerContext {
        return this.getRuleContext(0, OptTypedValueInitializerContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_sessionSetValueParameterClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSessionSetValueParameterClause) {
             listener.enterSessionSetValueParameterClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSessionSetValueParameterClause) {
             listener.exitSessionSetValueParameterClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSessionSetValueParameterClause) {
            return visitor.visitSessionSetValueParameterClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SessionSetParameterNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sessionParameterSpecification(): SessionParameterSpecificationContext {
        return this.getRuleContext(0, SessionParameterSpecificationContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_sessionSetParameterName;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSessionSetParameterName) {
             listener.enterSessionSetParameterName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSessionSetParameterName) {
             listener.exitSessionSetParameterName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSessionSetParameterName) {
            return visitor.visitSessionSetParameterName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SessionResetCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SESSION(): antlr.TerminalNode {
        return this.getToken(GQLParser.SESSION, 0)!;
    }
    public RESET(): antlr.TerminalNode {
        return this.getToken(GQLParser.RESET, 0)!;
    }
    public sessionResetArguments(): SessionResetArgumentsContext | null {
        return this.getRuleContext(0, SessionResetArgumentsContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_sessionResetCommand;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSessionResetCommand) {
             listener.enterSessionResetCommand(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSessionResetCommand) {
             listener.exitSessionResetCommand(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSessionResetCommand) {
            return visitor.visitSessionResetCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SessionResetArgumentsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARAMETERS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PARAMETERS, 0);
    }
    public CHARACTERISTICS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.CHARACTERISTICS, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ALL, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.SCHEMA, 0);
    }
    public GRAPH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.GRAPH, 0);
    }
    public PROPERTY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PROPERTY, 0);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TIME, 0);
    }
    public ZONE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ZONE, 0);
    }
    public sessionParameterSpecification(): SessionParameterSpecificationContext | null {
        return this.getRuleContext(0, SessionParameterSpecificationContext);
    }
    public PARAMETER(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PARAMETER, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_sessionResetArguments;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSessionResetArguments) {
             listener.enterSessionResetArguments(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSessionResetArguments) {
             listener.exitSessionResetArguments(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSessionResetArguments) {
            return visitor.visitSessionResetArguments(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SessionCloseCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SESSION(): antlr.TerminalNode {
        return this.getToken(GQLParser.SESSION, 0)!;
    }
    public CLOSE(): antlr.TerminalNode {
        return this.getToken(GQLParser.CLOSE, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_sessionCloseCommand;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSessionCloseCommand) {
             listener.enterSessionCloseCommand(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSessionCloseCommand) {
             listener.exitSessionCloseCommand(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSessionCloseCommand) {
            return visitor.visitSessionCloseCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SessionParameterSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GENERAL_PARAMETER_REFERENCE(): antlr.TerminalNode {
        return this.getToken(GQLParser.GENERAL_PARAMETER_REFERENCE, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_sessionParameterSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSessionParameterSpecification) {
             listener.enterSessionParameterSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSessionParameterSpecification) {
             listener.exitSessionParameterSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSessionParameterSpecification) {
            return visitor.visitSessionParameterSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StartTransactionCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public START(): antlr.TerminalNode {
        return this.getToken(GQLParser.START, 0)!;
    }
    public TRANSACTION(): antlr.TerminalNode {
        return this.getToken(GQLParser.TRANSACTION, 0)!;
    }
    public transactionCharacteristics(): TransactionCharacteristicsContext | null {
        return this.getRuleContext(0, TransactionCharacteristicsContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_startTransactionCommand;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterStartTransactionCommand) {
             listener.enterStartTransactionCommand(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitStartTransactionCommand) {
             listener.exitStartTransactionCommand(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitStartTransactionCommand) {
            return visitor.visitStartTransactionCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionCharacteristicsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transactionMode(): TransactionModeContext[];
    public transactionMode(i: number): TransactionModeContext | null;
    public transactionMode(i?: number): TransactionModeContext[] | TransactionModeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TransactionModeContext);
        }

        return this.getRuleContext(i, TransactionModeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_transactionCharacteristics;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTransactionCharacteristics) {
             listener.enterTransactionCharacteristics(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTransactionCharacteristics) {
             listener.exitTransactionCharacteristics(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTransactionCharacteristics) {
            return visitor.visitTransactionCharacteristics(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transactionAccessMode(): TransactionAccessModeContext {
        return this.getRuleContext(0, TransactionAccessModeContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_transactionMode;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTransactionMode) {
             listener.enterTransactionMode(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTransactionMode) {
             listener.exitTransactionMode(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTransactionMode) {
            return visitor.visitTransactionMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionAccessModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public READ(): antlr.TerminalNode {
        return this.getToken(GQLParser.READ, 0)!;
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ONLY, 0);
    }
    public WRITE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.WRITE, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_transactionAccessMode;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTransactionAccessMode) {
             listener.enterTransactionAccessMode(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTransactionAccessMode) {
             listener.exitTransactionAccessMode(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTransactionAccessMode) {
            return visitor.visitTransactionAccessMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RollbackCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROLLBACK(): antlr.TerminalNode {
        return this.getToken(GQLParser.ROLLBACK, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_rollbackCommand;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterRollbackCommand) {
             listener.enterRollbackCommand(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitRollbackCommand) {
             listener.exitRollbackCommand(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitRollbackCommand) {
            return visitor.visitRollbackCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommitCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMIT(): antlr.TerminalNode {
        return this.getToken(GQLParser.COMMIT, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_commitCommand;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCommitCommand) {
             listener.enterCommitCommand(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCommitCommand) {
             listener.exitCommitCommand(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCommitCommand) {
            return visitor.visitCommitCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NestedProcedureSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_BRACE(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_BRACE, 0)!;
    }
    public procedureSpecification(): ProcedureSpecificationContext {
        return this.getRuleContext(0, ProcedureSpecificationContext)!;
    }
    public RIGHT_BRACE(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_BRACE, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nestedProcedureSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNestedProcedureSpecification) {
             listener.enterNestedProcedureSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNestedProcedureSpecification) {
             listener.exitNestedProcedureSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNestedProcedureSpecification) {
            return visitor.visitNestedProcedureSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcedureSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public procedureBody(): ProcedureBodyContext {
        return this.getRuleContext(0, ProcedureBodyContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_procedureSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterProcedureSpecification) {
             listener.enterProcedureSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitProcedureSpecification) {
             listener.exitProcedureSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitProcedureSpecification) {
            return visitor.visitProcedureSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NestedDataModifyingProcedureSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_BRACE(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_BRACE, 0)!;
    }
    public procedureBody(): ProcedureBodyContext {
        return this.getRuleContext(0, ProcedureBodyContext)!;
    }
    public RIGHT_BRACE(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_BRACE, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nestedDataModifyingProcedureSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNestedDataModifyingProcedureSpecification) {
             listener.enterNestedDataModifyingProcedureSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNestedDataModifyingProcedureSpecification) {
             listener.exitNestedDataModifyingProcedureSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNestedDataModifyingProcedureSpecification) {
            return visitor.visitNestedDataModifyingProcedureSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NestedQuerySpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_BRACE(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_BRACE, 0)!;
    }
    public procedureBody(): ProcedureBodyContext {
        return this.getRuleContext(0, ProcedureBodyContext)!;
    }
    public RIGHT_BRACE(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_BRACE, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nestedQuerySpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNestedQuerySpecification) {
             listener.enterNestedQuerySpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNestedQuerySpecification) {
             listener.exitNestedQuerySpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNestedQuerySpecification) {
            return visitor.visitNestedQuerySpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcedureBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public statementBlock(): StatementBlockContext {
        return this.getRuleContext(0, StatementBlockContext)!;
    }
    public atSchemaClause(): AtSchemaClauseContext | null {
        return this.getRuleContext(0, AtSchemaClauseContext);
    }
    public bindingVariableDefinitionBlock(): BindingVariableDefinitionBlockContext | null {
        return this.getRuleContext(0, BindingVariableDefinitionBlockContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_procedureBody;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterProcedureBody) {
             listener.enterProcedureBody(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitProcedureBody) {
             listener.exitProcedureBody(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitProcedureBody) {
            return visitor.visitProcedureBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BindingVariableDefinitionBlockContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bindingVariableDefinition(): BindingVariableDefinitionContext[];
    public bindingVariableDefinition(i: number): BindingVariableDefinitionContext | null;
    public bindingVariableDefinition(i?: number): BindingVariableDefinitionContext[] | BindingVariableDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BindingVariableDefinitionContext);
        }

        return this.getRuleContext(i, BindingVariableDefinitionContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_bindingVariableDefinitionBlock;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterBindingVariableDefinitionBlock) {
             listener.enterBindingVariableDefinitionBlock(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitBindingVariableDefinitionBlock) {
             listener.exitBindingVariableDefinitionBlock(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitBindingVariableDefinitionBlock) {
            return visitor.visitBindingVariableDefinitionBlock(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BindingVariableDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public graphVariableDefinition(): GraphVariableDefinitionContext | null {
        return this.getRuleContext(0, GraphVariableDefinitionContext);
    }
    public bindingTableVariableDefinition(): BindingTableVariableDefinitionContext | null {
        return this.getRuleContext(0, BindingTableVariableDefinitionContext);
    }
    public valueVariableDefinition(): ValueVariableDefinitionContext | null {
        return this.getRuleContext(0, ValueVariableDefinitionContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_bindingVariableDefinition;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterBindingVariableDefinition) {
             listener.enterBindingVariableDefinition(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitBindingVariableDefinition) {
             listener.exitBindingVariableDefinition(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitBindingVariableDefinition) {
            return visitor.visitBindingVariableDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementBlockContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public nextStatement(): NextStatementContext[];
    public nextStatement(i: number): NextStatementContext | null;
    public nextStatement(i?: number): NextStatementContext[] | NextStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NextStatementContext);
        }

        return this.getRuleContext(i, NextStatementContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_statementBlock;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterStatementBlock) {
             listener.enterStatementBlock(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitStatementBlock) {
             listener.exitStatementBlock(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitStatementBlock) {
            return visitor.visitStatementBlock(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public linearCatalogModifyingStatement(): LinearCatalogModifyingStatementContext | null {
        return this.getRuleContext(0, LinearCatalogModifyingStatementContext);
    }
    public linearDataModifyingStatement(): LinearDataModifyingStatementContext | null {
        return this.getRuleContext(0, LinearDataModifyingStatementContext);
    }
    public compositeQueryStatement(): CompositeQueryStatementContext | null {
        return this.getRuleContext(0, CompositeQueryStatementContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_statement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterStatement) {
             listener.enterStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitStatement) {
             listener.exitStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitStatement) {
            return visitor.visitStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NextStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NEXT(): antlr.TerminalNode {
        return this.getToken(GQLParser.NEXT, 0)!;
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public yieldClause(): YieldClauseContext | null {
        return this.getRuleContext(0, YieldClauseContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nextStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNextStatement) {
             listener.enterNextStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNextStatement) {
             listener.exitNextStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNextStatement) {
            return visitor.visitNextStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GraphVariableDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRAPH(): antlr.TerminalNode {
        return this.getToken(GQLParser.GRAPH, 0)!;
    }
    public bindingVariable(): BindingVariableContext {
        return this.getRuleContext(0, BindingVariableContext)!;
    }
    public optTypedGraphInitializer(): OptTypedGraphInitializerContext {
        return this.getRuleContext(0, OptTypedGraphInitializerContext)!;
    }
    public PROPERTY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PROPERTY, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_graphVariableDefinition;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGraphVariableDefinition) {
             listener.enterGraphVariableDefinition(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGraphVariableDefinition) {
             listener.exitGraphVariableDefinition(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGraphVariableDefinition) {
            return visitor.visitGraphVariableDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptTypedGraphInitializerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public graphInitializer(): GraphInitializerContext {
        return this.getRuleContext(0, GraphInitializerContext)!;
    }
    public graphReferenceValueType(): GraphReferenceValueTypeContext | null {
        return this.getRuleContext(0, GraphReferenceValueTypeContext);
    }
    public typed(): TypedContext | null {
        return this.getRuleContext(0, TypedContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_optTypedGraphInitializer;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterOptTypedGraphInitializer) {
             listener.enterOptTypedGraphInitializer(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitOptTypedGraphInitializer) {
             listener.exitOptTypedGraphInitializer(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitOptTypedGraphInitializer) {
            return visitor.visitOptTypedGraphInitializer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GraphInitializerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUALS_OPERATOR(): antlr.TerminalNode {
        return this.getToken(GQLParser.EQUALS_OPERATOR, 0)!;
    }
    public graphExpression(): GraphExpressionContext {
        return this.getRuleContext(0, GraphExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_graphInitializer;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGraphInitializer) {
             listener.enterGraphInitializer(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGraphInitializer) {
             listener.exitGraphInitializer(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGraphInitializer) {
            return visitor.visitGraphInitializer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BindingTableVariableDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(GQLParser.TABLE, 0)!;
    }
    public bindingVariable(): BindingVariableContext {
        return this.getRuleContext(0, BindingVariableContext)!;
    }
    public optTypedBindingTableInitializer(): OptTypedBindingTableInitializerContext {
        return this.getRuleContext(0, OptTypedBindingTableInitializerContext)!;
    }
    public BINDING(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.BINDING, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_bindingTableVariableDefinition;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterBindingTableVariableDefinition) {
             listener.enterBindingTableVariableDefinition(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitBindingTableVariableDefinition) {
             listener.exitBindingTableVariableDefinition(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitBindingTableVariableDefinition) {
            return visitor.visitBindingTableVariableDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptTypedBindingTableInitializerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bindingTableInitializer(): BindingTableInitializerContext {
        return this.getRuleContext(0, BindingTableInitializerContext)!;
    }
    public bindingTableReferenceValueType(): BindingTableReferenceValueTypeContext | null {
        return this.getRuleContext(0, BindingTableReferenceValueTypeContext);
    }
    public typed(): TypedContext | null {
        return this.getRuleContext(0, TypedContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_optTypedBindingTableInitializer;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterOptTypedBindingTableInitializer) {
             listener.enterOptTypedBindingTableInitializer(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitOptTypedBindingTableInitializer) {
             listener.exitOptTypedBindingTableInitializer(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitOptTypedBindingTableInitializer) {
            return visitor.visitOptTypedBindingTableInitializer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BindingTableInitializerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUALS_OPERATOR(): antlr.TerminalNode {
        return this.getToken(GQLParser.EQUALS_OPERATOR, 0)!;
    }
    public bindingTableExpression(): BindingTableExpressionContext {
        return this.getRuleContext(0, BindingTableExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_bindingTableInitializer;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterBindingTableInitializer) {
             listener.enterBindingTableInitializer(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitBindingTableInitializer) {
             listener.exitBindingTableInitializer(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitBindingTableInitializer) {
            return visitor.visitBindingTableInitializer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueVariableDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALUE(): antlr.TerminalNode {
        return this.getToken(GQLParser.VALUE, 0)!;
    }
    public bindingVariable(): BindingVariableContext {
        return this.getRuleContext(0, BindingVariableContext)!;
    }
    public optTypedValueInitializer(): OptTypedValueInitializerContext {
        return this.getRuleContext(0, OptTypedValueInitializerContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_valueVariableDefinition;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterValueVariableDefinition) {
             listener.enterValueVariableDefinition(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitValueVariableDefinition) {
             listener.exitValueVariableDefinition(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitValueVariableDefinition) {
            return visitor.visitValueVariableDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptTypedValueInitializerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueInitializer(): ValueInitializerContext {
        return this.getRuleContext(0, ValueInitializerContext)!;
    }
    public valueType(): ValueTypeContext | null {
        return this.getRuleContext(0, ValueTypeContext);
    }
    public typed(): TypedContext | null {
        return this.getRuleContext(0, TypedContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_optTypedValueInitializer;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterOptTypedValueInitializer) {
             listener.enterOptTypedValueInitializer(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitOptTypedValueInitializer) {
             listener.exitOptTypedValueInitializer(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitOptTypedValueInitializer) {
            return visitor.visitOptTypedValueInitializer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueInitializerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUALS_OPERATOR(): antlr.TerminalNode {
        return this.getToken(GQLParser.EQUALS_OPERATOR, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_valueInitializer;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterValueInitializer) {
             listener.enterValueInitializer(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitValueInitializer) {
             listener.exitValueInitializer(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitValueInitializer) {
            return visitor.visitValueInitializer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GraphExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public graphReference(): GraphReferenceContext | null {
        return this.getRuleContext(0, GraphReferenceContext);
    }
    public objectExpressionPrimary(): ObjectExpressionPrimaryContext | null {
        return this.getRuleContext(0, ObjectExpressionPrimaryContext);
    }
    public objectNameOrBindingVariable(): ObjectNameOrBindingVariableContext | null {
        return this.getRuleContext(0, ObjectNameOrBindingVariableContext);
    }
    public currentGraph(): CurrentGraphContext | null {
        return this.getRuleContext(0, CurrentGraphContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_graphExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGraphExpression) {
             listener.enterGraphExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGraphExpression) {
             listener.exitGraphExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGraphExpression) {
            return visitor.visitGraphExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CurrentGraphContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CURRENT_PROPERTY_GRAPH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.CURRENT_PROPERTY_GRAPH, 0);
    }
    public CURRENT_GRAPH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.CURRENT_GRAPH, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_currentGraph;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCurrentGraph) {
             listener.enterCurrentGraph(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCurrentGraph) {
             listener.exitCurrentGraph(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCurrentGraph) {
            return visitor.visitCurrentGraph(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BindingTableExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nestedBindingTableQuerySpecification(): NestedBindingTableQuerySpecificationContext | null {
        return this.getRuleContext(0, NestedBindingTableQuerySpecificationContext);
    }
    public bindingTableReference(): BindingTableReferenceContext | null {
        return this.getRuleContext(0, BindingTableReferenceContext);
    }
    public objectExpressionPrimary(): ObjectExpressionPrimaryContext | null {
        return this.getRuleContext(0, ObjectExpressionPrimaryContext);
    }
    public objectNameOrBindingVariable(): ObjectNameOrBindingVariableContext | null {
        return this.getRuleContext(0, ObjectNameOrBindingVariableContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_bindingTableExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterBindingTableExpression) {
             listener.enterBindingTableExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitBindingTableExpression) {
             listener.exitBindingTableExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitBindingTableExpression) {
            return visitor.visitBindingTableExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NestedBindingTableQuerySpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nestedQuerySpecification(): NestedQuerySpecificationContext {
        return this.getRuleContext(0, NestedQuerySpecificationContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nestedBindingTableQuerySpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNestedBindingTableQuerySpecification) {
             listener.enterNestedBindingTableQuerySpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNestedBindingTableQuerySpecification) {
             listener.exitNestedBindingTableQuerySpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNestedBindingTableQuerySpecification) {
            return visitor.visitNestedBindingTableQuerySpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ObjectExpressionPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.VARIABLE, 0);
    }
    public valueExpressionPrimary(): ValueExpressionPrimaryContext | null {
        return this.getRuleContext(0, ValueExpressionPrimaryContext);
    }
    public parenthesizedValueExpression(): ParenthesizedValueExpressionContext | null {
        return this.getRuleContext(0, ParenthesizedValueExpressionContext);
    }
    public nonParenthesizedValueExpressionPrimarySpecialCase(): NonParenthesizedValueExpressionPrimarySpecialCaseContext | null {
        return this.getRuleContext(0, NonParenthesizedValueExpressionPrimarySpecialCaseContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_objectExpressionPrimary;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterObjectExpressionPrimary) {
             listener.enterObjectExpressionPrimary(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitObjectExpressionPrimary) {
             listener.exitObjectExpressionPrimary(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitObjectExpressionPrimary) {
            return visitor.visitObjectExpressionPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LinearCatalogModifyingStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleCatalogModifyingStatement(): SimpleCatalogModifyingStatementContext[];
    public simpleCatalogModifyingStatement(i: number): SimpleCatalogModifyingStatementContext | null;
    public simpleCatalogModifyingStatement(i?: number): SimpleCatalogModifyingStatementContext[] | SimpleCatalogModifyingStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SimpleCatalogModifyingStatementContext);
        }

        return this.getRuleContext(i, SimpleCatalogModifyingStatementContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_linearCatalogModifyingStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLinearCatalogModifyingStatement) {
             listener.enterLinearCatalogModifyingStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLinearCatalogModifyingStatement) {
             listener.exitLinearCatalogModifyingStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLinearCatalogModifyingStatement) {
            return visitor.visitLinearCatalogModifyingStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleCatalogModifyingStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public primitiveCatalogModifyingStatement(): PrimitiveCatalogModifyingStatementContext | null {
        return this.getRuleContext(0, PrimitiveCatalogModifyingStatementContext);
    }
    public callCatalogModifyingProcedureStatement(): CallCatalogModifyingProcedureStatementContext | null {
        return this.getRuleContext(0, CallCatalogModifyingProcedureStatementContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simpleCatalogModifyingStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimpleCatalogModifyingStatement) {
             listener.enterSimpleCatalogModifyingStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimpleCatalogModifyingStatement) {
             listener.exitSimpleCatalogModifyingStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimpleCatalogModifyingStatement) {
            return visitor.visitSimpleCatalogModifyingStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimitiveCatalogModifyingStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createSchemaStatement(): CreateSchemaStatementContext | null {
        return this.getRuleContext(0, CreateSchemaStatementContext);
    }
    public dropSchemaStatement(): DropSchemaStatementContext | null {
        return this.getRuleContext(0, DropSchemaStatementContext);
    }
    public createGraphStatement(): CreateGraphStatementContext | null {
        return this.getRuleContext(0, CreateGraphStatementContext);
    }
    public dropGraphStatement(): DropGraphStatementContext | null {
        return this.getRuleContext(0, DropGraphStatementContext);
    }
    public createGraphTypeStatement(): CreateGraphTypeStatementContext | null {
        return this.getRuleContext(0, CreateGraphTypeStatementContext);
    }
    public dropGraphTypeStatement(): DropGraphTypeStatementContext | null {
        return this.getRuleContext(0, DropGraphTypeStatementContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_primitiveCatalogModifyingStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPrimitiveCatalogModifyingStatement) {
             listener.enterPrimitiveCatalogModifyingStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPrimitiveCatalogModifyingStatement) {
             listener.exitPrimitiveCatalogModifyingStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPrimitiveCatalogModifyingStatement) {
            return visitor.visitPrimitiveCatalogModifyingStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateSchemaStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(GQLParser.CREATE, 0)!;
    }
    public SCHEMA(): antlr.TerminalNode {
        return this.getToken(GQLParser.SCHEMA, 0)!;
    }
    public catalogSchemaParentAndName(): CatalogSchemaParentAndNameContext {
        return this.getRuleContext(0, CatalogSchemaParentAndNameContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_createSchemaStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCreateSchemaStatement) {
             listener.enterCreateSchemaStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCreateSchemaStatement) {
             listener.exitCreateSchemaStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCreateSchemaStatement) {
            return visitor.visitCreateSchemaStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropSchemaStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(GQLParser.DROP, 0)!;
    }
    public SCHEMA(): antlr.TerminalNode {
        return this.getToken(GQLParser.SCHEMA, 0)!;
    }
    public catalogSchemaParentAndName(): CatalogSchemaParentAndNameContext {
        return this.getRuleContext(0, CatalogSchemaParentAndNameContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_dropSchemaStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDropSchemaStatement) {
             listener.enterDropSchemaStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDropSchemaStatement) {
             listener.exitDropSchemaStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDropSchemaStatement) {
            return visitor.visitDropSchemaStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateGraphStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(GQLParser.CREATE, 0)!;
    }
    public catalogGraphParentAndName(): CatalogGraphParentAndNameContext {
        return this.getRuleContext(0, CatalogGraphParentAndNameContext)!;
    }
    public GRAPH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.GRAPH, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.REPLACE, 0);
    }
    public openGraphType(): OpenGraphTypeContext | null {
        return this.getRuleContext(0, OpenGraphTypeContext);
    }
    public ofGraphType(): OfGraphTypeContext | null {
        return this.getRuleContext(0, OfGraphTypeContext);
    }
    public graphSource(): GraphSourceContext | null {
        return this.getRuleContext(0, GraphSourceContext);
    }
    public PROPERTY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PROPERTY, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_createGraphStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCreateGraphStatement) {
             listener.enterCreateGraphStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCreateGraphStatement) {
             listener.exitCreateGraphStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCreateGraphStatement) {
            return visitor.visitCreateGraphStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OpenGraphTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ANY(): antlr.TerminalNode {
        return this.getToken(GQLParser.ANY, 0)!;
    }
    public typed(): TypedContext | null {
        return this.getRuleContext(0, TypedContext);
    }
    public GRAPH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.GRAPH, 0);
    }
    public PROPERTY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PROPERTY, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_openGraphType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterOpenGraphType) {
             listener.enterOpenGraphType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitOpenGraphType) {
             listener.exitOpenGraphType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitOpenGraphType) {
            return visitor.visitOpenGraphType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OfGraphTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public graphTypeLikeGraph(): GraphTypeLikeGraphContext | null {
        return this.getRuleContext(0, GraphTypeLikeGraphContext);
    }
    public graphTypeReference(): GraphTypeReferenceContext | null {
        return this.getRuleContext(0, GraphTypeReferenceContext);
    }
    public typed(): TypedContext | null {
        return this.getRuleContext(0, TypedContext);
    }
    public nestedGraphTypeSpecification(): NestedGraphTypeSpecificationContext | null {
        return this.getRuleContext(0, NestedGraphTypeSpecificationContext);
    }
    public GRAPH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.GRAPH, 0);
    }
    public PROPERTY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PROPERTY, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_ofGraphType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterOfGraphType) {
             listener.enterOfGraphType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitOfGraphType) {
             listener.exitOfGraphType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitOfGraphType) {
            return visitor.visitOfGraphType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GraphTypeLikeGraphContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIKE(): antlr.TerminalNode {
        return this.getToken(GQLParser.LIKE, 0)!;
    }
    public graphExpression(): GraphExpressionContext {
        return this.getRuleContext(0, GraphExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_graphTypeLikeGraph;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGraphTypeLikeGraph) {
             listener.enterGraphTypeLikeGraph(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGraphTypeLikeGraph) {
             listener.exitGraphTypeLikeGraph(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGraphTypeLikeGraph) {
            return visitor.visitGraphTypeLikeGraph(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GraphSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(GQLParser.AS, 0)!;
    }
    public COPY(): antlr.TerminalNode {
        return this.getToken(GQLParser.COPY, 0)!;
    }
    public OF(): antlr.TerminalNode {
        return this.getToken(GQLParser.OF, 0)!;
    }
    public graphExpression(): GraphExpressionContext {
        return this.getRuleContext(0, GraphExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_graphSource;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGraphSource) {
             listener.enterGraphSource(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGraphSource) {
             listener.exitGraphSource(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGraphSource) {
            return visitor.visitGraphSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropGraphStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(GQLParser.DROP, 0)!;
    }
    public GRAPH(): antlr.TerminalNode {
        return this.getToken(GQLParser.GRAPH, 0)!;
    }
    public catalogGraphParentAndName(): CatalogGraphParentAndNameContext {
        return this.getRuleContext(0, CatalogGraphParentAndNameContext)!;
    }
    public PROPERTY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PROPERTY, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_dropGraphStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDropGraphStatement) {
             listener.enterDropGraphStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDropGraphStatement) {
             listener.exitDropGraphStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDropGraphStatement) {
            return visitor.visitDropGraphStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateGraphTypeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(GQLParser.CREATE, 0)!;
    }
    public catalogGraphTypeParentAndName(): CatalogGraphTypeParentAndNameContext {
        return this.getRuleContext(0, CatalogGraphTypeParentAndNameContext)!;
    }
    public graphTypeSource(): GraphTypeSourceContext {
        return this.getRuleContext(0, GraphTypeSourceContext)!;
    }
    public GRAPH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.GRAPH, 0);
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TYPE, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.REPLACE, 0);
    }
    public PROPERTY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PROPERTY, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_createGraphTypeStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCreateGraphTypeStatement) {
             listener.enterCreateGraphTypeStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCreateGraphTypeStatement) {
             listener.exitCreateGraphTypeStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCreateGraphTypeStatement) {
            return visitor.visitCreateGraphTypeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GraphTypeSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public copyOfGraphType(): CopyOfGraphTypeContext | null {
        return this.getRuleContext(0, CopyOfGraphTypeContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.AS, 0);
    }
    public graphTypeLikeGraph(): GraphTypeLikeGraphContext | null {
        return this.getRuleContext(0, GraphTypeLikeGraphContext);
    }
    public nestedGraphTypeSpecification(): NestedGraphTypeSpecificationContext | null {
        return this.getRuleContext(0, NestedGraphTypeSpecificationContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_graphTypeSource;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGraphTypeSource) {
             listener.enterGraphTypeSource(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGraphTypeSource) {
             listener.exitGraphTypeSource(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGraphTypeSource) {
            return visitor.visitGraphTypeSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CopyOfGraphTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COPY(): antlr.TerminalNode {
        return this.getToken(GQLParser.COPY, 0)!;
    }
    public OF(): antlr.TerminalNode {
        return this.getToken(GQLParser.OF, 0)!;
    }
    public graphTypeReference(): GraphTypeReferenceContext {
        return this.getRuleContext(0, GraphTypeReferenceContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_copyOfGraphType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCopyOfGraphType) {
             listener.enterCopyOfGraphType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCopyOfGraphType) {
             listener.exitCopyOfGraphType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCopyOfGraphType) {
            return visitor.visitCopyOfGraphType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropGraphTypeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(GQLParser.DROP, 0)!;
    }
    public GRAPH(): antlr.TerminalNode {
        return this.getToken(GQLParser.GRAPH, 0)!;
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(GQLParser.TYPE, 0)!;
    }
    public catalogGraphTypeParentAndName(): CatalogGraphTypeParentAndNameContext {
        return this.getRuleContext(0, CatalogGraphTypeParentAndNameContext)!;
    }
    public PROPERTY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PROPERTY, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_dropGraphTypeStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDropGraphTypeStatement) {
             listener.enterDropGraphTypeStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDropGraphTypeStatement) {
             listener.exitDropGraphTypeStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDropGraphTypeStatement) {
            return visitor.visitDropGraphTypeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CallCatalogModifyingProcedureStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public callProcedureStatement(): CallProcedureStatementContext {
        return this.getRuleContext(0, CallProcedureStatementContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_callCatalogModifyingProcedureStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCallCatalogModifyingProcedureStatement) {
             listener.enterCallCatalogModifyingProcedureStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCallCatalogModifyingProcedureStatement) {
             listener.exitCallCatalogModifyingProcedureStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCallCatalogModifyingProcedureStatement) {
            return visitor.visitCallCatalogModifyingProcedureStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LinearDataModifyingStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public focusedLinearDataModifyingStatement(): FocusedLinearDataModifyingStatementContext | null {
        return this.getRuleContext(0, FocusedLinearDataModifyingStatementContext);
    }
    public ambientLinearDataModifyingStatement(): AmbientLinearDataModifyingStatementContext | null {
        return this.getRuleContext(0, AmbientLinearDataModifyingStatementContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_linearDataModifyingStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLinearDataModifyingStatement) {
             listener.enterLinearDataModifyingStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLinearDataModifyingStatement) {
             listener.exitLinearDataModifyingStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLinearDataModifyingStatement) {
            return visitor.visitLinearDataModifyingStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FocusedLinearDataModifyingStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public focusedLinearDataModifyingStatementBody(): FocusedLinearDataModifyingStatementBodyContext | null {
        return this.getRuleContext(0, FocusedLinearDataModifyingStatementBodyContext);
    }
    public focusedNestedDataModifyingProcedureSpecification(): FocusedNestedDataModifyingProcedureSpecificationContext | null {
        return this.getRuleContext(0, FocusedNestedDataModifyingProcedureSpecificationContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_focusedLinearDataModifyingStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFocusedLinearDataModifyingStatement) {
             listener.enterFocusedLinearDataModifyingStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFocusedLinearDataModifyingStatement) {
             listener.exitFocusedLinearDataModifyingStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFocusedLinearDataModifyingStatement) {
            return visitor.visitFocusedLinearDataModifyingStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FocusedLinearDataModifyingStatementBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public useGraphClause(): UseGraphClauseContext {
        return this.getRuleContext(0, UseGraphClauseContext)!;
    }
    public simpleLinearDataAccessingStatement(): SimpleLinearDataAccessingStatementContext {
        return this.getRuleContext(0, SimpleLinearDataAccessingStatementContext)!;
    }
    public primitiveResultStatement(): PrimitiveResultStatementContext | null {
        return this.getRuleContext(0, PrimitiveResultStatementContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_focusedLinearDataModifyingStatementBody;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFocusedLinearDataModifyingStatementBody) {
             listener.enterFocusedLinearDataModifyingStatementBody(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFocusedLinearDataModifyingStatementBody) {
             listener.exitFocusedLinearDataModifyingStatementBody(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFocusedLinearDataModifyingStatementBody) {
            return visitor.visitFocusedLinearDataModifyingStatementBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FocusedNestedDataModifyingProcedureSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public useGraphClause(): UseGraphClauseContext {
        return this.getRuleContext(0, UseGraphClauseContext)!;
    }
    public nestedDataModifyingProcedureSpecification(): NestedDataModifyingProcedureSpecificationContext {
        return this.getRuleContext(0, NestedDataModifyingProcedureSpecificationContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_focusedNestedDataModifyingProcedureSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFocusedNestedDataModifyingProcedureSpecification) {
             listener.enterFocusedNestedDataModifyingProcedureSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFocusedNestedDataModifyingProcedureSpecification) {
             listener.exitFocusedNestedDataModifyingProcedureSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFocusedNestedDataModifyingProcedureSpecification) {
            return visitor.visitFocusedNestedDataModifyingProcedureSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AmbientLinearDataModifyingStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ambientLinearDataModifyingStatementBody(): AmbientLinearDataModifyingStatementBodyContext | null {
        return this.getRuleContext(0, AmbientLinearDataModifyingStatementBodyContext);
    }
    public nestedDataModifyingProcedureSpecification(): NestedDataModifyingProcedureSpecificationContext | null {
        return this.getRuleContext(0, NestedDataModifyingProcedureSpecificationContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_ambientLinearDataModifyingStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterAmbientLinearDataModifyingStatement) {
             listener.enterAmbientLinearDataModifyingStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitAmbientLinearDataModifyingStatement) {
             listener.exitAmbientLinearDataModifyingStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitAmbientLinearDataModifyingStatement) {
            return visitor.visitAmbientLinearDataModifyingStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AmbientLinearDataModifyingStatementBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleLinearDataAccessingStatement(): SimpleLinearDataAccessingStatementContext {
        return this.getRuleContext(0, SimpleLinearDataAccessingStatementContext)!;
    }
    public primitiveResultStatement(): PrimitiveResultStatementContext | null {
        return this.getRuleContext(0, PrimitiveResultStatementContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_ambientLinearDataModifyingStatementBody;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterAmbientLinearDataModifyingStatementBody) {
             listener.enterAmbientLinearDataModifyingStatementBody(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitAmbientLinearDataModifyingStatementBody) {
             listener.exitAmbientLinearDataModifyingStatementBody(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitAmbientLinearDataModifyingStatementBody) {
            return visitor.visitAmbientLinearDataModifyingStatementBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleLinearDataAccessingStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleDataAccessingStatement(): SimpleDataAccessingStatementContext[];
    public simpleDataAccessingStatement(i: number): SimpleDataAccessingStatementContext | null;
    public simpleDataAccessingStatement(i?: number): SimpleDataAccessingStatementContext[] | SimpleDataAccessingStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SimpleDataAccessingStatementContext);
        }

        return this.getRuleContext(i, SimpleDataAccessingStatementContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simpleLinearDataAccessingStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimpleLinearDataAccessingStatement) {
             listener.enterSimpleLinearDataAccessingStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimpleLinearDataAccessingStatement) {
             listener.exitSimpleLinearDataAccessingStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimpleLinearDataAccessingStatement) {
            return visitor.visitSimpleLinearDataAccessingStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleDataAccessingStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleQueryStatement(): SimpleQueryStatementContext | null {
        return this.getRuleContext(0, SimpleQueryStatementContext);
    }
    public simpleDataModifyingStatement(): SimpleDataModifyingStatementContext | null {
        return this.getRuleContext(0, SimpleDataModifyingStatementContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simpleDataAccessingStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimpleDataAccessingStatement) {
             listener.enterSimpleDataAccessingStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimpleDataAccessingStatement) {
             listener.exitSimpleDataAccessingStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimpleDataAccessingStatement) {
            return visitor.visitSimpleDataAccessingStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleDataModifyingStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public primitiveDataModifyingStatement(): PrimitiveDataModifyingStatementContext | null {
        return this.getRuleContext(0, PrimitiveDataModifyingStatementContext);
    }
    public callDataModifyingProcedureStatement(): CallDataModifyingProcedureStatementContext | null {
        return this.getRuleContext(0, CallDataModifyingProcedureStatementContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simpleDataModifyingStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimpleDataModifyingStatement) {
             listener.enterSimpleDataModifyingStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimpleDataModifyingStatement) {
             listener.exitSimpleDataModifyingStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimpleDataModifyingStatement) {
            return visitor.visitSimpleDataModifyingStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimitiveDataModifyingStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insertStatement(): InsertStatementContext | null {
        return this.getRuleContext(0, InsertStatementContext);
    }
    public setStatement(): SetStatementContext | null {
        return this.getRuleContext(0, SetStatementContext);
    }
    public removeStatement(): RemoveStatementContext | null {
        return this.getRuleContext(0, RemoveStatementContext);
    }
    public deleteStatement(): DeleteStatementContext | null {
        return this.getRuleContext(0, DeleteStatementContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_primitiveDataModifyingStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPrimitiveDataModifyingStatement) {
             listener.enterPrimitiveDataModifyingStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPrimitiveDataModifyingStatement) {
             listener.exitPrimitiveDataModifyingStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPrimitiveDataModifyingStatement) {
            return visitor.visitPrimitiveDataModifyingStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSERT(): antlr.TerminalNode {
        return this.getToken(GQLParser.INSERT, 0)!;
    }
    public insertGraphPattern(): InsertGraphPatternContext {
        return this.getRuleContext(0, InsertGraphPatternContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_insertStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterInsertStatement) {
             listener.enterInsertStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitInsertStatement) {
             listener.exitInsertStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitInsertStatement) {
            return visitor.visitInsertStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(GQLParser.SET, 0)!;
    }
    public setItemList(): SetItemListContext {
        return this.getRuleContext(0, SetItemListContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_setStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSetStatement) {
             listener.enterSetStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSetStatement) {
             listener.exitSetStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSetStatement) {
            return visitor.visitSetStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetItemListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public setItem(): SetItemContext[];
    public setItem(i: number): SetItemContext | null;
    public setItem(i?: number): SetItemContext[] | SetItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetItemContext);
        }

        return this.getRuleContext(i, SetItemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_setItemList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSetItemList) {
             listener.enterSetItemList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSetItemList) {
             listener.exitSetItemList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSetItemList) {
            return visitor.visitSetItemList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public setPropertyItem(): SetPropertyItemContext | null {
        return this.getRuleContext(0, SetPropertyItemContext);
    }
    public setAllPropertiesItem(): SetAllPropertiesItemContext | null {
        return this.getRuleContext(0, SetAllPropertiesItemContext);
    }
    public setLabelItem(): SetLabelItemContext | null {
        return this.getRuleContext(0, SetLabelItemContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_setItem;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSetItem) {
             listener.enterSetItem(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSetItem) {
             listener.exitSetItem(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSetItem) {
            return visitor.visitSetItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetPropertyItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bindingVariableReference(): BindingVariableReferenceContext {
        return this.getRuleContext(0, BindingVariableReferenceContext)!;
    }
    public PERIOD(): antlr.TerminalNode {
        return this.getToken(GQLParser.PERIOD, 0)!;
    }
    public propertyName(): PropertyNameContext {
        return this.getRuleContext(0, PropertyNameContext)!;
    }
    public EQUALS_OPERATOR(): antlr.TerminalNode {
        return this.getToken(GQLParser.EQUALS_OPERATOR, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_setPropertyItem;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSetPropertyItem) {
             listener.enterSetPropertyItem(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSetPropertyItem) {
             listener.exitSetPropertyItem(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSetPropertyItem) {
            return visitor.visitSetPropertyItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetAllPropertiesItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bindingVariableReference(): BindingVariableReferenceContext {
        return this.getRuleContext(0, BindingVariableReferenceContext)!;
    }
    public EQUALS_OPERATOR(): antlr.TerminalNode {
        return this.getToken(GQLParser.EQUALS_OPERATOR, 0)!;
    }
    public LEFT_BRACE(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_BRACE, 0)!;
    }
    public RIGHT_BRACE(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_BRACE, 0)!;
    }
    public propertyKeyValuePairList(): PropertyKeyValuePairListContext | null {
        return this.getRuleContext(0, PropertyKeyValuePairListContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_setAllPropertiesItem;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSetAllPropertiesItem) {
             listener.enterSetAllPropertiesItem(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSetAllPropertiesItem) {
             listener.exitSetAllPropertiesItem(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSetAllPropertiesItem) {
            return visitor.visitSetAllPropertiesItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetLabelItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bindingVariableReference(): BindingVariableReferenceContext {
        return this.getRuleContext(0, BindingVariableReferenceContext)!;
    }
    public isOrColon(): IsOrColonContext {
        return this.getRuleContext(0, IsOrColonContext)!;
    }
    public labelName(): LabelNameContext {
        return this.getRuleContext(0, LabelNameContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_setLabelItem;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSetLabelItem) {
             listener.enterSetLabelItem(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSetLabelItem) {
             listener.exitSetLabelItem(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSetLabelItem) {
            return visitor.visitSetLabelItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RemoveStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REMOVE(): antlr.TerminalNode {
        return this.getToken(GQLParser.REMOVE, 0)!;
    }
    public removeItemList(): RemoveItemListContext {
        return this.getRuleContext(0, RemoveItemListContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_removeStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterRemoveStatement) {
             listener.enterRemoveStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitRemoveStatement) {
             listener.exitRemoveStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitRemoveStatement) {
            return visitor.visitRemoveStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RemoveItemListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public removeItem(): RemoveItemContext[];
    public removeItem(i: number): RemoveItemContext | null;
    public removeItem(i?: number): RemoveItemContext[] | RemoveItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RemoveItemContext);
        }

        return this.getRuleContext(i, RemoveItemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_removeItemList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterRemoveItemList) {
             listener.enterRemoveItemList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitRemoveItemList) {
             listener.exitRemoveItemList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitRemoveItemList) {
            return visitor.visitRemoveItemList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RemoveItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public removePropertyItem(): RemovePropertyItemContext | null {
        return this.getRuleContext(0, RemovePropertyItemContext);
    }
    public removeLabelItem(): RemoveLabelItemContext | null {
        return this.getRuleContext(0, RemoveLabelItemContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_removeItem;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterRemoveItem) {
             listener.enterRemoveItem(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitRemoveItem) {
             listener.exitRemoveItem(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitRemoveItem) {
            return visitor.visitRemoveItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RemovePropertyItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bindingVariableReference(): BindingVariableReferenceContext {
        return this.getRuleContext(0, BindingVariableReferenceContext)!;
    }
    public PERIOD(): antlr.TerminalNode {
        return this.getToken(GQLParser.PERIOD, 0)!;
    }
    public propertyName(): PropertyNameContext {
        return this.getRuleContext(0, PropertyNameContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_removePropertyItem;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterRemovePropertyItem) {
             listener.enterRemovePropertyItem(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitRemovePropertyItem) {
             listener.exitRemovePropertyItem(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitRemovePropertyItem) {
            return visitor.visitRemovePropertyItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RemoveLabelItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bindingVariableReference(): BindingVariableReferenceContext {
        return this.getRuleContext(0, BindingVariableReferenceContext)!;
    }
    public isOrColon(): IsOrColonContext {
        return this.getRuleContext(0, IsOrColonContext)!;
    }
    public labelName(): LabelNameContext {
        return this.getRuleContext(0, LabelNameContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_removeLabelItem;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterRemoveLabelItem) {
             listener.enterRemoveLabelItem(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitRemoveLabelItem) {
             listener.exitRemoveLabelItem(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitRemoveLabelItem) {
            return visitor.visitRemoveLabelItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE(): antlr.TerminalNode {
        return this.getToken(GQLParser.DELETE, 0)!;
    }
    public deleteItemList(): DeleteItemListContext {
        return this.getRuleContext(0, DeleteItemListContext)!;
    }
    public DETACH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.DETACH, 0);
    }
    public NODETACH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NODETACH, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_deleteStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDeleteStatement) {
             listener.enterDeleteStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDeleteStatement) {
             listener.exitDeleteStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDeleteStatement) {
            return visitor.visitDeleteStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteItemListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public deleteItem(): DeleteItemContext[];
    public deleteItem(i: number): DeleteItemContext | null;
    public deleteItem(i?: number): DeleteItemContext[] | DeleteItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DeleteItemContext);
        }

        return this.getRuleContext(i, DeleteItemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_deleteItemList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDeleteItemList) {
             listener.enterDeleteItemList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDeleteItemList) {
             listener.exitDeleteItemList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDeleteItemList) {
            return visitor.visitDeleteItemList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_deleteItem;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDeleteItem) {
             listener.enterDeleteItem(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDeleteItem) {
             listener.exitDeleteItem(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDeleteItem) {
            return visitor.visitDeleteItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CallDataModifyingProcedureStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public callProcedureStatement(): CallProcedureStatementContext {
        return this.getRuleContext(0, CallProcedureStatementContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_callDataModifyingProcedureStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCallDataModifyingProcedureStatement) {
             listener.enterCallDataModifyingProcedureStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCallDataModifyingProcedureStatement) {
             listener.exitCallDataModifyingProcedureStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCallDataModifyingProcedureStatement) {
            return visitor.visitCallDataModifyingProcedureStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CompositeQueryStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public compositeQueryExpression(): CompositeQueryExpressionContext {
        return this.getRuleContext(0, CompositeQueryExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_compositeQueryStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCompositeQueryStatement) {
             listener.enterCompositeQueryStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCompositeQueryStatement) {
             listener.exitCompositeQueryStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCompositeQueryStatement) {
            return visitor.visitCompositeQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CompositeQueryExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public compositeQueryPrimary(): CompositeQueryPrimaryContext {
        return this.getRuleContext(0, CompositeQueryPrimaryContext)!;
    }
    public compositeQueryExpression(): CompositeQueryExpressionContext | null {
        return this.getRuleContext(0, CompositeQueryExpressionContext);
    }
    public queryConjunction(): QueryConjunctionContext | null {
        return this.getRuleContext(0, QueryConjunctionContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_compositeQueryExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCompositeQueryExpression) {
             listener.enterCompositeQueryExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCompositeQueryExpression) {
             listener.exitCompositeQueryExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCompositeQueryExpression) {
            return visitor.visitCompositeQueryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryConjunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public setOperator(): SetOperatorContext | null {
        return this.getRuleContext(0, SetOperatorContext);
    }
    public OTHERWISE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.OTHERWISE, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_queryConjunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterQueryConjunction) {
             listener.enterQueryConjunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitQueryConjunction) {
             listener.exitQueryConjunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitQueryConjunction) {
            return visitor.visitQueryConjunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNION(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UNION, 0);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.EXCEPT, 0);
    }
    public INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.INTERSECT, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_setOperator;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSetOperator) {
             listener.enterSetOperator(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSetOperator) {
             listener.exitSetOperator(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSetOperator) {
            return visitor.visitSetOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CompositeQueryPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public linearQueryStatement(): LinearQueryStatementContext {
        return this.getRuleContext(0, LinearQueryStatementContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_compositeQueryPrimary;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCompositeQueryPrimary) {
             listener.enterCompositeQueryPrimary(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCompositeQueryPrimary) {
             listener.exitCompositeQueryPrimary(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCompositeQueryPrimary) {
            return visitor.visitCompositeQueryPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LinearQueryStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public focusedLinearQueryStatement(): FocusedLinearQueryStatementContext | null {
        return this.getRuleContext(0, FocusedLinearQueryStatementContext);
    }
    public ambientLinearQueryStatement(): AmbientLinearQueryStatementContext | null {
        return this.getRuleContext(0, AmbientLinearQueryStatementContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_linearQueryStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLinearQueryStatement) {
             listener.enterLinearQueryStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLinearQueryStatement) {
             listener.exitLinearQueryStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLinearQueryStatement) {
            return visitor.visitLinearQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FocusedLinearQueryStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public focusedLinearQueryAndPrimitiveResultStatementPart(): FocusedLinearQueryAndPrimitiveResultStatementPartContext | null {
        return this.getRuleContext(0, FocusedLinearQueryAndPrimitiveResultStatementPartContext);
    }
    public focusedLinearQueryStatementPart(): FocusedLinearQueryStatementPartContext[];
    public focusedLinearQueryStatementPart(i: number): FocusedLinearQueryStatementPartContext | null;
    public focusedLinearQueryStatementPart(i?: number): FocusedLinearQueryStatementPartContext[] | FocusedLinearQueryStatementPartContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FocusedLinearQueryStatementPartContext);
        }

        return this.getRuleContext(i, FocusedLinearQueryStatementPartContext);
    }
    public focusedPrimitiveResultStatement(): FocusedPrimitiveResultStatementContext | null {
        return this.getRuleContext(0, FocusedPrimitiveResultStatementContext);
    }
    public focusedNestedQuerySpecification(): FocusedNestedQuerySpecificationContext | null {
        return this.getRuleContext(0, FocusedNestedQuerySpecificationContext);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(0, SelectStatementContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_focusedLinearQueryStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFocusedLinearQueryStatement) {
             listener.enterFocusedLinearQueryStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFocusedLinearQueryStatement) {
             listener.exitFocusedLinearQueryStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFocusedLinearQueryStatement) {
            return visitor.visitFocusedLinearQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FocusedLinearQueryStatementPartContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public useGraphClause(): UseGraphClauseContext {
        return this.getRuleContext(0, UseGraphClauseContext)!;
    }
    public simpleLinearQueryStatement(): SimpleLinearQueryStatementContext {
        return this.getRuleContext(0, SimpleLinearQueryStatementContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_focusedLinearQueryStatementPart;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFocusedLinearQueryStatementPart) {
             listener.enterFocusedLinearQueryStatementPart(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFocusedLinearQueryStatementPart) {
             listener.exitFocusedLinearQueryStatementPart(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFocusedLinearQueryStatementPart) {
            return visitor.visitFocusedLinearQueryStatementPart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FocusedLinearQueryAndPrimitiveResultStatementPartContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public useGraphClause(): UseGraphClauseContext {
        return this.getRuleContext(0, UseGraphClauseContext)!;
    }
    public simpleLinearQueryStatement(): SimpleLinearQueryStatementContext {
        return this.getRuleContext(0, SimpleLinearQueryStatementContext)!;
    }
    public primitiveResultStatement(): PrimitiveResultStatementContext {
        return this.getRuleContext(0, PrimitiveResultStatementContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_focusedLinearQueryAndPrimitiveResultStatementPart;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFocusedLinearQueryAndPrimitiveResultStatementPart) {
             listener.enterFocusedLinearQueryAndPrimitiveResultStatementPart(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFocusedLinearQueryAndPrimitiveResultStatementPart) {
             listener.exitFocusedLinearQueryAndPrimitiveResultStatementPart(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFocusedLinearQueryAndPrimitiveResultStatementPart) {
            return visitor.visitFocusedLinearQueryAndPrimitiveResultStatementPart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FocusedPrimitiveResultStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public useGraphClause(): UseGraphClauseContext {
        return this.getRuleContext(0, UseGraphClauseContext)!;
    }
    public primitiveResultStatement(): PrimitiveResultStatementContext {
        return this.getRuleContext(0, PrimitiveResultStatementContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_focusedPrimitiveResultStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFocusedPrimitiveResultStatement) {
             listener.enterFocusedPrimitiveResultStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFocusedPrimitiveResultStatement) {
             listener.exitFocusedPrimitiveResultStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFocusedPrimitiveResultStatement) {
            return visitor.visitFocusedPrimitiveResultStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FocusedNestedQuerySpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public useGraphClause(): UseGraphClauseContext {
        return this.getRuleContext(0, UseGraphClauseContext)!;
    }
    public nestedQuerySpecification(): NestedQuerySpecificationContext {
        return this.getRuleContext(0, NestedQuerySpecificationContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_focusedNestedQuerySpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFocusedNestedQuerySpecification) {
             listener.enterFocusedNestedQuerySpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFocusedNestedQuerySpecification) {
             listener.exitFocusedNestedQuerySpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFocusedNestedQuerySpecification) {
            return visitor.visitFocusedNestedQuerySpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AmbientLinearQueryStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public primitiveResultStatement(): PrimitiveResultStatementContext | null {
        return this.getRuleContext(0, PrimitiveResultStatementContext);
    }
    public simpleLinearQueryStatement(): SimpleLinearQueryStatementContext | null {
        return this.getRuleContext(0, SimpleLinearQueryStatementContext);
    }
    public nestedQuerySpecification(): NestedQuerySpecificationContext | null {
        return this.getRuleContext(0, NestedQuerySpecificationContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_ambientLinearQueryStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterAmbientLinearQueryStatement) {
             listener.enterAmbientLinearQueryStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitAmbientLinearQueryStatement) {
             listener.exitAmbientLinearQueryStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitAmbientLinearQueryStatement) {
            return visitor.visitAmbientLinearQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleLinearQueryStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleQueryStatement(): SimpleQueryStatementContext[];
    public simpleQueryStatement(i: number): SimpleQueryStatementContext | null;
    public simpleQueryStatement(i?: number): SimpleQueryStatementContext[] | SimpleQueryStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SimpleQueryStatementContext);
        }

        return this.getRuleContext(i, SimpleQueryStatementContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simpleLinearQueryStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimpleLinearQueryStatement) {
             listener.enterSimpleLinearQueryStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimpleLinearQueryStatement) {
             listener.exitSimpleLinearQueryStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimpleLinearQueryStatement) {
            return visitor.visitSimpleLinearQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleQueryStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public primitiveQueryStatement(): PrimitiveQueryStatementContext | null {
        return this.getRuleContext(0, PrimitiveQueryStatementContext);
    }
    public callQueryStatement(): CallQueryStatementContext | null {
        return this.getRuleContext(0, CallQueryStatementContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simpleQueryStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimpleQueryStatement) {
             listener.enterSimpleQueryStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimpleQueryStatement) {
             listener.exitSimpleQueryStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimpleQueryStatement) {
            return visitor.visitSimpleQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimitiveQueryStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public matchStatement(): MatchStatementContext | null {
        return this.getRuleContext(0, MatchStatementContext);
    }
    public letStatement(): LetStatementContext | null {
        return this.getRuleContext(0, LetStatementContext);
    }
    public forStatement(): ForStatementContext | null {
        return this.getRuleContext(0, ForStatementContext);
    }
    public filterStatement(): FilterStatementContext | null {
        return this.getRuleContext(0, FilterStatementContext);
    }
    public orderByAndPageStatement(): OrderByAndPageStatementContext | null {
        return this.getRuleContext(0, OrderByAndPageStatementContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_primitiveQueryStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPrimitiveQueryStatement) {
             listener.enterPrimitiveQueryStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPrimitiveQueryStatement) {
             listener.exitPrimitiveQueryStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPrimitiveQueryStatement) {
            return visitor.visitPrimitiveQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MatchStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleMatchStatement(): SimpleMatchStatementContext | null {
        return this.getRuleContext(0, SimpleMatchStatementContext);
    }
    public optionalMatchStatement(): OptionalMatchStatementContext | null {
        return this.getRuleContext(0, OptionalMatchStatementContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_matchStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterMatchStatement) {
             listener.enterMatchStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitMatchStatement) {
             listener.exitMatchStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitMatchStatement) {
            return visitor.visitMatchStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleMatchStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MATCH(): antlr.TerminalNode {
        return this.getToken(GQLParser.MATCH, 0)!;
    }
    public graphPatternBindingTable(): GraphPatternBindingTableContext {
        return this.getRuleContext(0, GraphPatternBindingTableContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simpleMatchStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimpleMatchStatement) {
             listener.enterSimpleMatchStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimpleMatchStatement) {
             listener.exitSimpleMatchStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimpleMatchStatement) {
            return visitor.visitSimpleMatchStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptionalMatchStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPTIONAL(): antlr.TerminalNode {
        return this.getToken(GQLParser.OPTIONAL, 0)!;
    }
    public optionalOperand(): OptionalOperandContext {
        return this.getRuleContext(0, OptionalOperandContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_optionalMatchStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterOptionalMatchStatement) {
             listener.enterOptionalMatchStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitOptionalMatchStatement) {
             listener.exitOptionalMatchStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitOptionalMatchStatement) {
            return visitor.visitOptionalMatchStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptionalOperandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleMatchStatement(): SimpleMatchStatementContext | null {
        return this.getRuleContext(0, SimpleMatchStatementContext);
    }
    public LEFT_BRACE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_BRACE, 0);
    }
    public matchStatementBlock(): MatchStatementBlockContext | null {
        return this.getRuleContext(0, MatchStatementBlockContext);
    }
    public RIGHT_BRACE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_BRACE, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_optionalOperand;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterOptionalOperand) {
             listener.enterOptionalOperand(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitOptionalOperand) {
             listener.exitOptionalOperand(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitOptionalOperand) {
            return visitor.visitOptionalOperand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MatchStatementBlockContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public matchStatement(): MatchStatementContext[];
    public matchStatement(i: number): MatchStatementContext | null;
    public matchStatement(i?: number): MatchStatementContext[] | MatchStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MatchStatementContext);
        }

        return this.getRuleContext(i, MatchStatementContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_matchStatementBlock;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterMatchStatementBlock) {
             listener.enterMatchStatementBlock(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitMatchStatementBlock) {
             listener.exitMatchStatementBlock(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitMatchStatementBlock) {
            return visitor.visitMatchStatementBlock(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CallQueryStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public callProcedureStatement(): CallProcedureStatementContext {
        return this.getRuleContext(0, CallProcedureStatementContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_callQueryStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCallQueryStatement) {
             listener.enterCallQueryStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCallQueryStatement) {
             listener.exitCallQueryStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCallQueryStatement) {
            return visitor.visitCallQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FILTER(): antlr.TerminalNode {
        return this.getToken(GQLParser.FILTER, 0)!;
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public searchCondition(): SearchConditionContext | null {
        return this.getRuleContext(0, SearchConditionContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_filterStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFilterStatement) {
             listener.enterFilterStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFilterStatement) {
             listener.exitFilterStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFilterStatement) {
            return visitor.visitFilterStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LetStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LET(): antlr.TerminalNode {
        return this.getToken(GQLParser.LET, 0)!;
    }
    public letVariableDefinitionList(): LetVariableDefinitionListContext {
        return this.getRuleContext(0, LetVariableDefinitionListContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_letStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLetStatement) {
             listener.enterLetStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLetStatement) {
             listener.exitLetStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLetStatement) {
            return visitor.visitLetStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LetVariableDefinitionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public letVariableDefinition(): LetVariableDefinitionContext[];
    public letVariableDefinition(i: number): LetVariableDefinitionContext | null;
    public letVariableDefinition(i?: number): LetVariableDefinitionContext[] | LetVariableDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LetVariableDefinitionContext);
        }

        return this.getRuleContext(i, LetVariableDefinitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_letVariableDefinitionList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLetVariableDefinitionList) {
             listener.enterLetVariableDefinitionList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLetVariableDefinitionList) {
             listener.exitLetVariableDefinitionList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLetVariableDefinitionList) {
            return visitor.visitLetVariableDefinitionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LetVariableDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueVariableDefinition(): ValueVariableDefinitionContext | null {
        return this.getRuleContext(0, ValueVariableDefinitionContext);
    }
    public bindingVariable(): BindingVariableContext | null {
        return this.getRuleContext(0, BindingVariableContext);
    }
    public EQUALS_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.EQUALS_OPERATOR, 0);
    }
    public valueExpression(): ValueExpressionContext | null {
        return this.getRuleContext(0, ValueExpressionContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_letVariableDefinition;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLetVariableDefinition) {
             listener.enterLetVariableDefinition(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLetVariableDefinition) {
             listener.exitLetVariableDefinition(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLetVariableDefinition) {
            return visitor.visitLetVariableDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ForStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(GQLParser.FOR, 0)!;
    }
    public forItem(): ForItemContext {
        return this.getRuleContext(0, ForItemContext)!;
    }
    public forOrdinalityOrOffset(): ForOrdinalityOrOffsetContext | null {
        return this.getRuleContext(0, ForOrdinalityOrOffsetContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_forStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterForStatement) {
             listener.enterForStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitForStatement) {
             listener.exitForStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitForStatement) {
            return visitor.visitForStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ForItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public forItemAlias(): ForItemAliasContext {
        return this.getRuleContext(0, ForItemAliasContext)!;
    }
    public forItemSource(): ForItemSourceContext {
        return this.getRuleContext(0, ForItemSourceContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_forItem;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterForItem) {
             listener.enterForItem(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitForItem) {
             listener.exitForItem(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitForItem) {
            return visitor.visitForItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ForItemAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bindingVariable(): BindingVariableContext {
        return this.getRuleContext(0, BindingVariableContext)!;
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(GQLParser.IN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_forItemAlias;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterForItemAlias) {
             listener.enterForItemAlias(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitForItemAlias) {
             listener.exitForItemAlias(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitForItemAlias) {
            return visitor.visitForItemAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ForItemSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_forItemSource;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterForItemSource) {
             listener.enterForItemSource(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitForItemSource) {
             listener.exitForItemSource(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitForItemSource) {
            return visitor.visitForItemSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ForOrdinalityOrOffsetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(GQLParser.WITH, 0)!;
    }
    public bindingVariable(): BindingVariableContext {
        return this.getRuleContext(0, BindingVariableContext)!;
    }
    public ORDINALITY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ORDINALITY, 0);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.OFFSET, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_forOrdinalityOrOffset;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterForOrdinalityOrOffset) {
             listener.enterForOrdinalityOrOffset(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitForOrdinalityOrOffset) {
             listener.exitForOrdinalityOrOffset(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitForOrdinalityOrOffset) {
            return visitor.visitForOrdinalityOrOffset(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderByAndPageStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public offsetClause(): OffsetClauseContext | null {
        return this.getRuleContext(0, OffsetClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_orderByAndPageStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterOrderByAndPageStatement) {
             listener.enterOrderByAndPageStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitOrderByAndPageStatement) {
             listener.exitOrderByAndPageStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitOrderByAndPageStatement) {
            return visitor.visitOrderByAndPageStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimitiveResultStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public returnStatement(): ReturnStatementContext | null {
        return this.getRuleContext(0, ReturnStatementContext);
    }
    public orderByAndPageStatement(): OrderByAndPageStatementContext | null {
        return this.getRuleContext(0, OrderByAndPageStatementContext);
    }
    public FINISH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.FINISH, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_primitiveResultStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPrimitiveResultStatement) {
             listener.enterPrimitiveResultStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPrimitiveResultStatement) {
             listener.exitPrimitiveResultStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPrimitiveResultStatement) {
            return visitor.visitPrimitiveResultStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReturnStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETURN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RETURN, 0)!;
    }
    public returnStatementBody(): ReturnStatementBodyContext {
        return this.getRuleContext(0, ReturnStatementBodyContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_returnStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterReturnStatement) {
             listener.enterReturnStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitReturnStatement) {
             listener.exitReturnStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitReturnStatement) {
            return visitor.visitReturnStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReturnStatementBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ASTERISK, 0);
    }
    public returnItemList(): ReturnItemListContext | null {
        return this.getRuleContext(0, ReturnItemListContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(0, GroupByClauseContext);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NO, 0);
    }
    public BINDINGS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.BINDINGS, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_returnStatementBody;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterReturnStatementBody) {
             listener.enterReturnStatementBody(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitReturnStatementBody) {
             listener.exitReturnStatementBody(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitReturnStatementBody) {
            return visitor.visitReturnStatementBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReturnItemListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public returnItem(): ReturnItemContext[];
    public returnItem(i: number): ReturnItemContext | null;
    public returnItem(i?: number): ReturnItemContext[] | ReturnItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ReturnItemContext);
        }

        return this.getRuleContext(i, ReturnItemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_returnItemList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterReturnItemList) {
             listener.enterReturnItemList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitReturnItemList) {
             listener.exitReturnItemList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitReturnItemList) {
            return visitor.visitReturnItemList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReturnItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public aggregatingValueExpression(): AggregatingValueExpressionContext {
        return this.getRuleContext(0, AggregatingValueExpressionContext)!;
    }
    public returnItemAlias(): ReturnItemAliasContext | null {
        return this.getRuleContext(0, ReturnItemAliasContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_returnItem;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterReturnItem) {
             listener.enterReturnItem(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitReturnItem) {
             listener.exitReturnItem(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitReturnItem) {
            return visitor.visitReturnItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReturnItemAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(GQLParser.AS, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_returnItemAlias;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterReturnItemAlias) {
             listener.enterReturnItemAlias(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitReturnItemAlias) {
             listener.exitReturnItemAlias(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitReturnItemAlias) {
            return visitor.visitReturnItemAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT(): antlr.TerminalNode {
        return this.getToken(GQLParser.SELECT, 0)!;
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ASTERISK, 0);
    }
    public selectItemList(): SelectItemListContext | null {
        return this.getRuleContext(0, SelectItemListContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public selectStatementBody(): SelectStatementBodyContext | null {
        return this.getRuleContext(0, SelectStatementBodyContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(0, GroupByClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public offsetClause(): OffsetClauseContext | null {
        return this.getRuleContext(0, OffsetClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_selectStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSelectStatement) {
             listener.enterSelectStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSelectStatement) {
             listener.exitSelectStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSelectStatement) {
            return visitor.visitSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectItemListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectItem(): SelectItemContext[];
    public selectItem(i: number): SelectItemContext | null;
    public selectItem(i?: number): SelectItemContext[] | SelectItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectItemContext);
        }

        return this.getRuleContext(i, SelectItemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_selectItemList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSelectItemList) {
             listener.enterSelectItemList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSelectItemList) {
             listener.exitSelectItemList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSelectItemList) {
            return visitor.visitSelectItemList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public aggregatingValueExpression(): AggregatingValueExpressionContext {
        return this.getRuleContext(0, AggregatingValueExpressionContext)!;
    }
    public selectItemAlias(): SelectItemAliasContext | null {
        return this.getRuleContext(0, SelectItemAliasContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_selectItem;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSelectItem) {
             listener.enterSelectItem(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSelectItem) {
             listener.exitSelectItem(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSelectItem) {
            return visitor.visitSelectItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectItemAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(GQLParser.AS, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_selectItemAlias;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSelectItemAlias) {
             listener.enterSelectItemAlias(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSelectItemAlias) {
             listener.exitSelectItemAlias(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSelectItemAlias) {
            return visitor.visitSelectItemAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HavingClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HAVING(): antlr.TerminalNode {
        return this.getToken(GQLParser.HAVING, 0)!;
    }
    public searchCondition(): SearchConditionContext {
        return this.getRuleContext(0, SearchConditionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_havingClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterHavingClause) {
             listener.enterHavingClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitHavingClause) {
             listener.exitHavingClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitHavingClause) {
            return visitor.visitHavingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(GQLParser.FROM, 0)!;
    }
    public selectGraphMatchList(): SelectGraphMatchListContext | null {
        return this.getRuleContext(0, SelectGraphMatchListContext);
    }
    public selectQuerySpecification(): SelectQuerySpecificationContext | null {
        return this.getRuleContext(0, SelectQuerySpecificationContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_selectStatementBody;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSelectStatementBody) {
             listener.enterSelectStatementBody(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSelectStatementBody) {
             listener.exitSelectStatementBody(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSelectStatementBody) {
            return visitor.visitSelectStatementBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectGraphMatchListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectGraphMatch(): SelectGraphMatchContext[];
    public selectGraphMatch(i: number): SelectGraphMatchContext | null;
    public selectGraphMatch(i?: number): SelectGraphMatchContext[] | SelectGraphMatchContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectGraphMatchContext);
        }

        return this.getRuleContext(i, SelectGraphMatchContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_selectGraphMatchList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSelectGraphMatchList) {
             listener.enterSelectGraphMatchList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSelectGraphMatchList) {
             listener.exitSelectGraphMatchList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSelectGraphMatchList) {
            return visitor.visitSelectGraphMatchList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectGraphMatchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public graphExpression(): GraphExpressionContext {
        return this.getRuleContext(0, GraphExpressionContext)!;
    }
    public matchStatement(): MatchStatementContext {
        return this.getRuleContext(0, MatchStatementContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_selectGraphMatch;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSelectGraphMatch) {
             listener.enterSelectGraphMatch(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSelectGraphMatch) {
             listener.exitSelectGraphMatch(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSelectGraphMatch) {
            return visitor.visitSelectGraphMatch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectQuerySpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nestedQuerySpecification(): NestedQuerySpecificationContext {
        return this.getRuleContext(0, NestedQuerySpecificationContext)!;
    }
    public graphExpression(): GraphExpressionContext | null {
        return this.getRuleContext(0, GraphExpressionContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_selectQuerySpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSelectQuerySpecification) {
             listener.enterSelectQuerySpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSelectQuerySpecification) {
             listener.exitSelectQuerySpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSelectQuerySpecification) {
            return visitor.visitSelectQuerySpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CallProcedureStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CALL(): antlr.TerminalNode {
        return this.getToken(GQLParser.CALL, 0)!;
    }
    public procedureCall(): ProcedureCallContext {
        return this.getRuleContext(0, ProcedureCallContext)!;
    }
    public OPTIONAL(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.OPTIONAL, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_callProcedureStatement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCallProcedureStatement) {
             listener.enterCallProcedureStatement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCallProcedureStatement) {
             listener.exitCallProcedureStatement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCallProcedureStatement) {
            return visitor.visitCallProcedureStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcedureCallContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public inlineProcedureCall(): InlineProcedureCallContext | null {
        return this.getRuleContext(0, InlineProcedureCallContext);
    }
    public namedProcedureCall(): NamedProcedureCallContext | null {
        return this.getRuleContext(0, NamedProcedureCallContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_procedureCall;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterProcedureCall) {
             listener.enterProcedureCall(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitProcedureCall) {
             listener.exitProcedureCall(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitProcedureCall) {
            return visitor.visitProcedureCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InlineProcedureCallContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nestedProcedureSpecification(): NestedProcedureSpecificationContext {
        return this.getRuleContext(0, NestedProcedureSpecificationContext)!;
    }
    public variableScopeClause(): VariableScopeClauseContext | null {
        return this.getRuleContext(0, VariableScopeClauseContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_inlineProcedureCall;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterInlineProcedureCall) {
             listener.enterInlineProcedureCall(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitInlineProcedureCall) {
             listener.exitInlineProcedureCall(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitInlineProcedureCall) {
            return visitor.visitInlineProcedureCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableScopeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public bindingVariableReferenceList(): BindingVariableReferenceListContext | null {
        return this.getRuleContext(0, BindingVariableReferenceListContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_variableScopeClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterVariableScopeClause) {
             listener.enterVariableScopeClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitVariableScopeClause) {
             listener.exitVariableScopeClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitVariableScopeClause) {
            return visitor.visitVariableScopeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BindingVariableReferenceListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bindingVariableReference(): BindingVariableReferenceContext[];
    public bindingVariableReference(i: number): BindingVariableReferenceContext | null;
    public bindingVariableReference(i?: number): BindingVariableReferenceContext[] | BindingVariableReferenceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BindingVariableReferenceContext);
        }

        return this.getRuleContext(i, BindingVariableReferenceContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_bindingVariableReferenceList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterBindingVariableReferenceList) {
             listener.enterBindingVariableReferenceList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitBindingVariableReferenceList) {
             listener.exitBindingVariableReferenceList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitBindingVariableReferenceList) {
            return visitor.visitBindingVariableReferenceList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedProcedureCallContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public procedureReference(): ProcedureReferenceContext {
        return this.getRuleContext(0, ProcedureReferenceContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public procedureArgumentList(): ProcedureArgumentListContext | null {
        return this.getRuleContext(0, ProcedureArgumentListContext);
    }
    public yieldClause(): YieldClauseContext | null {
        return this.getRuleContext(0, YieldClauseContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_namedProcedureCall;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNamedProcedureCall) {
             listener.enterNamedProcedureCall(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNamedProcedureCall) {
             listener.exitNamedProcedureCall(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNamedProcedureCall) {
            return visitor.visitNamedProcedureCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcedureArgumentListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public procedureArgument(): ProcedureArgumentContext[];
    public procedureArgument(i: number): ProcedureArgumentContext | null;
    public procedureArgument(i?: number): ProcedureArgumentContext[] | ProcedureArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProcedureArgumentContext);
        }

        return this.getRuleContext(i, ProcedureArgumentContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_procedureArgumentList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterProcedureArgumentList) {
             listener.enterProcedureArgumentList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitProcedureArgumentList) {
             listener.exitProcedureArgumentList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitProcedureArgumentList) {
            return visitor.visitProcedureArgumentList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcedureArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_procedureArgument;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterProcedureArgument) {
             listener.enterProcedureArgument(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitProcedureArgument) {
             listener.exitProcedureArgument(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitProcedureArgument) {
            return visitor.visitProcedureArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AtSchemaClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AT(): antlr.TerminalNode {
        return this.getToken(GQLParser.AT, 0)!;
    }
    public schemaReference(): SchemaReferenceContext {
        return this.getRuleContext(0, SchemaReferenceContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_atSchemaClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterAtSchemaClause) {
             listener.enterAtSchemaClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitAtSchemaClause) {
             listener.exitAtSchemaClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitAtSchemaClause) {
            return visitor.visitAtSchemaClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UseGraphClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USE(): antlr.TerminalNode {
        return this.getToken(GQLParser.USE, 0)!;
    }
    public graphExpression(): GraphExpressionContext {
        return this.getRuleContext(0, GraphExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_useGraphClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterUseGraphClause) {
             listener.enterUseGraphClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitUseGraphClause) {
             listener.exitUseGraphClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitUseGraphClause) {
            return visitor.visitUseGraphClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GraphPatternBindingTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public graphPattern(): GraphPatternContext {
        return this.getRuleContext(0, GraphPatternContext)!;
    }
    public graphPatternYieldClause(): GraphPatternYieldClauseContext | null {
        return this.getRuleContext(0, GraphPatternYieldClauseContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_graphPatternBindingTable;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGraphPatternBindingTable) {
             listener.enterGraphPatternBindingTable(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGraphPatternBindingTable) {
             listener.exitGraphPatternBindingTable(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGraphPatternBindingTable) {
            return visitor.visitGraphPatternBindingTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GraphPatternYieldClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public YIELD(): antlr.TerminalNode {
        return this.getToken(GQLParser.YIELD, 0)!;
    }
    public graphPatternYieldItemList(): GraphPatternYieldItemListContext {
        return this.getRuleContext(0, GraphPatternYieldItemListContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_graphPatternYieldClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGraphPatternYieldClause) {
             listener.enterGraphPatternYieldClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGraphPatternYieldClause) {
             listener.exitGraphPatternYieldClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGraphPatternYieldClause) {
            return visitor.visitGraphPatternYieldClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GraphPatternYieldItemListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public graphPatternYieldItem(): GraphPatternYieldItemContext[];
    public graphPatternYieldItem(i: number): GraphPatternYieldItemContext | null;
    public graphPatternYieldItem(i?: number): GraphPatternYieldItemContext[] | GraphPatternYieldItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GraphPatternYieldItemContext);
        }

        return this.getRuleContext(i, GraphPatternYieldItemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NO, 0);
    }
    public BINDINGS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.BINDINGS, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_graphPatternYieldItemList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGraphPatternYieldItemList) {
             listener.enterGraphPatternYieldItemList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGraphPatternYieldItemList) {
             listener.exitGraphPatternYieldItemList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGraphPatternYieldItemList) {
            return visitor.visitGraphPatternYieldItemList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GraphPatternYieldItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bindingVariableReference(): BindingVariableReferenceContext {
        return this.getRuleContext(0, BindingVariableReferenceContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_graphPatternYieldItem;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGraphPatternYieldItem) {
             listener.enterGraphPatternYieldItem(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGraphPatternYieldItem) {
             listener.exitGraphPatternYieldItem(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGraphPatternYieldItem) {
            return visitor.visitGraphPatternYieldItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GraphPatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pathPatternList(): PathPatternListContext {
        return this.getRuleContext(0, PathPatternListContext)!;
    }
    public matchMode(): MatchModeContext | null {
        return this.getRuleContext(0, MatchModeContext);
    }
    public keepClause(): KeepClauseContext | null {
        return this.getRuleContext(0, KeepClauseContext);
    }
    public graphPatternWhereClause(): GraphPatternWhereClauseContext | null {
        return this.getRuleContext(0, GraphPatternWhereClauseContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_graphPattern;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGraphPattern) {
             listener.enterGraphPattern(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGraphPattern) {
             listener.exitGraphPattern(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGraphPattern) {
            return visitor.visitGraphPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MatchModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public repeatableElementsMatchMode(): RepeatableElementsMatchModeContext | null {
        return this.getRuleContext(0, RepeatableElementsMatchModeContext);
    }
    public differentEdgesMatchMode(): DifferentEdgesMatchModeContext | null {
        return this.getRuleContext(0, DifferentEdgesMatchModeContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_matchMode;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterMatchMode) {
             listener.enterMatchMode(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitMatchMode) {
             listener.exitMatchMode(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitMatchMode) {
            return visitor.visitMatchMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RepeatableElementsMatchModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPEATABLE(): antlr.TerminalNode {
        return this.getToken(GQLParser.REPEATABLE, 0)!;
    }
    public elementBindingsOrElements(): ElementBindingsOrElementsContext {
        return this.getRuleContext(0, ElementBindingsOrElementsContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_repeatableElementsMatchMode;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterRepeatableElementsMatchMode) {
             listener.enterRepeatableElementsMatchMode(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitRepeatableElementsMatchMode) {
             listener.exitRepeatableElementsMatchMode(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitRepeatableElementsMatchMode) {
            return visitor.visitRepeatableElementsMatchMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DifferentEdgesMatchModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DIFFERENT(): antlr.TerminalNode {
        return this.getToken(GQLParser.DIFFERENT, 0)!;
    }
    public edgeBindingsOrEdges(): EdgeBindingsOrEdgesContext {
        return this.getRuleContext(0, EdgeBindingsOrEdgesContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_differentEdgesMatchMode;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDifferentEdgesMatchMode) {
             listener.enterDifferentEdgesMatchMode(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDifferentEdgesMatchMode) {
             listener.exitDifferentEdgesMatchMode(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDifferentEdgesMatchMode) {
            return visitor.visitDifferentEdgesMatchMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElementBindingsOrElementsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ELEMENT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ELEMENT, 0);
    }
    public BINDINGS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.BINDINGS, 0);
    }
    public ELEMENTS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ELEMENTS, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_elementBindingsOrElements;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterElementBindingsOrElements) {
             listener.enterElementBindingsOrElements(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitElementBindingsOrElements) {
             listener.exitElementBindingsOrElements(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitElementBindingsOrElements) {
            return visitor.visitElementBindingsOrElements(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EdgeBindingsOrEdgesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public edgeSynonym(): EdgeSynonymContext | null {
        return this.getRuleContext(0, EdgeSynonymContext);
    }
    public BINDINGS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.BINDINGS, 0);
    }
    public edgesSynonym(): EdgesSynonymContext | null {
        return this.getRuleContext(0, EdgesSynonymContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_edgeBindingsOrEdges;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEdgeBindingsOrEdges) {
             listener.enterEdgeBindingsOrEdges(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEdgeBindingsOrEdges) {
             listener.exitEdgeBindingsOrEdges(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEdgeBindingsOrEdges) {
            return visitor.visitEdgeBindingsOrEdges(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathPatternListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pathPattern(): PathPatternContext[];
    public pathPattern(i: number): PathPatternContext | null;
    public pathPattern(i?: number): PathPatternContext[] | PathPatternContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PathPatternContext);
        }

        return this.getRuleContext(i, PathPatternContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_pathPatternList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPathPatternList) {
             listener.enterPathPatternList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPathPatternList) {
             listener.exitPathPatternList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPathPatternList) {
            return visitor.visitPathPatternList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathPatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pathPatternExpression(): PathPatternExpressionContext {
        return this.getRuleContext(0, PathPatternExpressionContext)!;
    }
    public pathVariableDeclaration(): PathVariableDeclarationContext | null {
        return this.getRuleContext(0, PathVariableDeclarationContext);
    }
    public pathPatternPrefix(): PathPatternPrefixContext | null {
        return this.getRuleContext(0, PathPatternPrefixContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_pathPattern;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPathPattern) {
             listener.enterPathPattern(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPathPattern) {
             listener.exitPathPattern(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPathPattern) {
            return visitor.visitPathPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathVariableDeclarationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pathVariable(): PathVariableContext {
        return this.getRuleContext(0, PathVariableContext)!;
    }
    public EQUALS_OPERATOR(): antlr.TerminalNode {
        return this.getToken(GQLParser.EQUALS_OPERATOR, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_pathVariableDeclaration;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPathVariableDeclaration) {
             listener.enterPathVariableDeclaration(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPathVariableDeclaration) {
             listener.exitPathVariableDeclaration(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPathVariableDeclaration) {
            return visitor.visitPathVariableDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeepClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KEEP(): antlr.TerminalNode {
        return this.getToken(GQLParser.KEEP, 0)!;
    }
    public pathPatternPrefix(): PathPatternPrefixContext {
        return this.getRuleContext(0, PathPatternPrefixContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_keepClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterKeepClause) {
             listener.enterKeepClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitKeepClause) {
             listener.exitKeepClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitKeepClause) {
            return visitor.visitKeepClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GraphPatternWhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(GQLParser.WHERE, 0)!;
    }
    public searchCondition(): SearchConditionContext {
        return this.getRuleContext(0, SearchConditionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_graphPatternWhereClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGraphPatternWhereClause) {
             listener.enterGraphPatternWhereClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGraphPatternWhereClause) {
             listener.exitGraphPatternWhereClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGraphPatternWhereClause) {
            return visitor.visitGraphPatternWhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertGraphPatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insertPathPatternList(): InsertPathPatternListContext {
        return this.getRuleContext(0, InsertPathPatternListContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_insertGraphPattern;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterInsertGraphPattern) {
             listener.enterInsertGraphPattern(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitInsertGraphPattern) {
             listener.exitInsertGraphPattern(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitInsertGraphPattern) {
            return visitor.visitInsertGraphPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertPathPatternListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insertPathPattern(): InsertPathPatternContext[];
    public insertPathPattern(i: number): InsertPathPatternContext | null;
    public insertPathPattern(i?: number): InsertPathPatternContext[] | InsertPathPatternContext | null {
        if (i === undefined) {
            return this.getRuleContexts(InsertPathPatternContext);
        }

        return this.getRuleContext(i, InsertPathPatternContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_insertPathPatternList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterInsertPathPatternList) {
             listener.enterInsertPathPatternList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitInsertPathPatternList) {
             listener.exitInsertPathPatternList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitInsertPathPatternList) {
            return visitor.visitInsertPathPatternList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertPathPatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insertNodePattern(): InsertNodePatternContext[];
    public insertNodePattern(i: number): InsertNodePatternContext | null;
    public insertNodePattern(i?: number): InsertNodePatternContext[] | InsertNodePatternContext | null {
        if (i === undefined) {
            return this.getRuleContexts(InsertNodePatternContext);
        }

        return this.getRuleContext(i, InsertNodePatternContext);
    }
    public insertEdgePattern(): InsertEdgePatternContext[];
    public insertEdgePattern(i: number): InsertEdgePatternContext | null;
    public insertEdgePattern(i?: number): InsertEdgePatternContext[] | InsertEdgePatternContext | null {
        if (i === undefined) {
            return this.getRuleContexts(InsertEdgePatternContext);
        }

        return this.getRuleContext(i, InsertEdgePatternContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_insertPathPattern;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterInsertPathPattern) {
             listener.enterInsertPathPattern(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitInsertPathPattern) {
             listener.exitInsertPathPattern(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitInsertPathPattern) {
            return visitor.visitInsertPathPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertNodePatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public insertElementPatternFiller(): InsertElementPatternFillerContext | null {
        return this.getRuleContext(0, InsertElementPatternFillerContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_insertNodePattern;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterInsertNodePattern) {
             listener.enterInsertNodePattern(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitInsertNodePattern) {
             listener.exitInsertNodePattern(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitInsertNodePattern) {
            return visitor.visitInsertNodePattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertEdgePatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insertEdgePointingLeft(): InsertEdgePointingLeftContext | null {
        return this.getRuleContext(0, InsertEdgePointingLeftContext);
    }
    public insertEdgePointingRight(): InsertEdgePointingRightContext | null {
        return this.getRuleContext(0, InsertEdgePointingRightContext);
    }
    public insertEdgeUndirected(): InsertEdgeUndirectedContext | null {
        return this.getRuleContext(0, InsertEdgeUndirectedContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_insertEdgePattern;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterInsertEdgePattern) {
             listener.enterInsertEdgePattern(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitInsertEdgePattern) {
             listener.exitInsertEdgePattern(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitInsertEdgePattern) {
            return visitor.visitInsertEdgePattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertEdgePointingLeftContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_ARROW_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_ARROW_BRACKET, 0)!;
    }
    public RIGHT_BRACKET_MINUS(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_BRACKET_MINUS, 0)!;
    }
    public insertElementPatternFiller(): InsertElementPatternFillerContext | null {
        return this.getRuleContext(0, InsertElementPatternFillerContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_insertEdgePointingLeft;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterInsertEdgePointingLeft) {
             listener.enterInsertEdgePointingLeft(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitInsertEdgePointingLeft) {
             listener.exitInsertEdgePointingLeft(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitInsertEdgePointingLeft) {
            return visitor.visitInsertEdgePointingLeft(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertEdgePointingRightContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MINUS_LEFT_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.MINUS_LEFT_BRACKET, 0)!;
    }
    public BRACKET_RIGHT_ARROW(): antlr.TerminalNode {
        return this.getToken(GQLParser.BRACKET_RIGHT_ARROW, 0)!;
    }
    public insertElementPatternFiller(): InsertElementPatternFillerContext | null {
        return this.getRuleContext(0, InsertElementPatternFillerContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_insertEdgePointingRight;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterInsertEdgePointingRight) {
             listener.enterInsertEdgePointingRight(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitInsertEdgePointingRight) {
             listener.exitInsertEdgePointingRight(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitInsertEdgePointingRight) {
            return visitor.visitInsertEdgePointingRight(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertEdgeUndirectedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TILDE_LEFT_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.TILDE_LEFT_BRACKET, 0)!;
    }
    public RIGHT_BRACKET_TILDE(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_BRACKET_TILDE, 0)!;
    }
    public insertElementPatternFiller(): InsertElementPatternFillerContext | null {
        return this.getRuleContext(0, InsertElementPatternFillerContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_insertEdgeUndirected;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterInsertEdgeUndirected) {
             listener.enterInsertEdgeUndirected(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitInsertEdgeUndirected) {
             listener.exitInsertEdgeUndirected(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitInsertEdgeUndirected) {
            return visitor.visitInsertEdgeUndirected(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertElementPatternFillerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public elementVariableDeclaration(): ElementVariableDeclarationContext | null {
        return this.getRuleContext(0, ElementVariableDeclarationContext);
    }
    public labelAndPropertySetSpecification(): LabelAndPropertySetSpecificationContext | null {
        return this.getRuleContext(0, LabelAndPropertySetSpecificationContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_insertElementPatternFiller;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterInsertElementPatternFiller) {
             listener.enterInsertElementPatternFiller(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitInsertElementPatternFiller) {
             listener.exitInsertElementPatternFiller(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitInsertElementPatternFiller) {
            return visitor.visitInsertElementPatternFiller(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LabelAndPropertySetSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public isOrColon(): IsOrColonContext | null {
        return this.getRuleContext(0, IsOrColonContext);
    }
    public labelSetSpecification(): LabelSetSpecificationContext | null {
        return this.getRuleContext(0, LabelSetSpecificationContext);
    }
    public elementPropertySpecification(): ElementPropertySpecificationContext | null {
        return this.getRuleContext(0, ElementPropertySpecificationContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_labelAndPropertySetSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLabelAndPropertySetSpecification) {
             listener.enterLabelAndPropertySetSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLabelAndPropertySetSpecification) {
             listener.exitLabelAndPropertySetSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLabelAndPropertySetSpecification) {
            return visitor.visitLabelAndPropertySetSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathPatternPrefixContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pathModePrefix(): PathModePrefixContext | null {
        return this.getRuleContext(0, PathModePrefixContext);
    }
    public pathSearchPrefix(): PathSearchPrefixContext | null {
        return this.getRuleContext(0, PathSearchPrefixContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_pathPatternPrefix;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPathPatternPrefix) {
             listener.enterPathPatternPrefix(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPathPatternPrefix) {
             listener.exitPathPatternPrefix(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPathPatternPrefix) {
            return visitor.visitPathPatternPrefix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathModePrefixContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pathMode(): PathModeContext {
        return this.getRuleContext(0, PathModeContext)!;
    }
    public pathOrPaths(): PathOrPathsContext | null {
        return this.getRuleContext(0, PathOrPathsContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_pathModePrefix;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPathModePrefix) {
             listener.enterPathModePrefix(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPathModePrefix) {
             listener.exitPathModePrefix(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPathModePrefix) {
            return visitor.visitPathModePrefix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WALK(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.WALK, 0);
    }
    public TRAIL(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TRAIL, 0);
    }
    public SIMPLE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.SIMPLE, 0);
    }
    public ACYCLIC(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ACYCLIC, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_pathMode;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPathMode) {
             listener.enterPathMode(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPathMode) {
             listener.exitPathMode(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPathMode) {
            return visitor.visitPathMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathSearchPrefixContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public allPathSearch(): AllPathSearchContext | null {
        return this.getRuleContext(0, AllPathSearchContext);
    }
    public anyPathSearch(): AnyPathSearchContext | null {
        return this.getRuleContext(0, AnyPathSearchContext);
    }
    public shortestPathSearch(): ShortestPathSearchContext | null {
        return this.getRuleContext(0, ShortestPathSearchContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_pathSearchPrefix;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPathSearchPrefix) {
             listener.enterPathSearchPrefix(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPathSearchPrefix) {
             listener.exitPathSearchPrefix(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPathSearchPrefix) {
            return visitor.visitPathSearchPrefix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AllPathSearchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL(): antlr.TerminalNode {
        return this.getToken(GQLParser.ALL, 0)!;
    }
    public pathMode(): PathModeContext | null {
        return this.getRuleContext(0, PathModeContext);
    }
    public pathOrPaths(): PathOrPathsContext | null {
        return this.getRuleContext(0, PathOrPathsContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_allPathSearch;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterAllPathSearch) {
             listener.enterAllPathSearch(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitAllPathSearch) {
             listener.exitAllPathSearch(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitAllPathSearch) {
            return visitor.visitAllPathSearch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathOrPathsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PATH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PATH, 0);
    }
    public PATHS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PATHS, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_pathOrPaths;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPathOrPaths) {
             listener.enterPathOrPaths(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPathOrPaths) {
             listener.exitPathOrPaths(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPathOrPaths) {
            return visitor.visitPathOrPaths(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnyPathSearchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ANY(): antlr.TerminalNode {
        return this.getToken(GQLParser.ANY, 0)!;
    }
    public numberOfPaths(): NumberOfPathsContext | null {
        return this.getRuleContext(0, NumberOfPathsContext);
    }
    public pathMode(): PathModeContext | null {
        return this.getRuleContext(0, PathModeContext);
    }
    public pathOrPaths(): PathOrPathsContext | null {
        return this.getRuleContext(0, PathOrPathsContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_anyPathSearch;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterAnyPathSearch) {
             listener.enterAnyPathSearch(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitAnyPathSearch) {
             listener.exitAnyPathSearch(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitAnyPathSearch) {
            return visitor.visitAnyPathSearch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberOfPathsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonNegativeIntegerSpecification(): NonNegativeIntegerSpecificationContext {
        return this.getRuleContext(0, NonNegativeIntegerSpecificationContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_numberOfPaths;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNumberOfPaths) {
             listener.enterNumberOfPaths(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNumberOfPaths) {
             listener.exitNumberOfPaths(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNumberOfPaths) {
            return visitor.visitNumberOfPaths(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShortestPathSearchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public allShortestPathSearch(): AllShortestPathSearchContext | null {
        return this.getRuleContext(0, AllShortestPathSearchContext);
    }
    public anyShortestPathSearch(): AnyShortestPathSearchContext | null {
        return this.getRuleContext(0, AnyShortestPathSearchContext);
    }
    public countedShortestPathSearch(): CountedShortestPathSearchContext | null {
        return this.getRuleContext(0, CountedShortestPathSearchContext);
    }
    public countedShortestGroupSearch(): CountedShortestGroupSearchContext | null {
        return this.getRuleContext(0, CountedShortestGroupSearchContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_shortestPathSearch;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterShortestPathSearch) {
             listener.enterShortestPathSearch(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitShortestPathSearch) {
             listener.exitShortestPathSearch(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitShortestPathSearch) {
            return visitor.visitShortestPathSearch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AllShortestPathSearchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL(): antlr.TerminalNode {
        return this.getToken(GQLParser.ALL, 0)!;
    }
    public SHORTEST(): antlr.TerminalNode {
        return this.getToken(GQLParser.SHORTEST, 0)!;
    }
    public pathMode(): PathModeContext | null {
        return this.getRuleContext(0, PathModeContext);
    }
    public pathOrPaths(): PathOrPathsContext | null {
        return this.getRuleContext(0, PathOrPathsContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_allShortestPathSearch;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterAllShortestPathSearch) {
             listener.enterAllShortestPathSearch(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitAllShortestPathSearch) {
             listener.exitAllShortestPathSearch(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitAllShortestPathSearch) {
            return visitor.visitAllShortestPathSearch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnyShortestPathSearchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ANY(): antlr.TerminalNode {
        return this.getToken(GQLParser.ANY, 0)!;
    }
    public SHORTEST(): antlr.TerminalNode {
        return this.getToken(GQLParser.SHORTEST, 0)!;
    }
    public pathMode(): PathModeContext | null {
        return this.getRuleContext(0, PathModeContext);
    }
    public pathOrPaths(): PathOrPathsContext | null {
        return this.getRuleContext(0, PathOrPathsContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_anyShortestPathSearch;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterAnyShortestPathSearch) {
             listener.enterAnyShortestPathSearch(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitAnyShortestPathSearch) {
             listener.exitAnyShortestPathSearch(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitAnyShortestPathSearch) {
            return visitor.visitAnyShortestPathSearch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CountedShortestPathSearchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHORTEST(): antlr.TerminalNode {
        return this.getToken(GQLParser.SHORTEST, 0)!;
    }
    public numberOfPaths(): NumberOfPathsContext {
        return this.getRuleContext(0, NumberOfPathsContext)!;
    }
    public pathMode(): PathModeContext | null {
        return this.getRuleContext(0, PathModeContext);
    }
    public pathOrPaths(): PathOrPathsContext | null {
        return this.getRuleContext(0, PathOrPathsContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_countedShortestPathSearch;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCountedShortestPathSearch) {
             listener.enterCountedShortestPathSearch(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCountedShortestPathSearch) {
             listener.exitCountedShortestPathSearch(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCountedShortestPathSearch) {
            return visitor.visitCountedShortestPathSearch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CountedShortestGroupSearchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHORTEST(): antlr.TerminalNode {
        return this.getToken(GQLParser.SHORTEST, 0)!;
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.GROUP, 0);
    }
    public GROUPS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.GROUPS, 0);
    }
    public numberOfGroups(): NumberOfGroupsContext | null {
        return this.getRuleContext(0, NumberOfGroupsContext);
    }
    public pathMode(): PathModeContext | null {
        return this.getRuleContext(0, PathModeContext);
    }
    public pathOrPaths(): PathOrPathsContext | null {
        return this.getRuleContext(0, PathOrPathsContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_countedShortestGroupSearch;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCountedShortestGroupSearch) {
             listener.enterCountedShortestGroupSearch(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCountedShortestGroupSearch) {
             listener.exitCountedShortestGroupSearch(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCountedShortestGroupSearch) {
            return visitor.visitCountedShortestGroupSearch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberOfGroupsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonNegativeIntegerSpecification(): NonNegativeIntegerSpecificationContext {
        return this.getRuleContext(0, NonNegativeIntegerSpecificationContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_numberOfGroups;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNumberOfGroups) {
             listener.enterNumberOfGroups(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNumberOfGroups) {
             listener.exitNumberOfGroups(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNumberOfGroups) {
            return visitor.visitNumberOfGroups(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathPatternExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_pathPatternExpression;
    }
    public override copyFrom(ctx: PathPatternExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class PpePathTermContext extends PathPatternExpressionContext {
    public constructor(ctx: PathPatternExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public pathTerm(): PathTermContext {
        return this.getRuleContext(0, PathTermContext)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPpePathTerm) {
             listener.enterPpePathTerm(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPpePathTerm) {
             listener.exitPpePathTerm(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPpePathTerm) {
            return visitor.visitPpePathTerm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PpeMultisetAlternationContext extends PathPatternExpressionContext {
    public constructor(ctx: PathPatternExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public pathTerm(): PathTermContext[];
    public pathTerm(i: number): PathTermContext | null;
    public pathTerm(i?: number): PathTermContext[] | PathTermContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PathTermContext);
        }

        return this.getRuleContext(i, PathTermContext);
    }
    public MULTISET_ALTERNATION_OPERATOR(): antlr.TerminalNode[];
    public MULTISET_ALTERNATION_OPERATOR(i: number): antlr.TerminalNode | null;
    public MULTISET_ALTERNATION_OPERATOR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.MULTISET_ALTERNATION_OPERATOR);
    	} else {
    		return this.getToken(GQLParser.MULTISET_ALTERNATION_OPERATOR, i);
    	}
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPpeMultisetAlternation) {
             listener.enterPpeMultisetAlternation(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPpeMultisetAlternation) {
             listener.exitPpeMultisetAlternation(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPpeMultisetAlternation) {
            return visitor.visitPpeMultisetAlternation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PpePatternUnionContext extends PathPatternExpressionContext {
    public constructor(ctx: PathPatternExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public pathTerm(): PathTermContext[];
    public pathTerm(i: number): PathTermContext | null;
    public pathTerm(i?: number): PathTermContext[] | PathTermContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PathTermContext);
        }

        return this.getRuleContext(i, PathTermContext);
    }
    public VERTICAL_BAR(): antlr.TerminalNode[];
    public VERTICAL_BAR(i: number): antlr.TerminalNode | null;
    public VERTICAL_BAR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.VERTICAL_BAR);
    	} else {
    		return this.getToken(GQLParser.VERTICAL_BAR, i);
    	}
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPpePatternUnion) {
             listener.enterPpePatternUnion(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPpePatternUnion) {
             listener.exitPpePatternUnion(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPpePatternUnion) {
            return visitor.visitPpePatternUnion(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathTermContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pathFactor(): PathFactorContext[];
    public pathFactor(i: number): PathFactorContext | null;
    public pathFactor(i?: number): PathFactorContext[] | PathFactorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PathFactorContext);
        }

        return this.getRuleContext(i, PathFactorContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_pathTerm;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPathTerm) {
             listener.enterPathTerm(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPathTerm) {
             listener.exitPathTerm(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPathTerm) {
            return visitor.visitPathTerm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathFactorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_pathFactor;
    }
    public override copyFrom(ctx: PathFactorContext): void {
        super.copyFrom(ctx);
    }
}
export class PfPathPrimaryContext extends PathFactorContext {
    public constructor(ctx: PathFactorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public pathPrimary(): PathPrimaryContext {
        return this.getRuleContext(0, PathPrimaryContext)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPfPathPrimary) {
             listener.enterPfPathPrimary(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPfPathPrimary) {
             listener.exitPfPathPrimary(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPfPathPrimary) {
            return visitor.visitPfPathPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PfQuantifiedPathPrimaryContext extends PathFactorContext {
    public constructor(ctx: PathFactorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public pathPrimary(): PathPrimaryContext {
        return this.getRuleContext(0, PathPrimaryContext)!;
    }
    public graphPatternQuantifier(): GraphPatternQuantifierContext {
        return this.getRuleContext(0, GraphPatternQuantifierContext)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPfQuantifiedPathPrimary) {
             listener.enterPfQuantifiedPathPrimary(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPfQuantifiedPathPrimary) {
             listener.exitPfQuantifiedPathPrimary(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPfQuantifiedPathPrimary) {
            return visitor.visitPfQuantifiedPathPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PfQuestionedPathPrimaryContext extends PathFactorContext {
    public constructor(ctx: PathFactorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public pathPrimary(): PathPrimaryContext {
        return this.getRuleContext(0, PathPrimaryContext)!;
    }
    public QUESTION_MARK(): antlr.TerminalNode {
        return this.getToken(GQLParser.QUESTION_MARK, 0)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPfQuestionedPathPrimary) {
             listener.enterPfQuestionedPathPrimary(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPfQuestionedPathPrimary) {
             listener.exitPfQuestionedPathPrimary(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPfQuestionedPathPrimary) {
            return visitor.visitPfQuestionedPathPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_pathPrimary;
    }
    public override copyFrom(ctx: PathPrimaryContext): void {
        super.copyFrom(ctx);
    }
}
export class PpElementPatternContext extends PathPrimaryContext {
    public constructor(ctx: PathPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public elementPattern(): ElementPatternContext {
        return this.getRuleContext(0, ElementPatternContext)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPpElementPattern) {
             listener.enterPpElementPattern(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPpElementPattern) {
             listener.exitPpElementPattern(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPpElementPattern) {
            return visitor.visitPpElementPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PpParenthesizedPathPatternExpressionContext extends PathPrimaryContext {
    public constructor(ctx: PathPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public parenthesizedPathPatternExpression(): ParenthesizedPathPatternExpressionContext {
        return this.getRuleContext(0, ParenthesizedPathPatternExpressionContext)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPpParenthesizedPathPatternExpression) {
             listener.enterPpParenthesizedPathPatternExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPpParenthesizedPathPatternExpression) {
             listener.exitPpParenthesizedPathPatternExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPpParenthesizedPathPatternExpression) {
            return visitor.visitPpParenthesizedPathPatternExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PpSimplifiedPathPatternExpressionContext extends PathPrimaryContext {
    public constructor(ctx: PathPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public simplifiedPathPatternExpression(): SimplifiedPathPatternExpressionContext {
        return this.getRuleContext(0, SimplifiedPathPatternExpressionContext)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPpSimplifiedPathPatternExpression) {
             listener.enterPpSimplifiedPathPatternExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPpSimplifiedPathPatternExpression) {
             listener.exitPpSimplifiedPathPatternExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPpSimplifiedPathPatternExpression) {
            return visitor.visitPpSimplifiedPathPatternExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElementPatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nodePattern(): NodePatternContext | null {
        return this.getRuleContext(0, NodePatternContext);
    }
    public edgePattern(): EdgePatternContext | null {
        return this.getRuleContext(0, EdgePatternContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_elementPattern;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterElementPattern) {
             listener.enterElementPattern(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitElementPattern) {
             listener.exitElementPattern(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitElementPattern) {
            return visitor.visitElementPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NodePatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public elementPatternFiller(): ElementPatternFillerContext {
        return this.getRuleContext(0, ElementPatternFillerContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nodePattern;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNodePattern) {
             listener.enterNodePattern(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNodePattern) {
             listener.exitNodePattern(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNodePattern) {
            return visitor.visitNodePattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElementPatternFillerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public elementVariableDeclaration(): ElementVariableDeclarationContext | null {
        return this.getRuleContext(0, ElementVariableDeclarationContext);
    }
    public isLabelExpression(): IsLabelExpressionContext | null {
        return this.getRuleContext(0, IsLabelExpressionContext);
    }
    public elementPatternPredicate(): ElementPatternPredicateContext | null {
        return this.getRuleContext(0, ElementPatternPredicateContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_elementPatternFiller;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterElementPatternFiller) {
             listener.enterElementPatternFiller(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitElementPatternFiller) {
             listener.exitElementPatternFiller(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitElementPatternFiller) {
            return visitor.visitElementPatternFiller(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElementVariableDeclarationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public elementVariable(): ElementVariableContext {
        return this.getRuleContext(0, ElementVariableContext)!;
    }
    public TEMP(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TEMP, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_elementVariableDeclaration;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterElementVariableDeclaration) {
             listener.enterElementVariableDeclaration(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitElementVariableDeclaration) {
             listener.exitElementVariableDeclaration(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitElementVariableDeclaration) {
            return visitor.visitElementVariableDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IsLabelExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public isOrColon(): IsOrColonContext {
        return this.getRuleContext(0, IsOrColonContext)!;
    }
    public labelExpression(): LabelExpressionContext {
        return this.getRuleContext(0, LabelExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_isLabelExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterIsLabelExpression) {
             listener.enterIsLabelExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitIsLabelExpression) {
             listener.exitIsLabelExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitIsLabelExpression) {
            return visitor.visitIsLabelExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IsOrColonContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.IS, 0);
    }
    public COLON(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.COLON, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_isOrColon;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterIsOrColon) {
             listener.enterIsOrColon(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitIsOrColon) {
             listener.exitIsOrColon(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitIsOrColon) {
            return visitor.visitIsOrColon(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElementPatternPredicateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public elementPatternWhereClause(): ElementPatternWhereClauseContext | null {
        return this.getRuleContext(0, ElementPatternWhereClauseContext);
    }
    public elementPropertySpecification(): ElementPropertySpecificationContext | null {
        return this.getRuleContext(0, ElementPropertySpecificationContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_elementPatternPredicate;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterElementPatternPredicate) {
             listener.enterElementPatternPredicate(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitElementPatternPredicate) {
             listener.exitElementPatternPredicate(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitElementPatternPredicate) {
            return visitor.visitElementPatternPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElementPatternWhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(GQLParser.WHERE, 0)!;
    }
    public searchCondition(): SearchConditionContext {
        return this.getRuleContext(0, SearchConditionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_elementPatternWhereClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterElementPatternWhereClause) {
             listener.enterElementPatternWhereClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitElementPatternWhereClause) {
             listener.exitElementPatternWhereClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitElementPatternWhereClause) {
            return visitor.visitElementPatternWhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElementPropertySpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_BRACE(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_BRACE, 0)!;
    }
    public propertyKeyValuePairList(): PropertyKeyValuePairListContext {
        return this.getRuleContext(0, PropertyKeyValuePairListContext)!;
    }
    public RIGHT_BRACE(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_BRACE, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_elementPropertySpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterElementPropertySpecification) {
             listener.enterElementPropertySpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitElementPropertySpecification) {
             listener.exitElementPropertySpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitElementPropertySpecification) {
            return visitor.visitElementPropertySpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyKeyValuePairListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public propertyKeyValuePair(): PropertyKeyValuePairContext[];
    public propertyKeyValuePair(i: number): PropertyKeyValuePairContext | null;
    public propertyKeyValuePair(i?: number): PropertyKeyValuePairContext[] | PropertyKeyValuePairContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyKeyValuePairContext);
        }

        return this.getRuleContext(i, PropertyKeyValuePairContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_propertyKeyValuePairList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPropertyKeyValuePairList) {
             listener.enterPropertyKeyValuePairList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPropertyKeyValuePairList) {
             listener.exitPropertyKeyValuePairList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPropertyKeyValuePairList) {
            return visitor.visitPropertyKeyValuePairList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyKeyValuePairContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public propertyName(): PropertyNameContext {
        return this.getRuleContext(0, PropertyNameContext)!;
    }
    public COLON(): antlr.TerminalNode {
        return this.getToken(GQLParser.COLON, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_propertyKeyValuePair;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPropertyKeyValuePair) {
             listener.enterPropertyKeyValuePair(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPropertyKeyValuePair) {
             listener.exitPropertyKeyValuePair(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPropertyKeyValuePair) {
            return visitor.visitPropertyKeyValuePair(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EdgePatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fullEdgePattern(): FullEdgePatternContext | null {
        return this.getRuleContext(0, FullEdgePatternContext);
    }
    public abbreviatedEdgePattern(): AbbreviatedEdgePatternContext | null {
        return this.getRuleContext(0, AbbreviatedEdgePatternContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_edgePattern;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEdgePattern) {
             listener.enterEdgePattern(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEdgePattern) {
             listener.exitEdgePattern(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEdgePattern) {
            return visitor.visitEdgePattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FullEdgePatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fullEdgePointingLeft(): FullEdgePointingLeftContext | null {
        return this.getRuleContext(0, FullEdgePointingLeftContext);
    }
    public fullEdgeUndirected(): FullEdgeUndirectedContext | null {
        return this.getRuleContext(0, FullEdgeUndirectedContext);
    }
    public fullEdgePointingRight(): FullEdgePointingRightContext | null {
        return this.getRuleContext(0, FullEdgePointingRightContext);
    }
    public fullEdgeLeftOrUndirected(): FullEdgeLeftOrUndirectedContext | null {
        return this.getRuleContext(0, FullEdgeLeftOrUndirectedContext);
    }
    public fullEdgeUndirectedOrRight(): FullEdgeUndirectedOrRightContext | null {
        return this.getRuleContext(0, FullEdgeUndirectedOrRightContext);
    }
    public fullEdgeLeftOrRight(): FullEdgeLeftOrRightContext | null {
        return this.getRuleContext(0, FullEdgeLeftOrRightContext);
    }
    public fullEdgeAnyDirection(): FullEdgeAnyDirectionContext | null {
        return this.getRuleContext(0, FullEdgeAnyDirectionContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_fullEdgePattern;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFullEdgePattern) {
             listener.enterFullEdgePattern(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFullEdgePattern) {
             listener.exitFullEdgePattern(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFullEdgePattern) {
            return visitor.visitFullEdgePattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FullEdgePointingLeftContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_ARROW_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_ARROW_BRACKET, 0)!;
    }
    public elementPatternFiller(): ElementPatternFillerContext {
        return this.getRuleContext(0, ElementPatternFillerContext)!;
    }
    public RIGHT_BRACKET_MINUS(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_BRACKET_MINUS, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_fullEdgePointingLeft;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFullEdgePointingLeft) {
             listener.enterFullEdgePointingLeft(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFullEdgePointingLeft) {
             listener.exitFullEdgePointingLeft(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFullEdgePointingLeft) {
            return visitor.visitFullEdgePointingLeft(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FullEdgeUndirectedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TILDE_LEFT_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.TILDE_LEFT_BRACKET, 0)!;
    }
    public elementPatternFiller(): ElementPatternFillerContext {
        return this.getRuleContext(0, ElementPatternFillerContext)!;
    }
    public RIGHT_BRACKET_TILDE(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_BRACKET_TILDE, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_fullEdgeUndirected;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFullEdgeUndirected) {
             listener.enterFullEdgeUndirected(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFullEdgeUndirected) {
             listener.exitFullEdgeUndirected(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFullEdgeUndirected) {
            return visitor.visitFullEdgeUndirected(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FullEdgePointingRightContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MINUS_LEFT_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.MINUS_LEFT_BRACKET, 0)!;
    }
    public elementPatternFiller(): ElementPatternFillerContext {
        return this.getRuleContext(0, ElementPatternFillerContext)!;
    }
    public BRACKET_RIGHT_ARROW(): antlr.TerminalNode {
        return this.getToken(GQLParser.BRACKET_RIGHT_ARROW, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_fullEdgePointingRight;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFullEdgePointingRight) {
             listener.enterFullEdgePointingRight(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFullEdgePointingRight) {
             listener.exitFullEdgePointingRight(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFullEdgePointingRight) {
            return visitor.visitFullEdgePointingRight(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FullEdgeLeftOrUndirectedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_ARROW_TILDE_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_ARROW_TILDE_BRACKET, 0)!;
    }
    public elementPatternFiller(): ElementPatternFillerContext {
        return this.getRuleContext(0, ElementPatternFillerContext)!;
    }
    public RIGHT_BRACKET_TILDE(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_BRACKET_TILDE, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_fullEdgeLeftOrUndirected;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFullEdgeLeftOrUndirected) {
             listener.enterFullEdgeLeftOrUndirected(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFullEdgeLeftOrUndirected) {
             listener.exitFullEdgeLeftOrUndirected(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFullEdgeLeftOrUndirected) {
            return visitor.visitFullEdgeLeftOrUndirected(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FullEdgeUndirectedOrRightContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TILDE_LEFT_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.TILDE_LEFT_BRACKET, 0)!;
    }
    public elementPatternFiller(): ElementPatternFillerContext {
        return this.getRuleContext(0, ElementPatternFillerContext)!;
    }
    public BRACKET_TILDE_RIGHT_ARROW(): antlr.TerminalNode {
        return this.getToken(GQLParser.BRACKET_TILDE_RIGHT_ARROW, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_fullEdgeUndirectedOrRight;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFullEdgeUndirectedOrRight) {
             listener.enterFullEdgeUndirectedOrRight(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFullEdgeUndirectedOrRight) {
             listener.exitFullEdgeUndirectedOrRight(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFullEdgeUndirectedOrRight) {
            return visitor.visitFullEdgeUndirectedOrRight(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FullEdgeLeftOrRightContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_ARROW_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_ARROW_BRACKET, 0)!;
    }
    public elementPatternFiller(): ElementPatternFillerContext {
        return this.getRuleContext(0, ElementPatternFillerContext)!;
    }
    public BRACKET_RIGHT_ARROW(): antlr.TerminalNode {
        return this.getToken(GQLParser.BRACKET_RIGHT_ARROW, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_fullEdgeLeftOrRight;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFullEdgeLeftOrRight) {
             listener.enterFullEdgeLeftOrRight(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFullEdgeLeftOrRight) {
             listener.exitFullEdgeLeftOrRight(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFullEdgeLeftOrRight) {
            return visitor.visitFullEdgeLeftOrRight(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FullEdgeAnyDirectionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MINUS_LEFT_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.MINUS_LEFT_BRACKET, 0)!;
    }
    public elementPatternFiller(): ElementPatternFillerContext {
        return this.getRuleContext(0, ElementPatternFillerContext)!;
    }
    public RIGHT_BRACKET_MINUS(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_BRACKET_MINUS, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_fullEdgeAnyDirection;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFullEdgeAnyDirection) {
             listener.enterFullEdgeAnyDirection(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFullEdgeAnyDirection) {
             listener.exitFullEdgeAnyDirection(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFullEdgeAnyDirection) {
            return visitor.visitFullEdgeAnyDirection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AbbreviatedEdgePatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_ARROW(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_ARROW, 0);
    }
    public TILDE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TILDE, 0);
    }
    public RIGHT_ARROW(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_ARROW, 0);
    }
    public LEFT_ARROW_TILDE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_ARROW_TILDE, 0);
    }
    public TILDE_RIGHT_ARROW(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TILDE_RIGHT_ARROW, 0);
    }
    public LEFT_MINUS_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_MINUS_RIGHT, 0);
    }
    public MINUS_SIGN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.MINUS_SIGN, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_abbreviatedEdgePattern;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterAbbreviatedEdgePattern) {
             listener.enterAbbreviatedEdgePattern(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitAbbreviatedEdgePattern) {
             listener.exitAbbreviatedEdgePattern(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitAbbreviatedEdgePattern) {
            return visitor.visitAbbreviatedEdgePattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ParenthesizedPathPatternExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public pathPatternExpression(): PathPatternExpressionContext {
        return this.getRuleContext(0, PathPatternExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public subpathVariableDeclaration(): SubpathVariableDeclarationContext | null {
        return this.getRuleContext(0, SubpathVariableDeclarationContext);
    }
    public pathModePrefix(): PathModePrefixContext | null {
        return this.getRuleContext(0, PathModePrefixContext);
    }
    public parenthesizedPathPatternWhereClause(): ParenthesizedPathPatternWhereClauseContext | null {
        return this.getRuleContext(0, ParenthesizedPathPatternWhereClauseContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_parenthesizedPathPatternExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterParenthesizedPathPatternExpression) {
             listener.enterParenthesizedPathPatternExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitParenthesizedPathPatternExpression) {
             listener.exitParenthesizedPathPatternExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitParenthesizedPathPatternExpression) {
            return visitor.visitParenthesizedPathPatternExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubpathVariableDeclarationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public subpathVariable(): SubpathVariableContext {
        return this.getRuleContext(0, SubpathVariableContext)!;
    }
    public EQUALS_OPERATOR(): antlr.TerminalNode {
        return this.getToken(GQLParser.EQUALS_OPERATOR, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_subpathVariableDeclaration;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSubpathVariableDeclaration) {
             listener.enterSubpathVariableDeclaration(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSubpathVariableDeclaration) {
             listener.exitSubpathVariableDeclaration(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSubpathVariableDeclaration) {
            return visitor.visitSubpathVariableDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ParenthesizedPathPatternWhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(GQLParser.WHERE, 0)!;
    }
    public searchCondition(): SearchConditionContext {
        return this.getRuleContext(0, SearchConditionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_parenthesizedPathPatternWhereClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterParenthesizedPathPatternWhereClause) {
             listener.enterParenthesizedPathPatternWhereClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitParenthesizedPathPatternWhereClause) {
             listener.exitParenthesizedPathPatternWhereClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitParenthesizedPathPatternWhereClause) {
            return visitor.visitParenthesizedPathPatternWhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LabelExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_labelExpression;
    }
    public override copyFrom(ctx: LabelExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class LabelExpressionNegationContext extends LabelExpressionContext {
    public constructor(ctx: LabelExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXCLAMATION_MARK(): antlr.TerminalNode {
        return this.getToken(GQLParser.EXCLAMATION_MARK, 0)!;
    }
    public labelExpression(): LabelExpressionContext {
        return this.getRuleContext(0, LabelExpressionContext)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLabelExpressionNegation) {
             listener.enterLabelExpressionNegation(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLabelExpressionNegation) {
             listener.exitLabelExpressionNegation(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLabelExpressionNegation) {
            return visitor.visitLabelExpressionNegation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LabelExpressionNameContext extends LabelExpressionContext {
    public constructor(ctx: LabelExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public labelName(): LabelNameContext {
        return this.getRuleContext(0, LabelNameContext)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLabelExpressionName) {
             listener.enterLabelExpressionName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLabelExpressionName) {
             listener.exitLabelExpressionName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLabelExpressionName) {
            return visitor.visitLabelExpressionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LabelExpressionWildcardContext extends LabelExpressionContext {
    public constructor(ctx: LabelExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PERCENT(): antlr.TerminalNode {
        return this.getToken(GQLParser.PERCENT, 0)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLabelExpressionWildcard) {
             listener.enterLabelExpressionWildcard(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLabelExpressionWildcard) {
             listener.exitLabelExpressionWildcard(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLabelExpressionWildcard) {
            return visitor.visitLabelExpressionWildcard(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LabelExpressionParenthesizedContext extends LabelExpressionContext {
    public constructor(ctx: LabelExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public labelExpression(): LabelExpressionContext {
        return this.getRuleContext(0, LabelExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLabelExpressionParenthesized) {
             listener.enterLabelExpressionParenthesized(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLabelExpressionParenthesized) {
             listener.exitLabelExpressionParenthesized(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLabelExpressionParenthesized) {
            return visitor.visitLabelExpressionParenthesized(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LabelExpressionConjunctionContext extends LabelExpressionContext {
    public constructor(ctx: LabelExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public labelExpression(): LabelExpressionContext[];
    public labelExpression(i: number): LabelExpressionContext | null;
    public labelExpression(i?: number): LabelExpressionContext[] | LabelExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LabelExpressionContext);
        }

        return this.getRuleContext(i, LabelExpressionContext);
    }
    public AMPERSAND(): antlr.TerminalNode {
        return this.getToken(GQLParser.AMPERSAND, 0)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLabelExpressionConjunction) {
             listener.enterLabelExpressionConjunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLabelExpressionConjunction) {
             listener.exitLabelExpressionConjunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLabelExpressionConjunction) {
            return visitor.visitLabelExpressionConjunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LabelExpressionDisjunctionContext extends LabelExpressionContext {
    public constructor(ctx: LabelExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public labelExpression(): LabelExpressionContext[];
    public labelExpression(i: number): LabelExpressionContext | null;
    public labelExpression(i?: number): LabelExpressionContext[] | LabelExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LabelExpressionContext);
        }

        return this.getRuleContext(i, LabelExpressionContext);
    }
    public VERTICAL_BAR(): antlr.TerminalNode {
        return this.getToken(GQLParser.VERTICAL_BAR, 0)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLabelExpressionDisjunction) {
             listener.enterLabelExpressionDisjunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLabelExpressionDisjunction) {
             listener.exitLabelExpressionDisjunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLabelExpressionDisjunction) {
            return visitor.visitLabelExpressionDisjunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathVariableReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bindingVariableReference(): BindingVariableReferenceContext {
        return this.getRuleContext(0, BindingVariableReferenceContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_pathVariableReference;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPathVariableReference) {
             listener.enterPathVariableReference(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPathVariableReference) {
             listener.exitPathVariableReference(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPathVariableReference) {
            return visitor.visitPathVariableReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElementVariableReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bindingVariableReference(): BindingVariableReferenceContext {
        return this.getRuleContext(0, BindingVariableReferenceContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_elementVariableReference;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterElementVariableReference) {
             listener.enterElementVariableReference(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitElementVariableReference) {
             listener.exitElementVariableReference(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitElementVariableReference) {
            return visitor.visitElementVariableReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GraphPatternQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ASTERISK, 0);
    }
    public PLUS_SIGN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PLUS_SIGN, 0);
    }
    public fixedQuantifier(): FixedQuantifierContext | null {
        return this.getRuleContext(0, FixedQuantifierContext);
    }
    public generalQuantifier(): GeneralQuantifierContext | null {
        return this.getRuleContext(0, GeneralQuantifierContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_graphPatternQuantifier;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGraphPatternQuantifier) {
             listener.enterGraphPatternQuantifier(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGraphPatternQuantifier) {
             listener.exitGraphPatternQuantifier(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGraphPatternQuantifier) {
            return visitor.visitGraphPatternQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FixedQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_BRACE(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_BRACE, 0)!;
    }
    public unsignedInteger(): UnsignedIntegerContext {
        return this.getRuleContext(0, UnsignedIntegerContext)!;
    }
    public RIGHT_BRACE(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_BRACE, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_fixedQuantifier;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFixedQuantifier) {
             listener.enterFixedQuantifier(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFixedQuantifier) {
             listener.exitFixedQuantifier(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFixedQuantifier) {
            return visitor.visitFixedQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GeneralQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_BRACE(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_BRACE, 0)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(GQLParser.COMMA, 0)!;
    }
    public RIGHT_BRACE(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_BRACE, 0)!;
    }
    public lowerBound(): LowerBoundContext | null {
        return this.getRuleContext(0, LowerBoundContext);
    }
    public upperBound(): UpperBoundContext | null {
        return this.getRuleContext(0, UpperBoundContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_generalQuantifier;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGeneralQuantifier) {
             listener.enterGeneralQuantifier(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGeneralQuantifier) {
             listener.exitGeneralQuantifier(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGeneralQuantifier) {
            return visitor.visitGeneralQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LowerBoundContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unsignedInteger(): UnsignedIntegerContext {
        return this.getRuleContext(0, UnsignedIntegerContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_lowerBound;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLowerBound) {
             listener.enterLowerBound(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLowerBound) {
             listener.exitLowerBound(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLowerBound) {
            return visitor.visitLowerBound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpperBoundContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unsignedInteger(): UnsignedIntegerContext {
        return this.getRuleContext(0, UnsignedIntegerContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_upperBound;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterUpperBound) {
             listener.enterUpperBound(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitUpperBound) {
             listener.exitUpperBound(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitUpperBound) {
            return visitor.visitUpperBound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedPathPatternExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simplifiedDefaultingLeft(): SimplifiedDefaultingLeftContext | null {
        return this.getRuleContext(0, SimplifiedDefaultingLeftContext);
    }
    public simplifiedDefaultingUndirected(): SimplifiedDefaultingUndirectedContext | null {
        return this.getRuleContext(0, SimplifiedDefaultingUndirectedContext);
    }
    public simplifiedDefaultingRight(): SimplifiedDefaultingRightContext | null {
        return this.getRuleContext(0, SimplifiedDefaultingRightContext);
    }
    public simplifiedDefaultingLeftOrUndirected(): SimplifiedDefaultingLeftOrUndirectedContext | null {
        return this.getRuleContext(0, SimplifiedDefaultingLeftOrUndirectedContext);
    }
    public simplifiedDefaultingUndirectedOrRight(): SimplifiedDefaultingUndirectedOrRightContext | null {
        return this.getRuleContext(0, SimplifiedDefaultingUndirectedOrRightContext);
    }
    public simplifiedDefaultingLeftOrRight(): SimplifiedDefaultingLeftOrRightContext | null {
        return this.getRuleContext(0, SimplifiedDefaultingLeftOrRightContext);
    }
    public simplifiedDefaultingAnyDirection(): SimplifiedDefaultingAnyDirectionContext | null {
        return this.getRuleContext(0, SimplifiedDefaultingAnyDirectionContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedPathPatternExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedPathPatternExpression) {
             listener.enterSimplifiedPathPatternExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedPathPatternExpression) {
             listener.exitSimplifiedPathPatternExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedPathPatternExpression) {
            return visitor.visitSimplifiedPathPatternExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedDefaultingLeftContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_MINUS_SLASH(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_MINUS_SLASH, 0)!;
    }
    public simplifiedContents(): SimplifiedContentsContext {
        return this.getRuleContext(0, SimplifiedContentsContext)!;
    }
    public SLASH_MINUS(): antlr.TerminalNode {
        return this.getToken(GQLParser.SLASH_MINUS, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedDefaultingLeft;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedDefaultingLeft) {
             listener.enterSimplifiedDefaultingLeft(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedDefaultingLeft) {
             listener.exitSimplifiedDefaultingLeft(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedDefaultingLeft) {
            return visitor.visitSimplifiedDefaultingLeft(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedDefaultingUndirectedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TILDE_SLASH(): antlr.TerminalNode {
        return this.getToken(GQLParser.TILDE_SLASH, 0)!;
    }
    public simplifiedContents(): SimplifiedContentsContext {
        return this.getRuleContext(0, SimplifiedContentsContext)!;
    }
    public SLASH_TILDE(): antlr.TerminalNode {
        return this.getToken(GQLParser.SLASH_TILDE, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedDefaultingUndirected;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedDefaultingUndirected) {
             listener.enterSimplifiedDefaultingUndirected(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedDefaultingUndirected) {
             listener.exitSimplifiedDefaultingUndirected(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedDefaultingUndirected) {
            return visitor.visitSimplifiedDefaultingUndirected(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedDefaultingRightContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MINUS_SLASH(): antlr.TerminalNode {
        return this.getToken(GQLParser.MINUS_SLASH, 0)!;
    }
    public simplifiedContents(): SimplifiedContentsContext {
        return this.getRuleContext(0, SimplifiedContentsContext)!;
    }
    public SLASH_MINUS_RIGHT(): antlr.TerminalNode {
        return this.getToken(GQLParser.SLASH_MINUS_RIGHT, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedDefaultingRight;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedDefaultingRight) {
             listener.enterSimplifiedDefaultingRight(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedDefaultingRight) {
             listener.exitSimplifiedDefaultingRight(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedDefaultingRight) {
            return visitor.visitSimplifiedDefaultingRight(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedDefaultingLeftOrUndirectedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_TILDE_SLASH(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_TILDE_SLASH, 0)!;
    }
    public simplifiedContents(): SimplifiedContentsContext {
        return this.getRuleContext(0, SimplifiedContentsContext)!;
    }
    public SLASH_TILDE(): antlr.TerminalNode {
        return this.getToken(GQLParser.SLASH_TILDE, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedDefaultingLeftOrUndirected;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedDefaultingLeftOrUndirected) {
             listener.enterSimplifiedDefaultingLeftOrUndirected(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedDefaultingLeftOrUndirected) {
             listener.exitSimplifiedDefaultingLeftOrUndirected(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedDefaultingLeftOrUndirected) {
            return visitor.visitSimplifiedDefaultingLeftOrUndirected(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedDefaultingUndirectedOrRightContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TILDE_SLASH(): antlr.TerminalNode {
        return this.getToken(GQLParser.TILDE_SLASH, 0)!;
    }
    public simplifiedContents(): SimplifiedContentsContext {
        return this.getRuleContext(0, SimplifiedContentsContext)!;
    }
    public SLASH_TILDE_RIGHT(): antlr.TerminalNode {
        return this.getToken(GQLParser.SLASH_TILDE_RIGHT, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedDefaultingUndirectedOrRight;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedDefaultingUndirectedOrRight) {
             listener.enterSimplifiedDefaultingUndirectedOrRight(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedDefaultingUndirectedOrRight) {
             listener.exitSimplifiedDefaultingUndirectedOrRight(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedDefaultingUndirectedOrRight) {
            return visitor.visitSimplifiedDefaultingUndirectedOrRight(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedDefaultingLeftOrRightContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_MINUS_SLASH(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_MINUS_SLASH, 0)!;
    }
    public simplifiedContents(): SimplifiedContentsContext {
        return this.getRuleContext(0, SimplifiedContentsContext)!;
    }
    public SLASH_MINUS_RIGHT(): antlr.TerminalNode {
        return this.getToken(GQLParser.SLASH_MINUS_RIGHT, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedDefaultingLeftOrRight;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedDefaultingLeftOrRight) {
             listener.enterSimplifiedDefaultingLeftOrRight(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedDefaultingLeftOrRight) {
             listener.exitSimplifiedDefaultingLeftOrRight(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedDefaultingLeftOrRight) {
            return visitor.visitSimplifiedDefaultingLeftOrRight(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedDefaultingAnyDirectionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MINUS_SLASH(): antlr.TerminalNode {
        return this.getToken(GQLParser.MINUS_SLASH, 0)!;
    }
    public simplifiedContents(): SimplifiedContentsContext {
        return this.getRuleContext(0, SimplifiedContentsContext)!;
    }
    public SLASH_MINUS(): antlr.TerminalNode {
        return this.getToken(GQLParser.SLASH_MINUS, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedDefaultingAnyDirection;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedDefaultingAnyDirection) {
             listener.enterSimplifiedDefaultingAnyDirection(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedDefaultingAnyDirection) {
             listener.exitSimplifiedDefaultingAnyDirection(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedDefaultingAnyDirection) {
            return visitor.visitSimplifiedDefaultingAnyDirection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedContentsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simplifiedTerm(): SimplifiedTermContext | null {
        return this.getRuleContext(0, SimplifiedTermContext);
    }
    public simplifiedPathUnion(): SimplifiedPathUnionContext | null {
        return this.getRuleContext(0, SimplifiedPathUnionContext);
    }
    public simplifiedMultisetAlternation(): SimplifiedMultisetAlternationContext | null {
        return this.getRuleContext(0, SimplifiedMultisetAlternationContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedContents;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedContents) {
             listener.enterSimplifiedContents(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedContents) {
             listener.exitSimplifiedContents(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedContents) {
            return visitor.visitSimplifiedContents(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedPathUnionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simplifiedTerm(): SimplifiedTermContext[];
    public simplifiedTerm(i: number): SimplifiedTermContext | null;
    public simplifiedTerm(i?: number): SimplifiedTermContext[] | SimplifiedTermContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SimplifiedTermContext);
        }

        return this.getRuleContext(i, SimplifiedTermContext);
    }
    public VERTICAL_BAR(): antlr.TerminalNode[];
    public VERTICAL_BAR(i: number): antlr.TerminalNode | null;
    public VERTICAL_BAR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.VERTICAL_BAR);
    	} else {
    		return this.getToken(GQLParser.VERTICAL_BAR, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedPathUnion;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedPathUnion) {
             listener.enterSimplifiedPathUnion(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedPathUnion) {
             listener.exitSimplifiedPathUnion(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedPathUnion) {
            return visitor.visitSimplifiedPathUnion(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedMultisetAlternationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simplifiedTerm(): SimplifiedTermContext[];
    public simplifiedTerm(i: number): SimplifiedTermContext | null;
    public simplifiedTerm(i?: number): SimplifiedTermContext[] | SimplifiedTermContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SimplifiedTermContext);
        }

        return this.getRuleContext(i, SimplifiedTermContext);
    }
    public MULTISET_ALTERNATION_OPERATOR(): antlr.TerminalNode[];
    public MULTISET_ALTERNATION_OPERATOR(i: number): antlr.TerminalNode | null;
    public MULTISET_ALTERNATION_OPERATOR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.MULTISET_ALTERNATION_OPERATOR);
    	} else {
    		return this.getToken(GQLParser.MULTISET_ALTERNATION_OPERATOR, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedMultisetAlternation;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedMultisetAlternation) {
             listener.enterSimplifiedMultisetAlternation(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedMultisetAlternation) {
             listener.exitSimplifiedMultisetAlternation(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedMultisetAlternation) {
            return visitor.visitSimplifiedMultisetAlternation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedTermContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedTerm;
    }
    public override copyFrom(ctx: SimplifiedTermContext): void {
        super.copyFrom(ctx);
    }
}
export class SimplifiedFactorLowLabelContext extends SimplifiedTermContext {
    public constructor(ctx: SimplifiedTermContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public simplifiedFactorLow(): SimplifiedFactorLowContext {
        return this.getRuleContext(0, SimplifiedFactorLowContext)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedFactorLowLabel) {
             listener.enterSimplifiedFactorLowLabel(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedFactorLowLabel) {
             listener.exitSimplifiedFactorLowLabel(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedFactorLowLabel) {
            return visitor.visitSimplifiedFactorLowLabel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimplifiedConcatenationLabelContext extends SimplifiedTermContext {
    public constructor(ctx: SimplifiedTermContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public simplifiedTerm(): SimplifiedTermContext {
        return this.getRuleContext(0, SimplifiedTermContext)!;
    }
    public simplifiedFactorLow(): SimplifiedFactorLowContext {
        return this.getRuleContext(0, SimplifiedFactorLowContext)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedConcatenationLabel) {
             listener.enterSimplifiedConcatenationLabel(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedConcatenationLabel) {
             listener.exitSimplifiedConcatenationLabel(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedConcatenationLabel) {
            return visitor.visitSimplifiedConcatenationLabel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedFactorLowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedFactorLow;
    }
    public override copyFrom(ctx: SimplifiedFactorLowContext): void {
        super.copyFrom(ctx);
    }
}
export class SimplifiedFactorHighLabelContext extends SimplifiedFactorLowContext {
    public constructor(ctx: SimplifiedFactorLowContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public simplifiedFactorHigh(): SimplifiedFactorHighContext {
        return this.getRuleContext(0, SimplifiedFactorHighContext)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedFactorHighLabel) {
             listener.enterSimplifiedFactorHighLabel(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedFactorHighLabel) {
             listener.exitSimplifiedFactorHighLabel(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedFactorHighLabel) {
            return visitor.visitSimplifiedFactorHighLabel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimplifiedConjunctionLabelContext extends SimplifiedFactorLowContext {
    public constructor(ctx: SimplifiedFactorLowContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public simplifiedFactorLow(): SimplifiedFactorLowContext {
        return this.getRuleContext(0, SimplifiedFactorLowContext)!;
    }
    public AMPERSAND(): antlr.TerminalNode {
        return this.getToken(GQLParser.AMPERSAND, 0)!;
    }
    public simplifiedFactorHigh(): SimplifiedFactorHighContext {
        return this.getRuleContext(0, SimplifiedFactorHighContext)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedConjunctionLabel) {
             listener.enterSimplifiedConjunctionLabel(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedConjunctionLabel) {
             listener.exitSimplifiedConjunctionLabel(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedConjunctionLabel) {
            return visitor.visitSimplifiedConjunctionLabel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedFactorHighContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simplifiedTertiary(): SimplifiedTertiaryContext | null {
        return this.getRuleContext(0, SimplifiedTertiaryContext);
    }
    public simplifiedQuantified(): SimplifiedQuantifiedContext | null {
        return this.getRuleContext(0, SimplifiedQuantifiedContext);
    }
    public simplifiedQuestioned(): SimplifiedQuestionedContext | null {
        return this.getRuleContext(0, SimplifiedQuestionedContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedFactorHigh;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedFactorHigh) {
             listener.enterSimplifiedFactorHigh(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedFactorHigh) {
             listener.exitSimplifiedFactorHigh(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedFactorHigh) {
            return visitor.visitSimplifiedFactorHigh(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedQuantifiedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simplifiedTertiary(): SimplifiedTertiaryContext {
        return this.getRuleContext(0, SimplifiedTertiaryContext)!;
    }
    public graphPatternQuantifier(): GraphPatternQuantifierContext {
        return this.getRuleContext(0, GraphPatternQuantifierContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedQuantified;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedQuantified) {
             listener.enterSimplifiedQuantified(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedQuantified) {
             listener.exitSimplifiedQuantified(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedQuantified) {
            return visitor.visitSimplifiedQuantified(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedQuestionedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simplifiedTertiary(): SimplifiedTertiaryContext {
        return this.getRuleContext(0, SimplifiedTertiaryContext)!;
    }
    public QUESTION_MARK(): antlr.TerminalNode {
        return this.getToken(GQLParser.QUESTION_MARK, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedQuestioned;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedQuestioned) {
             listener.enterSimplifiedQuestioned(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedQuestioned) {
             listener.exitSimplifiedQuestioned(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedQuestioned) {
            return visitor.visitSimplifiedQuestioned(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedTertiaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simplifiedDirectionOverride(): SimplifiedDirectionOverrideContext | null {
        return this.getRuleContext(0, SimplifiedDirectionOverrideContext);
    }
    public simplifiedSecondary(): SimplifiedSecondaryContext | null {
        return this.getRuleContext(0, SimplifiedSecondaryContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedTertiary;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedTertiary) {
             listener.enterSimplifiedTertiary(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedTertiary) {
             listener.exitSimplifiedTertiary(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedTertiary) {
            return visitor.visitSimplifiedTertiary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedDirectionOverrideContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simplifiedOverrideLeft(): SimplifiedOverrideLeftContext | null {
        return this.getRuleContext(0, SimplifiedOverrideLeftContext);
    }
    public simplifiedOverrideUndirected(): SimplifiedOverrideUndirectedContext | null {
        return this.getRuleContext(0, SimplifiedOverrideUndirectedContext);
    }
    public simplifiedOverrideRight(): SimplifiedOverrideRightContext | null {
        return this.getRuleContext(0, SimplifiedOverrideRightContext);
    }
    public simplifiedOverrideLeftOrUndirected(): SimplifiedOverrideLeftOrUndirectedContext | null {
        return this.getRuleContext(0, SimplifiedOverrideLeftOrUndirectedContext);
    }
    public simplifiedOverrideUndirectedOrRight(): SimplifiedOverrideUndirectedOrRightContext | null {
        return this.getRuleContext(0, SimplifiedOverrideUndirectedOrRightContext);
    }
    public simplifiedOverrideLeftOrRight(): SimplifiedOverrideLeftOrRightContext | null {
        return this.getRuleContext(0, SimplifiedOverrideLeftOrRightContext);
    }
    public simplifiedOverrideAnyDirection(): SimplifiedOverrideAnyDirectionContext | null {
        return this.getRuleContext(0, SimplifiedOverrideAnyDirectionContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedDirectionOverride;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedDirectionOverride) {
             listener.enterSimplifiedDirectionOverride(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedDirectionOverride) {
             listener.exitSimplifiedDirectionOverride(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedDirectionOverride) {
            return visitor.visitSimplifiedDirectionOverride(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedOverrideLeftContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_ANGLE_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0)!;
    }
    public simplifiedSecondary(): SimplifiedSecondaryContext {
        return this.getRuleContext(0, SimplifiedSecondaryContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedOverrideLeft;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedOverrideLeft) {
             listener.enterSimplifiedOverrideLeft(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedOverrideLeft) {
             listener.exitSimplifiedOverrideLeft(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedOverrideLeft) {
            return visitor.visitSimplifiedOverrideLeft(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedOverrideUndirectedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TILDE(): antlr.TerminalNode {
        return this.getToken(GQLParser.TILDE, 0)!;
    }
    public simplifiedSecondary(): SimplifiedSecondaryContext {
        return this.getRuleContext(0, SimplifiedSecondaryContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedOverrideUndirected;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedOverrideUndirected) {
             listener.enterSimplifiedOverrideUndirected(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedOverrideUndirected) {
             listener.exitSimplifiedOverrideUndirected(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedOverrideUndirected) {
            return visitor.visitSimplifiedOverrideUndirected(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedOverrideRightContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simplifiedSecondary(): SimplifiedSecondaryContext {
        return this.getRuleContext(0, SimplifiedSecondaryContext)!;
    }
    public RIGHT_ANGLE_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedOverrideRight;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedOverrideRight) {
             listener.enterSimplifiedOverrideRight(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedOverrideRight) {
             listener.exitSimplifiedOverrideRight(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedOverrideRight) {
            return visitor.visitSimplifiedOverrideRight(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedOverrideLeftOrUndirectedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_ARROW_TILDE(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_ARROW_TILDE, 0)!;
    }
    public simplifiedSecondary(): SimplifiedSecondaryContext {
        return this.getRuleContext(0, SimplifiedSecondaryContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedOverrideLeftOrUndirected;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedOverrideLeftOrUndirected) {
             listener.enterSimplifiedOverrideLeftOrUndirected(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedOverrideLeftOrUndirected) {
             listener.exitSimplifiedOverrideLeftOrUndirected(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedOverrideLeftOrUndirected) {
            return visitor.visitSimplifiedOverrideLeftOrUndirected(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedOverrideUndirectedOrRightContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TILDE(): antlr.TerminalNode {
        return this.getToken(GQLParser.TILDE, 0)!;
    }
    public simplifiedSecondary(): SimplifiedSecondaryContext {
        return this.getRuleContext(0, SimplifiedSecondaryContext)!;
    }
    public RIGHT_ANGLE_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedOverrideUndirectedOrRight;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedOverrideUndirectedOrRight) {
             listener.enterSimplifiedOverrideUndirectedOrRight(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedOverrideUndirectedOrRight) {
             listener.exitSimplifiedOverrideUndirectedOrRight(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedOverrideUndirectedOrRight) {
            return visitor.visitSimplifiedOverrideUndirectedOrRight(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedOverrideLeftOrRightContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_ANGLE_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0)!;
    }
    public simplifiedSecondary(): SimplifiedSecondaryContext {
        return this.getRuleContext(0, SimplifiedSecondaryContext)!;
    }
    public RIGHT_ANGLE_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedOverrideLeftOrRight;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedOverrideLeftOrRight) {
             listener.enterSimplifiedOverrideLeftOrRight(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedOverrideLeftOrRight) {
             listener.exitSimplifiedOverrideLeftOrRight(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedOverrideLeftOrRight) {
            return visitor.visitSimplifiedOverrideLeftOrRight(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedOverrideAnyDirectionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MINUS_SIGN(): antlr.TerminalNode {
        return this.getToken(GQLParser.MINUS_SIGN, 0)!;
    }
    public simplifiedSecondary(): SimplifiedSecondaryContext {
        return this.getRuleContext(0, SimplifiedSecondaryContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedOverrideAnyDirection;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedOverrideAnyDirection) {
             listener.enterSimplifiedOverrideAnyDirection(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedOverrideAnyDirection) {
             listener.exitSimplifiedOverrideAnyDirection(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedOverrideAnyDirection) {
            return visitor.visitSimplifiedOverrideAnyDirection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedSecondaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simplifiedPrimary(): SimplifiedPrimaryContext | null {
        return this.getRuleContext(0, SimplifiedPrimaryContext);
    }
    public simplifiedNegation(): SimplifiedNegationContext | null {
        return this.getRuleContext(0, SimplifiedNegationContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedSecondary;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedSecondary) {
             listener.enterSimplifiedSecondary(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedSecondary) {
             listener.exitSimplifiedSecondary(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedSecondary) {
            return visitor.visitSimplifiedSecondary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedNegationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXCLAMATION_MARK(): antlr.TerminalNode {
        return this.getToken(GQLParser.EXCLAMATION_MARK, 0)!;
    }
    public simplifiedPrimary(): SimplifiedPrimaryContext {
        return this.getRuleContext(0, SimplifiedPrimaryContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedNegation;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedNegation) {
             listener.enterSimplifiedNegation(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedNegation) {
             listener.exitSimplifiedNegation(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedNegation) {
            return visitor.visitSimplifiedNegation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimplifiedPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public labelName(): LabelNameContext | null {
        return this.getRuleContext(0, LabelNameContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_PAREN, 0);
    }
    public simplifiedContents(): SimplifiedContentsContext | null {
        return this.getRuleContext(0, SimplifiedContentsContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simplifiedPrimary;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimplifiedPrimary) {
             listener.enterSimplifiedPrimary(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimplifiedPrimary) {
             listener.exitSimplifiedPrimary(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimplifiedPrimary) {
            return visitor.visitSimplifiedPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(GQLParser.WHERE, 0)!;
    }
    public searchCondition(): SearchConditionContext {
        return this.getRuleContext(0, SearchConditionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_whereClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterWhereClause) {
             listener.enterWhereClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitWhereClause) {
             listener.exitWhereClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitWhereClause) {
            return visitor.visitWhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class YieldClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public YIELD(): antlr.TerminalNode {
        return this.getToken(GQLParser.YIELD, 0)!;
    }
    public yieldItemList(): YieldItemListContext {
        return this.getRuleContext(0, YieldItemListContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_yieldClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterYieldClause) {
             listener.enterYieldClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitYieldClause) {
             listener.exitYieldClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitYieldClause) {
            return visitor.visitYieldClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class YieldItemListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public yieldItem(): YieldItemContext[];
    public yieldItem(i: number): YieldItemContext | null;
    public yieldItem(i?: number): YieldItemContext[] | YieldItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(YieldItemContext);
        }

        return this.getRuleContext(i, YieldItemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_yieldItemList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterYieldItemList) {
             listener.enterYieldItemList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitYieldItemList) {
             listener.exitYieldItemList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitYieldItemList) {
            return visitor.visitYieldItemList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class YieldItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public yieldItemName(): YieldItemNameContext | null {
        return this.getRuleContext(0, YieldItemNameContext);
    }
    public yieldItemAlias(): YieldItemAliasContext | null {
        return this.getRuleContext(0, YieldItemAliasContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_yieldItem;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterYieldItem) {
             listener.enterYieldItem(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitYieldItem) {
             listener.exitYieldItem(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitYieldItem) {
            return visitor.visitYieldItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class YieldItemNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fieldName(): FieldNameContext {
        return this.getRuleContext(0, FieldNameContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_yieldItemName;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterYieldItemName) {
             listener.enterYieldItemName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitYieldItemName) {
             listener.exitYieldItemName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitYieldItemName) {
            return visitor.visitYieldItemName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class YieldItemAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(GQLParser.AS, 0)!;
    }
    public bindingVariable(): BindingVariableContext {
        return this.getRuleContext(0, BindingVariableContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_yieldItemAlias;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterYieldItemAlias) {
             listener.enterYieldItemAlias(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitYieldItemAlias) {
             listener.exitYieldItemAlias(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitYieldItemAlias) {
            return visitor.visitYieldItemAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(GQLParser.GROUP, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(GQLParser.BY, 0)!;
    }
    public groupingElementList(): GroupingElementListContext {
        return this.getRuleContext(0, GroupingElementListContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_groupByClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGroupByClause) {
             listener.enterGroupByClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGroupByClause) {
             listener.exitGroupByClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGroupByClause) {
            return visitor.visitGroupByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingElementListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public groupingElement(): GroupingElementContext[];
    public groupingElement(i: number): GroupingElementContext | null;
    public groupingElement(i?: number): GroupingElementContext[] | GroupingElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingElementContext);
        }

        return this.getRuleContext(i, GroupingElementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public emptyGroupingSet(): EmptyGroupingSetContext | null {
        return this.getRuleContext(0, EmptyGroupingSetContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_groupingElementList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGroupingElementList) {
             listener.enterGroupingElementList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGroupingElementList) {
             listener.exitGroupingElementList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGroupingElementList) {
            return visitor.visitGroupingElementList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bindingVariableReference(): BindingVariableReferenceContext {
        return this.getRuleContext(0, BindingVariableReferenceContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_groupingElement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGroupingElement) {
             listener.enterGroupingElement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGroupingElement) {
             listener.exitGroupingElement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGroupingElement) {
            return visitor.visitGroupingElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EmptyGroupingSetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_emptyGroupingSet;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEmptyGroupingSet) {
             listener.enterEmptyGroupingSet(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEmptyGroupingSet) {
             listener.exitEmptyGroupingSet(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEmptyGroupingSet) {
            return visitor.visitEmptyGroupingSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(GQLParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(GQLParser.BY, 0)!;
    }
    public sortSpecificationList(): SortSpecificationListContext {
        return this.getRuleContext(0, SortSpecificationListContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_orderByClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterOrderByClause) {
             listener.enterOrderByClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitOrderByClause) {
             listener.exitOrderByClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitOrderByClause) {
            return visitor.visitOrderByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortSpecificationListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sortSpecification(): SortSpecificationContext[];
    public sortSpecification(i: number): SortSpecificationContext | null;
    public sortSpecification(i?: number): SortSpecificationContext[] | SortSpecificationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortSpecificationContext);
        }

        return this.getRuleContext(i, SortSpecificationContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_sortSpecificationList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSortSpecificationList) {
             listener.enterSortSpecificationList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSortSpecificationList) {
             listener.exitSortSpecificationList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSortSpecificationList) {
            return visitor.visitSortSpecificationList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sortKey(): SortKeyContext {
        return this.getRuleContext(0, SortKeyContext)!;
    }
    public orderingSpecification(): OrderingSpecificationContext | null {
        return this.getRuleContext(0, OrderingSpecificationContext);
    }
    public nullOrdering(): NullOrderingContext | null {
        return this.getRuleContext(0, NullOrderingContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_sortSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSortSpecification) {
             listener.enterSortSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSortSpecification) {
             listener.exitSortSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSortSpecification) {
            return visitor.visitSortSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortKeyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public aggregatingValueExpression(): AggregatingValueExpressionContext {
        return this.getRuleContext(0, AggregatingValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_sortKey;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSortKey) {
             listener.enterSortKey(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSortKey) {
             listener.exitSortKey(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSortKey) {
            return visitor.visitSortKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderingSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ASC, 0);
    }
    public ASCENDING(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ASCENDING, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.DESC, 0);
    }
    public DESCENDING(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.DESCENDING, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_orderingSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterOrderingSpecification) {
             listener.enterOrderingSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitOrderingSpecification) {
             listener.exitOrderingSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitOrderingSpecification) {
            return visitor.visitOrderingSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NullOrderingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULLS(): antlr.TerminalNode {
        return this.getToken(GQLParser.NULLS, 0)!;
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.FIRST, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LAST, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nullOrdering;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNullOrdering) {
             listener.enterNullOrdering(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNullOrdering) {
             listener.exitNullOrdering(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNullOrdering) {
            return visitor.visitNullOrdering(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT(): antlr.TerminalNode {
        return this.getToken(GQLParser.LIMIT, 0)!;
    }
    public nonNegativeIntegerSpecification(): NonNegativeIntegerSpecificationContext {
        return this.getRuleContext(0, NonNegativeIntegerSpecificationContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_limitClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLimitClause) {
             listener.enterLimitClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLimitClause) {
             listener.exitLimitClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLimitClause) {
            return visitor.visitLimitClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OffsetClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public offsetSynonym(): OffsetSynonymContext {
        return this.getRuleContext(0, OffsetSynonymContext)!;
    }
    public nonNegativeIntegerSpecification(): NonNegativeIntegerSpecificationContext {
        return this.getRuleContext(0, NonNegativeIntegerSpecificationContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_offsetClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterOffsetClause) {
             listener.enterOffsetClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitOffsetClause) {
             listener.exitOffsetClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitOffsetClause) {
            return visitor.visitOffsetClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OffsetSynonymContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.OFFSET, 0);
    }
    public SKIP_RESERVED_WORD(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.SKIP_RESERVED_WORD, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_offsetSynonym;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterOffsetSynonym) {
             listener.enterOffsetSynonym(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitOffsetSynonym) {
             listener.exitOffsetSynonym(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitOffsetSynonym) {
            return visitor.visitOffsetSynonym(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SchemaReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public absoluteCatalogSchemaReference(): AbsoluteCatalogSchemaReferenceContext | null {
        return this.getRuleContext(0, AbsoluteCatalogSchemaReferenceContext);
    }
    public relativeCatalogSchemaReference(): RelativeCatalogSchemaReferenceContext | null {
        return this.getRuleContext(0, RelativeCatalogSchemaReferenceContext);
    }
    public referenceParameterSpecification(): ReferenceParameterSpecificationContext | null {
        return this.getRuleContext(0, ReferenceParameterSpecificationContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_schemaReference;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSchemaReference) {
             listener.enterSchemaReference(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSchemaReference) {
             listener.exitSchemaReference(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSchemaReference) {
            return visitor.visitSchemaReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AbsoluteCatalogSchemaReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SOLIDUS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.SOLIDUS, 0);
    }
    public absoluteDirectoryPath(): AbsoluteDirectoryPathContext | null {
        return this.getRuleContext(0, AbsoluteDirectoryPathContext);
    }
    public schemaName(): SchemaNameContext | null {
        return this.getRuleContext(0, SchemaNameContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_absoluteCatalogSchemaReference;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterAbsoluteCatalogSchemaReference) {
             listener.enterAbsoluteCatalogSchemaReference(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitAbsoluteCatalogSchemaReference) {
             listener.exitAbsoluteCatalogSchemaReference(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitAbsoluteCatalogSchemaReference) {
            return visitor.visitAbsoluteCatalogSchemaReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CatalogSchemaParentAndNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public absoluteDirectoryPath(): AbsoluteDirectoryPathContext {
        return this.getRuleContext(0, AbsoluteDirectoryPathContext)!;
    }
    public schemaName(): SchemaNameContext {
        return this.getRuleContext(0, SchemaNameContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_catalogSchemaParentAndName;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCatalogSchemaParentAndName) {
             listener.enterCatalogSchemaParentAndName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCatalogSchemaParentAndName) {
             listener.exitCatalogSchemaParentAndName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCatalogSchemaParentAndName) {
            return visitor.visitCatalogSchemaParentAndName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelativeCatalogSchemaReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public predefinedSchemaReference(): PredefinedSchemaReferenceContext | null {
        return this.getRuleContext(0, PredefinedSchemaReferenceContext);
    }
    public relativeDirectoryPath(): RelativeDirectoryPathContext | null {
        return this.getRuleContext(0, RelativeDirectoryPathContext);
    }
    public schemaName(): SchemaNameContext | null {
        return this.getRuleContext(0, SchemaNameContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_relativeCatalogSchemaReference;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterRelativeCatalogSchemaReference) {
             listener.enterRelativeCatalogSchemaReference(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitRelativeCatalogSchemaReference) {
             listener.exitRelativeCatalogSchemaReference(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitRelativeCatalogSchemaReference) {
            return visitor.visitRelativeCatalogSchemaReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredefinedSchemaReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HOME_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.HOME_SCHEMA, 0);
    }
    public CURRENT_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.CURRENT_SCHEMA, 0);
    }
    public PERIOD(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PERIOD, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_predefinedSchemaReference;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPredefinedSchemaReference) {
             listener.enterPredefinedSchemaReference(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPredefinedSchemaReference) {
             listener.exitPredefinedSchemaReference(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPredefinedSchemaReference) {
            return visitor.visitPredefinedSchemaReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AbsoluteDirectoryPathContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SOLIDUS(): antlr.TerminalNode {
        return this.getToken(GQLParser.SOLIDUS, 0)!;
    }
    public simpleDirectoryPath(): SimpleDirectoryPathContext | null {
        return this.getRuleContext(0, SimpleDirectoryPathContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_absoluteDirectoryPath;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterAbsoluteDirectoryPath) {
             listener.enterAbsoluteDirectoryPath(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitAbsoluteDirectoryPath) {
             listener.exitAbsoluteDirectoryPath(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitAbsoluteDirectoryPath) {
            return visitor.visitAbsoluteDirectoryPath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelativeDirectoryPathContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOUBLE_PERIOD(): antlr.TerminalNode[];
    public DOUBLE_PERIOD(i: number): antlr.TerminalNode | null;
    public DOUBLE_PERIOD(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.DOUBLE_PERIOD);
    	} else {
    		return this.getToken(GQLParser.DOUBLE_PERIOD, i);
    	}
    }
    public SOLIDUS(): antlr.TerminalNode[];
    public SOLIDUS(i: number): antlr.TerminalNode | null;
    public SOLIDUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.SOLIDUS);
    	} else {
    		return this.getToken(GQLParser.SOLIDUS, i);
    	}
    }
    public simpleDirectoryPath(): SimpleDirectoryPathContext | null {
        return this.getRuleContext(0, SimpleDirectoryPathContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_relativeDirectoryPath;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterRelativeDirectoryPath) {
             listener.enterRelativeDirectoryPath(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitRelativeDirectoryPath) {
             listener.exitRelativeDirectoryPath(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitRelativeDirectoryPath) {
            return visitor.visitRelativeDirectoryPath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleDirectoryPathContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public directoryName(): DirectoryNameContext[];
    public directoryName(i: number): DirectoryNameContext | null;
    public directoryName(i?: number): DirectoryNameContext[] | DirectoryNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DirectoryNameContext);
        }

        return this.getRuleContext(i, DirectoryNameContext);
    }
    public SOLIDUS(): antlr.TerminalNode[];
    public SOLIDUS(i: number): antlr.TerminalNode | null;
    public SOLIDUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.SOLIDUS);
    	} else {
    		return this.getToken(GQLParser.SOLIDUS, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simpleDirectoryPath;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimpleDirectoryPath) {
             listener.enterSimpleDirectoryPath(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimpleDirectoryPath) {
             listener.exitSimpleDirectoryPath(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimpleDirectoryPath) {
            return visitor.visitSimpleDirectoryPath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GraphReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public catalogObjectParentReference(): CatalogObjectParentReferenceContext | null {
        return this.getRuleContext(0, CatalogObjectParentReferenceContext);
    }
    public graphName(): GraphNameContext | null {
        return this.getRuleContext(0, GraphNameContext);
    }
    public delimitedGraphName(): DelimitedGraphNameContext | null {
        return this.getRuleContext(0, DelimitedGraphNameContext);
    }
    public homeGraph(): HomeGraphContext | null {
        return this.getRuleContext(0, HomeGraphContext);
    }
    public referenceParameterSpecification(): ReferenceParameterSpecificationContext | null {
        return this.getRuleContext(0, ReferenceParameterSpecificationContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_graphReference;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGraphReference) {
             listener.enterGraphReference(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGraphReference) {
             listener.exitGraphReference(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGraphReference) {
            return visitor.visitGraphReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CatalogGraphParentAndNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public graphName(): GraphNameContext {
        return this.getRuleContext(0, GraphNameContext)!;
    }
    public catalogObjectParentReference(): CatalogObjectParentReferenceContext | null {
        return this.getRuleContext(0, CatalogObjectParentReferenceContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_catalogGraphParentAndName;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCatalogGraphParentAndName) {
             listener.enterCatalogGraphParentAndName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCatalogGraphParentAndName) {
             listener.exitCatalogGraphParentAndName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCatalogGraphParentAndName) {
            return visitor.visitCatalogGraphParentAndName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HomeGraphContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HOME_PROPERTY_GRAPH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.HOME_PROPERTY_GRAPH, 0);
    }
    public HOME_GRAPH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.HOME_GRAPH, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_homeGraph;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterHomeGraph) {
             listener.enterHomeGraph(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitHomeGraph) {
             listener.exitHomeGraph(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitHomeGraph) {
            return visitor.visitHomeGraph(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GraphTypeReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public catalogGraphTypeParentAndName(): CatalogGraphTypeParentAndNameContext | null {
        return this.getRuleContext(0, CatalogGraphTypeParentAndNameContext);
    }
    public referenceParameterSpecification(): ReferenceParameterSpecificationContext | null {
        return this.getRuleContext(0, ReferenceParameterSpecificationContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_graphTypeReference;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGraphTypeReference) {
             listener.enterGraphTypeReference(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGraphTypeReference) {
             listener.exitGraphTypeReference(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGraphTypeReference) {
            return visitor.visitGraphTypeReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CatalogGraphTypeParentAndNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public graphTypeName(): GraphTypeNameContext {
        return this.getRuleContext(0, GraphTypeNameContext)!;
    }
    public catalogObjectParentReference(): CatalogObjectParentReferenceContext | null {
        return this.getRuleContext(0, CatalogObjectParentReferenceContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_catalogGraphTypeParentAndName;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCatalogGraphTypeParentAndName) {
             listener.enterCatalogGraphTypeParentAndName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCatalogGraphTypeParentAndName) {
             listener.exitCatalogGraphTypeParentAndName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCatalogGraphTypeParentAndName) {
            return visitor.visitCatalogGraphTypeParentAndName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BindingTableReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public catalogObjectParentReference(): CatalogObjectParentReferenceContext | null {
        return this.getRuleContext(0, CatalogObjectParentReferenceContext);
    }
    public bindingTableName(): BindingTableNameContext | null {
        return this.getRuleContext(0, BindingTableNameContext);
    }
    public delimitedBindingTableName(): DelimitedBindingTableNameContext | null {
        return this.getRuleContext(0, DelimitedBindingTableNameContext);
    }
    public referenceParameterSpecification(): ReferenceParameterSpecificationContext | null {
        return this.getRuleContext(0, ReferenceParameterSpecificationContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_bindingTableReference;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterBindingTableReference) {
             listener.enterBindingTableReference(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitBindingTableReference) {
             listener.exitBindingTableReference(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitBindingTableReference) {
            return visitor.visitBindingTableReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcedureReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public catalogProcedureParentAndName(): CatalogProcedureParentAndNameContext | null {
        return this.getRuleContext(0, CatalogProcedureParentAndNameContext);
    }
    public referenceParameterSpecification(): ReferenceParameterSpecificationContext | null {
        return this.getRuleContext(0, ReferenceParameterSpecificationContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_procedureReference;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterProcedureReference) {
             listener.enterProcedureReference(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitProcedureReference) {
             listener.exitProcedureReference(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitProcedureReference) {
            return visitor.visitProcedureReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CatalogProcedureParentAndNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public procedureName(): ProcedureNameContext {
        return this.getRuleContext(0, ProcedureNameContext)!;
    }
    public catalogObjectParentReference(): CatalogObjectParentReferenceContext | null {
        return this.getRuleContext(0, CatalogObjectParentReferenceContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_catalogProcedureParentAndName;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCatalogProcedureParentAndName) {
             listener.enterCatalogProcedureParentAndName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCatalogProcedureParentAndName) {
             listener.exitCatalogProcedureParentAndName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCatalogProcedureParentAndName) {
            return visitor.visitCatalogProcedureParentAndName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CatalogObjectParentReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public schemaReference(): SchemaReferenceContext | null {
        return this.getRuleContext(0, SchemaReferenceContext);
    }
    public SOLIDUS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.SOLIDUS, 0);
    }
    public objectName(): ObjectNameContext[];
    public objectName(i: number): ObjectNameContext | null;
    public objectName(i?: number): ObjectNameContext[] | ObjectNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ObjectNameContext);
        }

        return this.getRuleContext(i, ObjectNameContext);
    }
    public PERIOD(): antlr.TerminalNode[];
    public PERIOD(i: number): antlr.TerminalNode | null;
    public PERIOD(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.PERIOD);
    	} else {
    		return this.getToken(GQLParser.PERIOD, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_catalogObjectParentReference;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCatalogObjectParentReference) {
             listener.enterCatalogObjectParentReference(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCatalogObjectParentReference) {
             listener.exitCatalogObjectParentReference(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCatalogObjectParentReference) {
            return visitor.visitCatalogObjectParentReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReferenceParameterSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SUBSTITUTED_PARAMETER_REFERENCE(): antlr.TerminalNode {
        return this.getToken(GQLParser.SUBSTITUTED_PARAMETER_REFERENCE, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_referenceParameterSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterReferenceParameterSpecification) {
             listener.enterReferenceParameterSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitReferenceParameterSpecification) {
             listener.exitReferenceParameterSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitReferenceParameterSpecification) {
            return visitor.visitReferenceParameterSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NestedGraphTypeSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_BRACE(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_BRACE, 0)!;
    }
    public graphTypeSpecificationBody(): GraphTypeSpecificationBodyContext {
        return this.getRuleContext(0, GraphTypeSpecificationBodyContext)!;
    }
    public RIGHT_BRACE(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_BRACE, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nestedGraphTypeSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNestedGraphTypeSpecification) {
             listener.enterNestedGraphTypeSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNestedGraphTypeSpecification) {
             listener.exitNestedGraphTypeSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNestedGraphTypeSpecification) {
            return visitor.visitNestedGraphTypeSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GraphTypeSpecificationBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public elementTypeList(): ElementTypeListContext {
        return this.getRuleContext(0, ElementTypeListContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_graphTypeSpecificationBody;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGraphTypeSpecificationBody) {
             listener.enterGraphTypeSpecificationBody(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGraphTypeSpecificationBody) {
             listener.exitGraphTypeSpecificationBody(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGraphTypeSpecificationBody) {
            return visitor.visitGraphTypeSpecificationBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElementTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public elementTypeSpecification(): ElementTypeSpecificationContext[];
    public elementTypeSpecification(i: number): ElementTypeSpecificationContext | null;
    public elementTypeSpecification(i?: number): ElementTypeSpecificationContext[] | ElementTypeSpecificationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ElementTypeSpecificationContext);
        }

        return this.getRuleContext(i, ElementTypeSpecificationContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_elementTypeList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterElementTypeList) {
             listener.enterElementTypeList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitElementTypeList) {
             listener.exitElementTypeList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitElementTypeList) {
            return visitor.visitElementTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElementTypeSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nodeTypeSpecification(): NodeTypeSpecificationContext | null {
        return this.getRuleContext(0, NodeTypeSpecificationContext);
    }
    public edgeTypeSpecification(): EdgeTypeSpecificationContext | null {
        return this.getRuleContext(0, EdgeTypeSpecificationContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_elementTypeSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterElementTypeSpecification) {
             listener.enterElementTypeSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitElementTypeSpecification) {
             listener.exitElementTypeSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitElementTypeSpecification) {
            return visitor.visitElementTypeSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NodeTypeSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nodeTypePattern(): NodeTypePatternContext | null {
        return this.getRuleContext(0, NodeTypePatternContext);
    }
    public nodeTypePhrase(): NodeTypePhraseContext | null {
        return this.getRuleContext(0, NodeTypePhraseContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nodeTypeSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNodeTypeSpecification) {
             listener.enterNodeTypeSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNodeTypeSpecification) {
             listener.exitNodeTypeSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNodeTypeSpecification) {
            return visitor.visitNodeTypeSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NodeTypePatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public nodeSynonym(): NodeSynonymContext | null {
        return this.getRuleContext(0, NodeSynonymContext);
    }
    public nodeTypeName(): NodeTypeNameContext | null {
        return this.getRuleContext(0, NodeTypeNameContext);
    }
    public localNodeTypeAlias(): LocalNodeTypeAliasContext | null {
        return this.getRuleContext(0, LocalNodeTypeAliasContext);
    }
    public nodeTypeFiller(): NodeTypeFillerContext | null {
        return this.getRuleContext(0, NodeTypeFillerContext);
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TYPE, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nodeTypePattern;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNodeTypePattern) {
             listener.enterNodeTypePattern(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNodeTypePattern) {
             listener.exitNodeTypePattern(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNodeTypePattern) {
            return visitor.visitNodeTypePattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NodeTypePhraseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nodeSynonym(): NodeSynonymContext {
        return this.getRuleContext(0, NodeSynonymContext)!;
    }
    public nodeTypePhraseFiller(): NodeTypePhraseFillerContext {
        return this.getRuleContext(0, NodeTypePhraseFillerContext)!;
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TYPE, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.AS, 0);
    }
    public localNodeTypeAlias(): LocalNodeTypeAliasContext | null {
        return this.getRuleContext(0, LocalNodeTypeAliasContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nodeTypePhrase;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNodeTypePhrase) {
             listener.enterNodeTypePhrase(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNodeTypePhrase) {
             listener.exitNodeTypePhrase(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNodeTypePhrase) {
            return visitor.visitNodeTypePhrase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NodeTypePhraseFillerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nodeTypeName(): NodeTypeNameContext | null {
        return this.getRuleContext(0, NodeTypeNameContext);
    }
    public nodeTypeFiller(): NodeTypeFillerContext | null {
        return this.getRuleContext(0, NodeTypeFillerContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nodeTypePhraseFiller;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNodeTypePhraseFiller) {
             listener.enterNodeTypePhraseFiller(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNodeTypePhraseFiller) {
             listener.exitNodeTypePhraseFiller(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNodeTypePhraseFiller) {
            return visitor.visitNodeTypePhraseFiller(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NodeTypeFillerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nodeTypeKeyLabelSet(): NodeTypeKeyLabelSetContext | null {
        return this.getRuleContext(0, NodeTypeKeyLabelSetContext);
    }
    public nodeTypeImpliedContent(): NodeTypeImpliedContentContext | null {
        return this.getRuleContext(0, NodeTypeImpliedContentContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nodeTypeFiller;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNodeTypeFiller) {
             listener.enterNodeTypeFiller(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNodeTypeFiller) {
             listener.exitNodeTypeFiller(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNodeTypeFiller) {
            return visitor.visitNodeTypeFiller(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LocalNodeTypeAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public regularIdentifier(): RegularIdentifierContext {
        return this.getRuleContext(0, RegularIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_localNodeTypeAlias;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLocalNodeTypeAlias) {
             listener.enterLocalNodeTypeAlias(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLocalNodeTypeAlias) {
             listener.exitLocalNodeTypeAlias(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLocalNodeTypeAlias) {
            return visitor.visitLocalNodeTypeAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NodeTypeImpliedContentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nodeTypeLabelSet(): NodeTypeLabelSetContext | null {
        return this.getRuleContext(0, NodeTypeLabelSetContext);
    }
    public nodeTypePropertyTypes(): NodeTypePropertyTypesContext | null {
        return this.getRuleContext(0, NodeTypePropertyTypesContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nodeTypeImpliedContent;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNodeTypeImpliedContent) {
             listener.enterNodeTypeImpliedContent(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNodeTypeImpliedContent) {
             listener.exitNodeTypeImpliedContent(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNodeTypeImpliedContent) {
            return visitor.visitNodeTypeImpliedContent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NodeTypeKeyLabelSetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IMPLIES(): antlr.TerminalNode {
        return this.getToken(GQLParser.IMPLIES, 0)!;
    }
    public labelSetPhrase(): LabelSetPhraseContext | null {
        return this.getRuleContext(0, LabelSetPhraseContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nodeTypeKeyLabelSet;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNodeTypeKeyLabelSet) {
             listener.enterNodeTypeKeyLabelSet(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNodeTypeKeyLabelSet) {
             listener.exitNodeTypeKeyLabelSet(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNodeTypeKeyLabelSet) {
            return visitor.visitNodeTypeKeyLabelSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NodeTypeLabelSetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public labelSetPhrase(): LabelSetPhraseContext {
        return this.getRuleContext(0, LabelSetPhraseContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nodeTypeLabelSet;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNodeTypeLabelSet) {
             listener.enterNodeTypeLabelSet(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNodeTypeLabelSet) {
             listener.exitNodeTypeLabelSet(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNodeTypeLabelSet) {
            return visitor.visitNodeTypeLabelSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NodeTypePropertyTypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public propertyTypesSpecification(): PropertyTypesSpecificationContext {
        return this.getRuleContext(0, PropertyTypesSpecificationContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nodeTypePropertyTypes;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNodeTypePropertyTypes) {
             listener.enterNodeTypePropertyTypes(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNodeTypePropertyTypes) {
             listener.exitNodeTypePropertyTypes(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNodeTypePropertyTypes) {
            return visitor.visitNodeTypePropertyTypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EdgeTypeSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public edgeTypePattern(): EdgeTypePatternContext | null {
        return this.getRuleContext(0, EdgeTypePatternContext);
    }
    public edgeTypePhrase(): EdgeTypePhraseContext | null {
        return this.getRuleContext(0, EdgeTypePhraseContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_edgeTypeSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEdgeTypeSpecification) {
             listener.enterEdgeTypeSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEdgeTypeSpecification) {
             listener.exitEdgeTypeSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEdgeTypeSpecification) {
            return visitor.visitEdgeTypeSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EdgeTypePatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public edgeTypePatternDirected(): EdgeTypePatternDirectedContext | null {
        return this.getRuleContext(0, EdgeTypePatternDirectedContext);
    }
    public edgeTypePatternUndirected(): EdgeTypePatternUndirectedContext | null {
        return this.getRuleContext(0, EdgeTypePatternUndirectedContext);
    }
    public edgeSynonym(): EdgeSynonymContext | null {
        return this.getRuleContext(0, EdgeSynonymContext);
    }
    public edgeTypeName(): EdgeTypeNameContext | null {
        return this.getRuleContext(0, EdgeTypeNameContext);
    }
    public edgeKind(): EdgeKindContext | null {
        return this.getRuleContext(0, EdgeKindContext);
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TYPE, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_edgeTypePattern;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEdgeTypePattern) {
             listener.enterEdgeTypePattern(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEdgeTypePattern) {
             listener.exitEdgeTypePattern(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEdgeTypePattern) {
            return visitor.visitEdgeTypePattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EdgeTypePhraseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public edgeKind(): EdgeKindContext {
        return this.getRuleContext(0, EdgeKindContext)!;
    }
    public edgeSynonym(): EdgeSynonymContext {
        return this.getRuleContext(0, EdgeSynonymContext)!;
    }
    public edgeTypePhraseFiller(): EdgeTypePhraseFillerContext {
        return this.getRuleContext(0, EdgeTypePhraseFillerContext)!;
    }
    public endpointPairPhrase(): EndpointPairPhraseContext {
        return this.getRuleContext(0, EndpointPairPhraseContext)!;
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TYPE, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_edgeTypePhrase;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEdgeTypePhrase) {
             listener.enterEdgeTypePhrase(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEdgeTypePhrase) {
             listener.exitEdgeTypePhrase(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEdgeTypePhrase) {
            return visitor.visitEdgeTypePhrase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EdgeTypePhraseFillerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public edgeTypeName(): EdgeTypeNameContext | null {
        return this.getRuleContext(0, EdgeTypeNameContext);
    }
    public edgeTypeFiller(): EdgeTypeFillerContext | null {
        return this.getRuleContext(0, EdgeTypeFillerContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_edgeTypePhraseFiller;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEdgeTypePhraseFiller) {
             listener.enterEdgeTypePhraseFiller(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEdgeTypePhraseFiller) {
             listener.exitEdgeTypePhraseFiller(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEdgeTypePhraseFiller) {
            return visitor.visitEdgeTypePhraseFiller(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EdgeTypeFillerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public edgeTypeKeyLabelSet(): EdgeTypeKeyLabelSetContext | null {
        return this.getRuleContext(0, EdgeTypeKeyLabelSetContext);
    }
    public edgeTypeImpliedContent(): EdgeTypeImpliedContentContext | null {
        return this.getRuleContext(0, EdgeTypeImpliedContentContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_edgeTypeFiller;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEdgeTypeFiller) {
             listener.enterEdgeTypeFiller(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEdgeTypeFiller) {
             listener.exitEdgeTypeFiller(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEdgeTypeFiller) {
            return visitor.visitEdgeTypeFiller(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EdgeTypeImpliedContentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public edgeTypeLabelSet(): EdgeTypeLabelSetContext | null {
        return this.getRuleContext(0, EdgeTypeLabelSetContext);
    }
    public edgeTypePropertyTypes(): EdgeTypePropertyTypesContext | null {
        return this.getRuleContext(0, EdgeTypePropertyTypesContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_edgeTypeImpliedContent;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEdgeTypeImpliedContent) {
             listener.enterEdgeTypeImpliedContent(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEdgeTypeImpliedContent) {
             listener.exitEdgeTypeImpliedContent(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEdgeTypeImpliedContent) {
            return visitor.visitEdgeTypeImpliedContent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EdgeTypeKeyLabelSetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IMPLIES(): antlr.TerminalNode {
        return this.getToken(GQLParser.IMPLIES, 0)!;
    }
    public labelSetPhrase(): LabelSetPhraseContext | null {
        return this.getRuleContext(0, LabelSetPhraseContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_edgeTypeKeyLabelSet;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEdgeTypeKeyLabelSet) {
             listener.enterEdgeTypeKeyLabelSet(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEdgeTypeKeyLabelSet) {
             listener.exitEdgeTypeKeyLabelSet(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEdgeTypeKeyLabelSet) {
            return visitor.visitEdgeTypeKeyLabelSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EdgeTypeLabelSetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public labelSetPhrase(): LabelSetPhraseContext {
        return this.getRuleContext(0, LabelSetPhraseContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_edgeTypeLabelSet;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEdgeTypeLabelSet) {
             listener.enterEdgeTypeLabelSet(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEdgeTypeLabelSet) {
             listener.exitEdgeTypeLabelSet(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEdgeTypeLabelSet) {
            return visitor.visitEdgeTypeLabelSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EdgeTypePropertyTypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public propertyTypesSpecification(): PropertyTypesSpecificationContext {
        return this.getRuleContext(0, PropertyTypesSpecificationContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_edgeTypePropertyTypes;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEdgeTypePropertyTypes) {
             listener.enterEdgeTypePropertyTypes(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEdgeTypePropertyTypes) {
             listener.exitEdgeTypePropertyTypes(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEdgeTypePropertyTypes) {
            return visitor.visitEdgeTypePropertyTypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EdgeTypePatternDirectedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public edgeTypePatternPointingRight(): EdgeTypePatternPointingRightContext | null {
        return this.getRuleContext(0, EdgeTypePatternPointingRightContext);
    }
    public edgeTypePatternPointingLeft(): EdgeTypePatternPointingLeftContext | null {
        return this.getRuleContext(0, EdgeTypePatternPointingLeftContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_edgeTypePatternDirected;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEdgeTypePatternDirected) {
             listener.enterEdgeTypePatternDirected(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEdgeTypePatternDirected) {
             listener.exitEdgeTypePatternDirected(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEdgeTypePatternDirected) {
            return visitor.visitEdgeTypePatternDirected(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EdgeTypePatternPointingRightContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sourceNodeTypeReference(): SourceNodeTypeReferenceContext {
        return this.getRuleContext(0, SourceNodeTypeReferenceContext)!;
    }
    public arcTypePointingRight(): ArcTypePointingRightContext {
        return this.getRuleContext(0, ArcTypePointingRightContext)!;
    }
    public destinationNodeTypeReference(): DestinationNodeTypeReferenceContext {
        return this.getRuleContext(0, DestinationNodeTypeReferenceContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_edgeTypePatternPointingRight;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEdgeTypePatternPointingRight) {
             listener.enterEdgeTypePatternPointingRight(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEdgeTypePatternPointingRight) {
             listener.exitEdgeTypePatternPointingRight(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEdgeTypePatternPointingRight) {
            return visitor.visitEdgeTypePatternPointingRight(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EdgeTypePatternPointingLeftContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public destinationNodeTypeReference(): DestinationNodeTypeReferenceContext {
        return this.getRuleContext(0, DestinationNodeTypeReferenceContext)!;
    }
    public arcTypePointingLeft(): ArcTypePointingLeftContext {
        return this.getRuleContext(0, ArcTypePointingLeftContext)!;
    }
    public sourceNodeTypeReference(): SourceNodeTypeReferenceContext {
        return this.getRuleContext(0, SourceNodeTypeReferenceContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_edgeTypePatternPointingLeft;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEdgeTypePatternPointingLeft) {
             listener.enterEdgeTypePatternPointingLeft(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEdgeTypePatternPointingLeft) {
             listener.exitEdgeTypePatternPointingLeft(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEdgeTypePatternPointingLeft) {
            return visitor.visitEdgeTypePatternPointingLeft(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EdgeTypePatternUndirectedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sourceNodeTypeReference(): SourceNodeTypeReferenceContext {
        return this.getRuleContext(0, SourceNodeTypeReferenceContext)!;
    }
    public arcTypeUndirected(): ArcTypeUndirectedContext {
        return this.getRuleContext(0, ArcTypeUndirectedContext)!;
    }
    public destinationNodeTypeReference(): DestinationNodeTypeReferenceContext {
        return this.getRuleContext(0, DestinationNodeTypeReferenceContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_edgeTypePatternUndirected;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEdgeTypePatternUndirected) {
             listener.enterEdgeTypePatternUndirected(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEdgeTypePatternUndirected) {
             listener.exitEdgeTypePatternUndirected(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEdgeTypePatternUndirected) {
            return visitor.visitEdgeTypePatternUndirected(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ArcTypePointingRightContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MINUS_LEFT_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.MINUS_LEFT_BRACKET, 0)!;
    }
    public edgeTypeFiller(): EdgeTypeFillerContext {
        return this.getRuleContext(0, EdgeTypeFillerContext)!;
    }
    public BRACKET_RIGHT_ARROW(): antlr.TerminalNode {
        return this.getToken(GQLParser.BRACKET_RIGHT_ARROW, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_arcTypePointingRight;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterArcTypePointingRight) {
             listener.enterArcTypePointingRight(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitArcTypePointingRight) {
             listener.exitArcTypePointingRight(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitArcTypePointingRight) {
            return visitor.visitArcTypePointingRight(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ArcTypePointingLeftContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_ARROW_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_ARROW_BRACKET, 0)!;
    }
    public edgeTypeFiller(): EdgeTypeFillerContext {
        return this.getRuleContext(0, EdgeTypeFillerContext)!;
    }
    public RIGHT_BRACKET_MINUS(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_BRACKET_MINUS, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_arcTypePointingLeft;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterArcTypePointingLeft) {
             listener.enterArcTypePointingLeft(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitArcTypePointingLeft) {
             listener.exitArcTypePointingLeft(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitArcTypePointingLeft) {
            return visitor.visitArcTypePointingLeft(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ArcTypeUndirectedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TILDE_LEFT_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.TILDE_LEFT_BRACKET, 0)!;
    }
    public edgeTypeFiller(): EdgeTypeFillerContext {
        return this.getRuleContext(0, EdgeTypeFillerContext)!;
    }
    public RIGHT_BRACKET_TILDE(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_BRACKET_TILDE, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_arcTypeUndirected;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterArcTypeUndirected) {
             listener.enterArcTypeUndirected(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitArcTypeUndirected) {
             listener.exitArcTypeUndirected(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitArcTypeUndirected) {
            return visitor.visitArcTypeUndirected(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceNodeTypeReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public sourceNodeTypeAlias(): SourceNodeTypeAliasContext | null {
        return this.getRuleContext(0, SourceNodeTypeAliasContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public nodeTypeFiller(): NodeTypeFillerContext | null {
        return this.getRuleContext(0, NodeTypeFillerContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_sourceNodeTypeReference;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSourceNodeTypeReference) {
             listener.enterSourceNodeTypeReference(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSourceNodeTypeReference) {
             listener.exitSourceNodeTypeReference(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSourceNodeTypeReference) {
            return visitor.visitSourceNodeTypeReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DestinationNodeTypeReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public destinationNodeTypeAlias(): DestinationNodeTypeAliasContext | null {
        return this.getRuleContext(0, DestinationNodeTypeAliasContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public nodeTypeFiller(): NodeTypeFillerContext | null {
        return this.getRuleContext(0, NodeTypeFillerContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_destinationNodeTypeReference;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDestinationNodeTypeReference) {
             listener.enterDestinationNodeTypeReference(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDestinationNodeTypeReference) {
             listener.exitDestinationNodeTypeReference(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDestinationNodeTypeReference) {
            return visitor.visitDestinationNodeTypeReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EdgeKindContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DIRECTED(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.DIRECTED, 0);
    }
    public UNDIRECTED(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UNDIRECTED, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_edgeKind;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEdgeKind) {
             listener.enterEdgeKind(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEdgeKind) {
             listener.exitEdgeKind(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEdgeKind) {
            return visitor.visitEdgeKind(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EndpointPairPhraseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CONNECTING(): antlr.TerminalNode {
        return this.getToken(GQLParser.CONNECTING, 0)!;
    }
    public endpointPair(): EndpointPairContext {
        return this.getRuleContext(0, EndpointPairContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_endpointPairPhrase;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEndpointPairPhrase) {
             listener.enterEndpointPairPhrase(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEndpointPairPhrase) {
             listener.exitEndpointPairPhrase(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEndpointPairPhrase) {
            return visitor.visitEndpointPairPhrase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EndpointPairContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public endpointPairDirected(): EndpointPairDirectedContext | null {
        return this.getRuleContext(0, EndpointPairDirectedContext);
    }
    public endpointPairUndirected(): EndpointPairUndirectedContext | null {
        return this.getRuleContext(0, EndpointPairUndirectedContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_endpointPair;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEndpointPair) {
             listener.enterEndpointPair(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEndpointPair) {
             listener.exitEndpointPair(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEndpointPair) {
            return visitor.visitEndpointPair(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EndpointPairDirectedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public endpointPairPointingRight(): EndpointPairPointingRightContext | null {
        return this.getRuleContext(0, EndpointPairPointingRightContext);
    }
    public endpointPairPointingLeft(): EndpointPairPointingLeftContext | null {
        return this.getRuleContext(0, EndpointPairPointingLeftContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_endpointPairDirected;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEndpointPairDirected) {
             listener.enterEndpointPairDirected(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEndpointPairDirected) {
             listener.exitEndpointPairDirected(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEndpointPairDirected) {
            return visitor.visitEndpointPairDirected(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EndpointPairPointingRightContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public sourceNodeTypeAlias(): SourceNodeTypeAliasContext {
        return this.getRuleContext(0, SourceNodeTypeAliasContext)!;
    }
    public connectorPointingRight(): ConnectorPointingRightContext {
        return this.getRuleContext(0, ConnectorPointingRightContext)!;
    }
    public destinationNodeTypeAlias(): DestinationNodeTypeAliasContext {
        return this.getRuleContext(0, DestinationNodeTypeAliasContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_endpointPairPointingRight;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEndpointPairPointingRight) {
             listener.enterEndpointPairPointingRight(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEndpointPairPointingRight) {
             listener.exitEndpointPairPointingRight(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEndpointPairPointingRight) {
            return visitor.visitEndpointPairPointingRight(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EndpointPairPointingLeftContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public destinationNodeTypeAlias(): DestinationNodeTypeAliasContext {
        return this.getRuleContext(0, DestinationNodeTypeAliasContext)!;
    }
    public LEFT_ARROW(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_ARROW, 0)!;
    }
    public sourceNodeTypeAlias(): SourceNodeTypeAliasContext {
        return this.getRuleContext(0, SourceNodeTypeAliasContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_endpointPairPointingLeft;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEndpointPairPointingLeft) {
             listener.enterEndpointPairPointingLeft(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEndpointPairPointingLeft) {
             listener.exitEndpointPairPointingLeft(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEndpointPairPointingLeft) {
            return visitor.visitEndpointPairPointingLeft(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EndpointPairUndirectedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public sourceNodeTypeAlias(): SourceNodeTypeAliasContext {
        return this.getRuleContext(0, SourceNodeTypeAliasContext)!;
    }
    public connectorUndirected(): ConnectorUndirectedContext {
        return this.getRuleContext(0, ConnectorUndirectedContext)!;
    }
    public destinationNodeTypeAlias(): DestinationNodeTypeAliasContext {
        return this.getRuleContext(0, DestinationNodeTypeAliasContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_endpointPairUndirected;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEndpointPairUndirected) {
             listener.enterEndpointPairUndirected(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEndpointPairUndirected) {
             listener.exitEndpointPairUndirected(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEndpointPairUndirected) {
            return visitor.visitEndpointPairUndirected(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConnectorPointingRightContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TO, 0);
    }
    public RIGHT_ARROW(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_ARROW, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_connectorPointingRight;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterConnectorPointingRight) {
             listener.enterConnectorPointingRight(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitConnectorPointingRight) {
             listener.exitConnectorPointingRight(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitConnectorPointingRight) {
            return visitor.visitConnectorPointingRight(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConnectorUndirectedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TO, 0);
    }
    public TILDE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TILDE, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_connectorUndirected;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterConnectorUndirected) {
             listener.enterConnectorUndirected(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitConnectorUndirected) {
             listener.exitConnectorUndirected(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitConnectorUndirected) {
            return visitor.visitConnectorUndirected(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceNodeTypeAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public regularIdentifier(): RegularIdentifierContext {
        return this.getRuleContext(0, RegularIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_sourceNodeTypeAlias;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSourceNodeTypeAlias) {
             listener.enterSourceNodeTypeAlias(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSourceNodeTypeAlias) {
             listener.exitSourceNodeTypeAlias(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSourceNodeTypeAlias) {
            return visitor.visitSourceNodeTypeAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DestinationNodeTypeAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public regularIdentifier(): RegularIdentifierContext {
        return this.getRuleContext(0, RegularIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_destinationNodeTypeAlias;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDestinationNodeTypeAlias) {
             listener.enterDestinationNodeTypeAlias(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDestinationNodeTypeAlias) {
             listener.exitDestinationNodeTypeAlias(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDestinationNodeTypeAlias) {
            return visitor.visitDestinationNodeTypeAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LabelSetPhraseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LABEL(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LABEL, 0);
    }
    public labelName(): LabelNameContext | null {
        return this.getRuleContext(0, LabelNameContext);
    }
    public LABELS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LABELS, 0);
    }
    public labelSetSpecification(): LabelSetSpecificationContext | null {
        return this.getRuleContext(0, LabelSetSpecificationContext);
    }
    public isOrColon(): IsOrColonContext | null {
        return this.getRuleContext(0, IsOrColonContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_labelSetPhrase;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLabelSetPhrase) {
             listener.enterLabelSetPhrase(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLabelSetPhrase) {
             listener.exitLabelSetPhrase(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLabelSetPhrase) {
            return visitor.visitLabelSetPhrase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LabelSetSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public labelName(): LabelNameContext[];
    public labelName(i: number): LabelNameContext | null;
    public labelName(i?: number): LabelNameContext[] | LabelNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LabelNameContext);
        }

        return this.getRuleContext(i, LabelNameContext);
    }
    public AMPERSAND(): antlr.TerminalNode[];
    public AMPERSAND(i: number): antlr.TerminalNode | null;
    public AMPERSAND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.AMPERSAND);
    	} else {
    		return this.getToken(GQLParser.AMPERSAND, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_labelSetSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLabelSetSpecification) {
             listener.enterLabelSetSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLabelSetSpecification) {
             listener.exitLabelSetSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLabelSetSpecification) {
            return visitor.visitLabelSetSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyTypesSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_BRACE(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_BRACE, 0)!;
    }
    public RIGHT_BRACE(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_BRACE, 0)!;
    }
    public propertyTypeList(): PropertyTypeListContext | null {
        return this.getRuleContext(0, PropertyTypeListContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_propertyTypesSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPropertyTypesSpecification) {
             listener.enterPropertyTypesSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPropertyTypesSpecification) {
             listener.exitPropertyTypesSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPropertyTypesSpecification) {
            return visitor.visitPropertyTypesSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public propertyType(): PropertyTypeContext[];
    public propertyType(i: number): PropertyTypeContext | null;
    public propertyType(i?: number): PropertyTypeContext[] | PropertyTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyTypeContext);
        }

        return this.getRuleContext(i, PropertyTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_propertyTypeList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPropertyTypeList) {
             listener.enterPropertyTypeList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPropertyTypeList) {
             listener.exitPropertyTypeList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPropertyTypeList) {
            return visitor.visitPropertyTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public propertyName(): PropertyNameContext {
        return this.getRuleContext(0, PropertyNameContext)!;
    }
    public propertyValueType(): PropertyValueTypeContext {
        return this.getRuleContext(0, PropertyValueTypeContext)!;
    }
    public typed(): TypedContext | null {
        return this.getRuleContext(0, TypedContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_propertyType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPropertyType) {
             listener.enterPropertyType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPropertyType) {
             listener.exitPropertyType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPropertyType) {
            return visitor.visitPropertyType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyValueTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueType(): ValueTypeContext {
        return this.getRuleContext(0, ValueTypeContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_propertyValueType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPropertyValueType) {
             listener.enterPropertyValueType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPropertyValueType) {
             listener.exitPropertyValueType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPropertyValueType) {
            return visitor.visitPropertyValueType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BindingTableTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(GQLParser.TABLE, 0)!;
    }
    public fieldTypesSpecification(): FieldTypesSpecificationContext {
        return this.getRuleContext(0, FieldTypesSpecificationContext)!;
    }
    public BINDING(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.BINDING, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_bindingTableType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterBindingTableType) {
             listener.enterBindingTableType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitBindingTableType) {
             listener.exitBindingTableType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitBindingTableType) {
            return visitor.visitBindingTableType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_valueType;
    }
    public override copyFrom(ctx: ValueTypeContext): void {
        super.copyFrom(ctx);
    }
}
export class PredefinedTypeLabelContext extends ValueTypeContext {
    public constructor(ctx: ValueTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public predefinedType(): PredefinedTypeContext {
        return this.getRuleContext(0, PredefinedTypeContext)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPredefinedTypeLabel) {
             listener.enterPredefinedTypeLabel(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPredefinedTypeLabel) {
             listener.exitPredefinedTypeLabel(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPredefinedTypeLabel) {
            return visitor.visitPredefinedTypeLabel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PathValueTypeLabelContext extends ValueTypeContext {
    public constructor(ctx: ValueTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public pathValueType(): PathValueTypeContext {
        return this.getRuleContext(0, PathValueTypeContext)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPathValueTypeLabel) {
             listener.enterPathValueTypeLabel(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPathValueTypeLabel) {
             listener.exitPathValueTypeLabel(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPathValueTypeLabel) {
            return visitor.visitPathValueTypeLabel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ListValueTypeAlt1Context extends ValueTypeContext {
    public constructor(ctx: ValueTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public listValueTypeName(): ListValueTypeNameContext {
        return this.getRuleContext(0, ListValueTypeNameContext)!;
    }
    public LEFT_ANGLE_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0)!;
    }
    public valueType(): ValueTypeContext {
        return this.getRuleContext(0, ValueTypeContext)!;
    }
    public RIGHT_ANGLE_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0)!;
    }
    public LEFT_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_BRACKET, 0);
    }
    public maxLength(): MaxLengthContext | null {
        return this.getRuleContext(0, MaxLengthContext);
    }
    public RIGHT_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_BRACKET, 0);
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterListValueTypeAlt1) {
             listener.enterListValueTypeAlt1(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitListValueTypeAlt1) {
             listener.exitListValueTypeAlt1(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitListValueTypeAlt1) {
            return visitor.visitListValueTypeAlt1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ListValueTypeAlt3Context extends ValueTypeContext {
    public constructor(ctx: ValueTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public listValueTypeName(): ListValueTypeNameContext {
        return this.getRuleContext(0, ListValueTypeNameContext)!;
    }
    public LEFT_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_BRACKET, 0);
    }
    public maxLength(): MaxLengthContext | null {
        return this.getRuleContext(0, MaxLengthContext);
    }
    public RIGHT_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_BRACKET, 0);
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterListValueTypeAlt3) {
             listener.enterListValueTypeAlt3(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitListValueTypeAlt3) {
             listener.exitListValueTypeAlt3(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitListValueTypeAlt3) {
            return visitor.visitListValueTypeAlt3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RecordTypeLabelContext extends ValueTypeContext {
    public constructor(ctx: ValueTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public recordType(): RecordTypeContext {
        return this.getRuleContext(0, RecordTypeContext)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterRecordTypeLabel) {
             listener.enterRecordTypeLabel(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitRecordTypeLabel) {
             listener.exitRecordTypeLabel(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitRecordTypeLabel) {
            return visitor.visitRecordTypeLabel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OpenDynamicUnionTypeLabelContext extends ValueTypeContext {
    public constructor(ctx: ValueTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ANY(): antlr.TerminalNode {
        return this.getToken(GQLParser.ANY, 0)!;
    }
    public VALUE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.VALUE, 0);
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterOpenDynamicUnionTypeLabel) {
             listener.enterOpenDynamicUnionTypeLabel(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitOpenDynamicUnionTypeLabel) {
             listener.exitOpenDynamicUnionTypeLabel(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitOpenDynamicUnionTypeLabel) {
            return visitor.visitOpenDynamicUnionTypeLabel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DynamicPropertyValueTypeLabelContext extends ValueTypeContext {
    public constructor(ctx: ValueTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PROPERTY(): antlr.TerminalNode {
        return this.getToken(GQLParser.PROPERTY, 0)!;
    }
    public VALUE(): antlr.TerminalNode {
        return this.getToken(GQLParser.VALUE, 0)!;
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ANY, 0);
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDynamicPropertyValueTypeLabel) {
             listener.enterDynamicPropertyValueTypeLabel(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDynamicPropertyValueTypeLabel) {
             listener.exitDynamicPropertyValueTypeLabel(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDynamicPropertyValueTypeLabel) {
            return visitor.visitDynamicPropertyValueTypeLabel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ClosedDynamicUnionTypeAtl1Context extends ValueTypeContext {
    public constructor(ctx: ValueTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ANY(): antlr.TerminalNode {
        return this.getToken(GQLParser.ANY, 0)!;
    }
    public LEFT_ANGLE_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0)!;
    }
    public valueType(): ValueTypeContext[];
    public valueType(i: number): ValueTypeContext | null;
    public valueType(i?: number): ValueTypeContext[] | ValueTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueTypeContext);
        }

        return this.getRuleContext(i, ValueTypeContext);
    }
    public RIGHT_ANGLE_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0)!;
    }
    public VALUE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.VALUE, 0);
    }
    public VERTICAL_BAR(): antlr.TerminalNode[];
    public VERTICAL_BAR(i: number): antlr.TerminalNode | null;
    public VERTICAL_BAR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.VERTICAL_BAR);
    	} else {
    		return this.getToken(GQLParser.VERTICAL_BAR, i);
    	}
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterClosedDynamicUnionTypeAtl1) {
             listener.enterClosedDynamicUnionTypeAtl1(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitClosedDynamicUnionTypeAtl1) {
             listener.exitClosedDynamicUnionTypeAtl1(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitClosedDynamicUnionTypeAtl1) {
            return visitor.visitClosedDynamicUnionTypeAtl1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ClosedDynamicUnionTypeAtl2Context extends ValueTypeContext {
    public constructor(ctx: ValueTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueType(): ValueTypeContext[];
    public valueType(i: number): ValueTypeContext | null;
    public valueType(i?: number): ValueTypeContext[] | ValueTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueTypeContext);
        }

        return this.getRuleContext(i, ValueTypeContext);
    }
    public VERTICAL_BAR(): antlr.TerminalNode {
        return this.getToken(GQLParser.VERTICAL_BAR, 0)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterClosedDynamicUnionTypeAtl2) {
             listener.enterClosedDynamicUnionTypeAtl2(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitClosedDynamicUnionTypeAtl2) {
             listener.exitClosedDynamicUnionTypeAtl2(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitClosedDynamicUnionTypeAtl2) {
            return visitor.visitClosedDynamicUnionTypeAtl2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ListValueTypeAlt2Context extends ValueTypeContext {
    public constructor(ctx: ValueTypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueType(): ValueTypeContext {
        return this.getRuleContext(0, ValueTypeContext)!;
    }
    public listValueTypeName(): ListValueTypeNameContext {
        return this.getRuleContext(0, ListValueTypeNameContext)!;
    }
    public LEFT_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_BRACKET, 0);
    }
    public maxLength(): MaxLengthContext | null {
        return this.getRuleContext(0, MaxLengthContext);
    }
    public RIGHT_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_BRACKET, 0);
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterListValueTypeAlt2) {
             listener.enterListValueTypeAlt2(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitListValueTypeAlt2) {
             listener.exitListValueTypeAlt2(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitListValueTypeAlt2) {
            return visitor.visitListValueTypeAlt2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOUBLE_COLON(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.DOUBLE_COLON, 0);
    }
    public TYPED(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TYPED, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_typed;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTyped) {
             listener.enterTyped(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTyped) {
             listener.exitTyped(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTyped) {
            return visitor.visitTyped(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredefinedTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public booleanType(): BooleanTypeContext | null {
        return this.getRuleContext(0, BooleanTypeContext);
    }
    public characterStringType(): CharacterStringTypeContext | null {
        return this.getRuleContext(0, CharacterStringTypeContext);
    }
    public byteStringType(): ByteStringTypeContext | null {
        return this.getRuleContext(0, ByteStringTypeContext);
    }
    public numericType(): NumericTypeContext | null {
        return this.getRuleContext(0, NumericTypeContext);
    }
    public temporalType(): TemporalTypeContext | null {
        return this.getRuleContext(0, TemporalTypeContext);
    }
    public referenceValueType(): ReferenceValueTypeContext | null {
        return this.getRuleContext(0, ReferenceValueTypeContext);
    }
    public immaterialValueType(): ImmaterialValueTypeContext | null {
        return this.getRuleContext(0, ImmaterialValueTypeContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_predefinedType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPredefinedType) {
             listener.enterPredefinedType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPredefinedType) {
             listener.exitPredefinedType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPredefinedType) {
            return visitor.visitPredefinedType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BOOL(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.BOOL, 0);
    }
    public BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.BOOLEAN, 0);
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_booleanType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterBooleanType) {
             listener.enterBooleanType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitBooleanType) {
             listener.exitBooleanType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitBooleanType) {
            return visitor.visitBooleanType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CharacterStringTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.STRING, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_PAREN, 0);
    }
    public maxLength(): MaxLengthContext | null {
        return this.getRuleContext(0, MaxLengthContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_PAREN, 0);
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public minLength(): MinLengthContext | null {
        return this.getRuleContext(0, MinLengthContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.COMMA, 0);
    }
    public CHAR(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.CHAR, 0);
    }
    public fixedLength(): FixedLengthContext | null {
        return this.getRuleContext(0, FixedLengthContext);
    }
    public VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.VARCHAR, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_characterStringType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCharacterStringType) {
             listener.enterCharacterStringType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCharacterStringType) {
             listener.exitCharacterStringType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCharacterStringType) {
            return visitor.visitCharacterStringType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ByteStringTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BYTES(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.BYTES, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_PAREN, 0);
    }
    public maxLength(): MaxLengthContext | null {
        return this.getRuleContext(0, MaxLengthContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_PAREN, 0);
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public minLength(): MinLengthContext | null {
        return this.getRuleContext(0, MinLengthContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.COMMA, 0);
    }
    public BINARY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.BINARY, 0);
    }
    public fixedLength(): FixedLengthContext | null {
        return this.getRuleContext(0, FixedLengthContext);
    }
    public VARBINARY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.VARBINARY, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_byteStringType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterByteStringType) {
             listener.enterByteStringType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitByteStringType) {
             listener.exitByteStringType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitByteStringType) {
            return visitor.visitByteStringType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MinLengthContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unsignedInteger(): UnsignedIntegerContext {
        return this.getRuleContext(0, UnsignedIntegerContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_minLength;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterMinLength) {
             listener.enterMinLength(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitMinLength) {
             listener.exitMinLength(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitMinLength) {
            return visitor.visitMinLength(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MaxLengthContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unsignedInteger(): UnsignedIntegerContext {
        return this.getRuleContext(0, UnsignedIntegerContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_maxLength;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterMaxLength) {
             listener.enterMaxLength(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitMaxLength) {
             listener.exitMaxLength(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitMaxLength) {
            return visitor.visitMaxLength(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FixedLengthContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unsignedInteger(): UnsignedIntegerContext {
        return this.getRuleContext(0, UnsignedIntegerContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_fixedLength;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFixedLength) {
             listener.enterFixedLength(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFixedLength) {
             listener.exitFixedLength(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFixedLength) {
            return visitor.visitFixedLength(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumericTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public exactNumericType(): ExactNumericTypeContext | null {
        return this.getRuleContext(0, ExactNumericTypeContext);
    }
    public approximateNumericType(): ApproximateNumericTypeContext | null {
        return this.getRuleContext(0, ApproximateNumericTypeContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_numericType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNumericType) {
             listener.enterNumericType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNumericType) {
             listener.exitNumericType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNumericType) {
            return visitor.visitNumericType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExactNumericTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public binaryExactNumericType(): BinaryExactNumericTypeContext | null {
        return this.getRuleContext(0, BinaryExactNumericTypeContext);
    }
    public decimalExactNumericType(): DecimalExactNumericTypeContext | null {
        return this.getRuleContext(0, DecimalExactNumericTypeContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_exactNumericType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterExactNumericType) {
             listener.enterExactNumericType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitExactNumericType) {
             listener.exitExactNumericType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitExactNumericType) {
            return visitor.visitExactNumericType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BinaryExactNumericTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public signedBinaryExactNumericType(): SignedBinaryExactNumericTypeContext | null {
        return this.getRuleContext(0, SignedBinaryExactNumericTypeContext);
    }
    public unsignedBinaryExactNumericType(): UnsignedBinaryExactNumericTypeContext | null {
        return this.getRuleContext(0, UnsignedBinaryExactNumericTypeContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_binaryExactNumericType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterBinaryExactNumericType) {
             listener.enterBinaryExactNumericType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitBinaryExactNumericType) {
             listener.exitBinaryExactNumericType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitBinaryExactNumericType) {
            return visitor.visitBinaryExactNumericType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SignedBinaryExactNumericTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT8(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.INT8, 0);
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public INT16(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.INT16, 0);
    }
    public INT32(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.INT32, 0);
    }
    public INT64(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.INT64, 0);
    }
    public INT128(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.INT128, 0);
    }
    public INT256(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.INT256, 0);
    }
    public SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.SMALLINT, 0);
    }
    public INT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.INT, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_PAREN, 0);
    }
    public precision(): PrecisionContext | null {
        return this.getRuleContext(0, PrecisionContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_PAREN, 0);
    }
    public BIGINT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.BIGINT, 0);
    }
    public verboseBinaryExactNumericType(): VerboseBinaryExactNumericTypeContext | null {
        return this.getRuleContext(0, VerboseBinaryExactNumericTypeContext);
    }
    public SIGNED(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.SIGNED, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_signedBinaryExactNumericType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSignedBinaryExactNumericType) {
             listener.enterSignedBinaryExactNumericType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSignedBinaryExactNumericType) {
             listener.exitSignedBinaryExactNumericType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSignedBinaryExactNumericType) {
            return visitor.visitSignedBinaryExactNumericType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsignedBinaryExactNumericTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UINT8(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UINT8, 0);
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public UINT16(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UINT16, 0);
    }
    public UINT32(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UINT32, 0);
    }
    public UINT64(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UINT64, 0);
    }
    public UINT128(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UINT128, 0);
    }
    public UINT256(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UINT256, 0);
    }
    public USMALLINT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.USMALLINT, 0);
    }
    public UINT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UINT, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_PAREN, 0);
    }
    public precision(): PrecisionContext | null {
        return this.getRuleContext(0, PrecisionContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_PAREN, 0);
    }
    public UBIGINT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UBIGINT, 0);
    }
    public UNSIGNED(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UNSIGNED, 0);
    }
    public verboseBinaryExactNumericType(): VerboseBinaryExactNumericTypeContext | null {
        return this.getRuleContext(0, VerboseBinaryExactNumericTypeContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_unsignedBinaryExactNumericType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterUnsignedBinaryExactNumericType) {
             listener.enterUnsignedBinaryExactNumericType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitUnsignedBinaryExactNumericType) {
             listener.exitUnsignedBinaryExactNumericType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitUnsignedBinaryExactNumericType) {
            return visitor.visitUnsignedBinaryExactNumericType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VerboseBinaryExactNumericTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER8(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.INTEGER8, 0);
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public INTEGER16(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.INTEGER16, 0);
    }
    public INTEGER32(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.INTEGER32, 0);
    }
    public INTEGER64(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.INTEGER64, 0);
    }
    public INTEGER128(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.INTEGER128, 0);
    }
    public INTEGER256(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.INTEGER256, 0);
    }
    public SMALL(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.SMALL, 0);
    }
    public INTEGER(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.INTEGER, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_PAREN, 0);
    }
    public precision(): PrecisionContext | null {
        return this.getRuleContext(0, PrecisionContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_PAREN, 0);
    }
    public BIG(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.BIG, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_verboseBinaryExactNumericType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterVerboseBinaryExactNumericType) {
             listener.enterVerboseBinaryExactNumericType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitVerboseBinaryExactNumericType) {
             listener.exitVerboseBinaryExactNumericType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitVerboseBinaryExactNumericType) {
            return visitor.visitVerboseBinaryExactNumericType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DecimalExactNumericTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.DECIMAL, 0);
    }
    public DEC(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.DEC, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_PAREN, 0);
    }
    public precision(): PrecisionContext | null {
        return this.getRuleContext(0, PrecisionContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.COMMA, 0);
    }
    public scale(): ScaleContext | null {
        return this.getRuleContext(0, ScaleContext);
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_decimalExactNumericType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDecimalExactNumericType) {
             listener.enterDecimalExactNumericType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDecimalExactNumericType) {
             listener.exitDecimalExactNumericType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDecimalExactNumericType) {
            return visitor.visitDecimalExactNumericType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecisionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unsignedDecimalInteger(): UnsignedDecimalIntegerContext {
        return this.getRuleContext(0, UnsignedDecimalIntegerContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_precision;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPrecision) {
             listener.enterPrecision(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPrecision) {
             listener.exitPrecision(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPrecision) {
            return visitor.visitPrecision(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ScaleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unsignedDecimalInteger(): UnsignedDecimalIntegerContext {
        return this.getRuleContext(0, UnsignedDecimalIntegerContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_scale;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterScale) {
             listener.enterScale(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitScale) {
             listener.exitScale(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitScale) {
            return visitor.visitScale(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ApproximateNumericTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FLOAT16(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.FLOAT16, 0);
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public FLOAT32(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.FLOAT32, 0);
    }
    public FLOAT64(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.FLOAT64, 0);
    }
    public FLOAT128(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.FLOAT128, 0);
    }
    public FLOAT256(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.FLOAT256, 0);
    }
    public FLOAT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.FLOAT, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_PAREN, 0);
    }
    public precision(): PrecisionContext | null {
        return this.getRuleContext(0, PrecisionContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.COMMA, 0);
    }
    public scale(): ScaleContext | null {
        return this.getRuleContext(0, ScaleContext);
    }
    public REAL(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.REAL, 0);
    }
    public DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.DOUBLE, 0);
    }
    public PRECISION(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PRECISION, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_approximateNumericType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterApproximateNumericType) {
             listener.enterApproximateNumericType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitApproximateNumericType) {
             listener.exitApproximateNumericType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitApproximateNumericType) {
            return visitor.visitApproximateNumericType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TemporalTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public temporalInstantType(): TemporalInstantTypeContext | null {
        return this.getRuleContext(0, TemporalInstantTypeContext);
    }
    public temporalDurationType(): TemporalDurationTypeContext | null {
        return this.getRuleContext(0, TemporalDurationTypeContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_temporalType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTemporalType) {
             listener.enterTemporalType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTemporalType) {
             listener.exitTemporalType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTemporalType) {
            return visitor.visitTemporalType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TemporalInstantTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public datetimeType(): DatetimeTypeContext | null {
        return this.getRuleContext(0, DatetimeTypeContext);
    }
    public localdatetimeType(): LocaldatetimeTypeContext | null {
        return this.getRuleContext(0, LocaldatetimeTypeContext);
    }
    public dateType(): DateTypeContext | null {
        return this.getRuleContext(0, DateTypeContext);
    }
    public timeType(): TimeTypeContext | null {
        return this.getRuleContext(0, TimeTypeContext);
    }
    public localtimeType(): LocaltimeTypeContext | null {
        return this.getRuleContext(0, LocaltimeTypeContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_temporalInstantType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTemporalInstantType) {
             listener.enterTemporalInstantType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTemporalInstantType) {
             listener.exitTemporalInstantType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTemporalInstantType) {
            return visitor.visitTemporalInstantType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatetimeTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZONED(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ZONED, 0);
    }
    public DATETIME(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.DATETIME, 0);
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TIMESTAMP, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.WITH, 0);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TIME, 0);
    }
    public ZONE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ZONE, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_datetimeType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDatetimeType) {
             listener.enterDatetimeType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDatetimeType) {
             listener.exitDatetimeType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDatetimeType) {
            return visitor.visitDatetimeType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LocaldatetimeTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LOCAL, 0);
    }
    public DATETIME(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.DATETIME, 0);
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TIMESTAMP, 0);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.WITHOUT, 0);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TIME, 0);
    }
    public ZONE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ZONE, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_localdatetimeType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLocaldatetimeType) {
             listener.enterLocaldatetimeType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLocaldatetimeType) {
             listener.exitLocaldatetimeType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLocaldatetimeType) {
            return visitor.visitLocaldatetimeType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DateTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATE(): antlr.TerminalNode {
        return this.getToken(GQLParser.DATE, 0)!;
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_dateType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDateType) {
             listener.enterDateType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDateType) {
             listener.exitDateType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDateType) {
            return visitor.visitDateType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimeTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ZONED(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ZONED, 0);
    }
    public TIME(): antlr.TerminalNode[];
    public TIME(i: number): antlr.TerminalNode | null;
    public TIME(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.TIME);
    	} else {
    		return this.getToken(GQLParser.TIME, i);
    	}
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.WITH, 0);
    }
    public ZONE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ZONE, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_timeType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTimeType) {
             listener.enterTimeType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTimeType) {
             listener.exitTimeType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTimeType) {
            return visitor.visitTimeType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LocaltimeTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LOCAL, 0);
    }
    public TIME(): antlr.TerminalNode[];
    public TIME(i: number): antlr.TerminalNode | null;
    public TIME(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.TIME);
    	} else {
    		return this.getToken(GQLParser.TIME, i);
    	}
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.WITHOUT, 0);
    }
    public ZONE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ZONE, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_localtimeType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLocaltimeType) {
             listener.enterLocaltimeType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLocaltimeType) {
             listener.exitLocaltimeType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLocaltimeType) {
            return visitor.visitLocaltimeType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TemporalDurationTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DURATION(): antlr.TerminalNode {
        return this.getToken(GQLParser.DURATION, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public temporalDurationQualifier(): TemporalDurationQualifierContext {
        return this.getRuleContext(0, TemporalDurationQualifierContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_temporalDurationType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTemporalDurationType) {
             listener.enterTemporalDurationType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTemporalDurationType) {
             listener.exitTemporalDurationType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTemporalDurationType) {
            return visitor.visitTemporalDurationType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TemporalDurationQualifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.YEAR, 0);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(GQLParser.TO, 0)!;
    }
    public MONTH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.MONTH, 0);
    }
    public DAY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.DAY, 0);
    }
    public SECOND(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.SECOND, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_temporalDurationQualifier;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTemporalDurationQualifier) {
             listener.enterTemporalDurationQualifier(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTemporalDurationQualifier) {
             listener.exitTemporalDurationQualifier(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTemporalDurationQualifier) {
            return visitor.visitTemporalDurationQualifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReferenceValueTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public graphReferenceValueType(): GraphReferenceValueTypeContext | null {
        return this.getRuleContext(0, GraphReferenceValueTypeContext);
    }
    public bindingTableReferenceValueType(): BindingTableReferenceValueTypeContext | null {
        return this.getRuleContext(0, BindingTableReferenceValueTypeContext);
    }
    public nodeReferenceValueType(): NodeReferenceValueTypeContext | null {
        return this.getRuleContext(0, NodeReferenceValueTypeContext);
    }
    public edgeReferenceValueType(): EdgeReferenceValueTypeContext | null {
        return this.getRuleContext(0, EdgeReferenceValueTypeContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_referenceValueType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterReferenceValueType) {
             listener.enterReferenceValueType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitReferenceValueType) {
             listener.exitReferenceValueType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitReferenceValueType) {
            return visitor.visitReferenceValueType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ImmaterialValueTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nullType(): NullTypeContext | null {
        return this.getRuleContext(0, NullTypeContext);
    }
    public emptyType(): EmptyTypeContext | null {
        return this.getRuleContext(0, EmptyTypeContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_immaterialValueType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterImmaterialValueType) {
             listener.enterImmaterialValueType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitImmaterialValueType) {
             listener.exitImmaterialValueType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitImmaterialValueType) {
            return visitor.visitImmaterialValueType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NullTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULL_KW(): antlr.TerminalNode {
        return this.getToken(GQLParser.NULL_KW, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nullType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNullType) {
             listener.enterNullType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNullType) {
             listener.exitNullType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNullType) {
            return visitor.visitNullType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EmptyTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULL_KW(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NULL_KW, 0);
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public NOTHING(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NOTHING, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_emptyType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEmptyType) {
             listener.enterEmptyType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEmptyType) {
             listener.exitEmptyType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEmptyType) {
            return visitor.visitEmptyType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GraphReferenceValueTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public openGraphReferenceValueType(): OpenGraphReferenceValueTypeContext | null {
        return this.getRuleContext(0, OpenGraphReferenceValueTypeContext);
    }
    public closedGraphReferenceValueType(): ClosedGraphReferenceValueTypeContext | null {
        return this.getRuleContext(0, ClosedGraphReferenceValueTypeContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_graphReferenceValueType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGraphReferenceValueType) {
             listener.enterGraphReferenceValueType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGraphReferenceValueType) {
             listener.exitGraphReferenceValueType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGraphReferenceValueType) {
            return visitor.visitGraphReferenceValueType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ClosedGraphReferenceValueTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRAPH(): antlr.TerminalNode {
        return this.getToken(GQLParser.GRAPH, 0)!;
    }
    public nestedGraphTypeSpecification(): NestedGraphTypeSpecificationContext {
        return this.getRuleContext(0, NestedGraphTypeSpecificationContext)!;
    }
    public PROPERTY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PROPERTY, 0);
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_closedGraphReferenceValueType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterClosedGraphReferenceValueType) {
             listener.enterClosedGraphReferenceValueType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitClosedGraphReferenceValueType) {
             listener.exitClosedGraphReferenceValueType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitClosedGraphReferenceValueType) {
            return visitor.visitClosedGraphReferenceValueType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OpenGraphReferenceValueTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ANY(): antlr.TerminalNode {
        return this.getToken(GQLParser.ANY, 0)!;
    }
    public GRAPH(): antlr.TerminalNode {
        return this.getToken(GQLParser.GRAPH, 0)!;
    }
    public PROPERTY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PROPERTY, 0);
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_openGraphReferenceValueType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterOpenGraphReferenceValueType) {
             listener.enterOpenGraphReferenceValueType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitOpenGraphReferenceValueType) {
             listener.exitOpenGraphReferenceValueType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitOpenGraphReferenceValueType) {
            return visitor.visitOpenGraphReferenceValueType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BindingTableReferenceValueTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bindingTableType(): BindingTableTypeContext {
        return this.getRuleContext(0, BindingTableTypeContext)!;
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_bindingTableReferenceValueType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterBindingTableReferenceValueType) {
             listener.enterBindingTableReferenceValueType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitBindingTableReferenceValueType) {
             listener.exitBindingTableReferenceValueType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitBindingTableReferenceValueType) {
            return visitor.visitBindingTableReferenceValueType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NodeReferenceValueTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public openNodeReferenceValueType(): OpenNodeReferenceValueTypeContext | null {
        return this.getRuleContext(0, OpenNodeReferenceValueTypeContext);
    }
    public closedNodeReferenceValueType(): ClosedNodeReferenceValueTypeContext | null {
        return this.getRuleContext(0, ClosedNodeReferenceValueTypeContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nodeReferenceValueType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNodeReferenceValueType) {
             listener.enterNodeReferenceValueType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNodeReferenceValueType) {
             listener.exitNodeReferenceValueType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNodeReferenceValueType) {
            return visitor.visitNodeReferenceValueType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ClosedNodeReferenceValueTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nodeTypeSpecification(): NodeTypeSpecificationContext {
        return this.getRuleContext(0, NodeTypeSpecificationContext)!;
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_closedNodeReferenceValueType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterClosedNodeReferenceValueType) {
             listener.enterClosedNodeReferenceValueType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitClosedNodeReferenceValueType) {
             listener.exitClosedNodeReferenceValueType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitClosedNodeReferenceValueType) {
            return visitor.visitClosedNodeReferenceValueType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OpenNodeReferenceValueTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nodeSynonym(): NodeSynonymContext {
        return this.getRuleContext(0, NodeSynonymContext)!;
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ANY, 0);
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_openNodeReferenceValueType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterOpenNodeReferenceValueType) {
             listener.enterOpenNodeReferenceValueType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitOpenNodeReferenceValueType) {
             listener.exitOpenNodeReferenceValueType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitOpenNodeReferenceValueType) {
            return visitor.visitOpenNodeReferenceValueType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EdgeReferenceValueTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public openEdgeReferenceValueType(): OpenEdgeReferenceValueTypeContext | null {
        return this.getRuleContext(0, OpenEdgeReferenceValueTypeContext);
    }
    public closedEdgeReferenceValueType(): ClosedEdgeReferenceValueTypeContext | null {
        return this.getRuleContext(0, ClosedEdgeReferenceValueTypeContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_edgeReferenceValueType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEdgeReferenceValueType) {
             listener.enterEdgeReferenceValueType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEdgeReferenceValueType) {
             listener.exitEdgeReferenceValueType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEdgeReferenceValueType) {
            return visitor.visitEdgeReferenceValueType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ClosedEdgeReferenceValueTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public edgeTypeSpecification(): EdgeTypeSpecificationContext {
        return this.getRuleContext(0, EdgeTypeSpecificationContext)!;
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_closedEdgeReferenceValueType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterClosedEdgeReferenceValueType) {
             listener.enterClosedEdgeReferenceValueType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitClosedEdgeReferenceValueType) {
             listener.exitClosedEdgeReferenceValueType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitClosedEdgeReferenceValueType) {
            return visitor.visitClosedEdgeReferenceValueType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OpenEdgeReferenceValueTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public edgeSynonym(): EdgeSynonymContext {
        return this.getRuleContext(0, EdgeSynonymContext)!;
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ANY, 0);
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_openEdgeReferenceValueType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterOpenEdgeReferenceValueType) {
             listener.enterOpenEdgeReferenceValueType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitOpenEdgeReferenceValueType) {
             listener.exitOpenEdgeReferenceValueType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitOpenEdgeReferenceValueType) {
            return visitor.visitOpenEdgeReferenceValueType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathValueTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PATH(): antlr.TerminalNode {
        return this.getToken(GQLParser.PATH, 0)!;
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_pathValueType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPathValueType) {
             listener.enterPathValueType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPathValueType) {
             listener.exitPathValueType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPathValueType) {
            return visitor.visitPathValueType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListValueTypeNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public listValueTypeNameSynonym(): ListValueTypeNameSynonymContext {
        return this.getRuleContext(0, ListValueTypeNameSynonymContext)!;
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.GROUP, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_listValueTypeName;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterListValueTypeName) {
             listener.enterListValueTypeName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitListValueTypeName) {
             listener.exitListValueTypeName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitListValueTypeName) {
            return visitor.visitListValueTypeName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListValueTypeNameSynonymContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIST(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LIST, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ARRAY, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_listValueTypeNameSynonym;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterListValueTypeNameSynonym) {
             listener.enterListValueTypeNameSynonym(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitListValueTypeNameSynonym) {
             listener.exitListValueTypeNameSynonym(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitListValueTypeNameSynonym) {
            return visitor.visitListValueTypeNameSynonym(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RecordTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RECORD(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RECORD, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ANY, 0);
    }
    public notNull(): NotNullContext | null {
        return this.getRuleContext(0, NotNullContext);
    }
    public fieldTypesSpecification(): FieldTypesSpecificationContext | null {
        return this.getRuleContext(0, FieldTypesSpecificationContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_recordType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterRecordType) {
             listener.enterRecordType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitRecordType) {
             listener.exitRecordType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitRecordType) {
            return visitor.visitRecordType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldTypesSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_BRACE(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_BRACE, 0)!;
    }
    public RIGHT_BRACE(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_BRACE, 0)!;
    }
    public fieldTypeList(): FieldTypeListContext | null {
        return this.getRuleContext(0, FieldTypeListContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_fieldTypesSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFieldTypesSpecification) {
             listener.enterFieldTypesSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFieldTypesSpecification) {
             listener.exitFieldTypesSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFieldTypesSpecification) {
            return visitor.visitFieldTypesSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fieldType(): FieldTypeContext[];
    public fieldType(i: number): FieldTypeContext | null;
    public fieldType(i?: number): FieldTypeContext[] | FieldTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FieldTypeContext);
        }

        return this.getRuleContext(i, FieldTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_fieldTypeList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFieldTypeList) {
             listener.enterFieldTypeList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFieldTypeList) {
             listener.exitFieldTypeList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFieldTypeList) {
            return visitor.visitFieldTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotNullContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NOT(): antlr.TerminalNode {
        return this.getToken(GQLParser.NOT, 0)!;
    }
    public NULL_KW(): antlr.TerminalNode {
        return this.getToken(GQLParser.NULL_KW, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_notNull;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNotNull) {
             listener.enterNotNull(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNotNull) {
             listener.exitNotNull(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNotNull) {
            return visitor.visitNotNull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fieldName(): FieldNameContext {
        return this.getRuleContext(0, FieldNameContext)!;
    }
    public valueType(): ValueTypeContext {
        return this.getRuleContext(0, ValueTypeContext)!;
    }
    public typed(): TypedContext | null {
        return this.getRuleContext(0, TypedContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_fieldType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFieldType) {
             listener.enterFieldType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFieldType) {
             listener.exitFieldType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFieldType) {
            return visitor.visitFieldType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SearchConditionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public booleanValueExpression(): BooleanValueExpressionContext {
        return this.getRuleContext(0, BooleanValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_searchCondition;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSearchCondition) {
             listener.enterSearchCondition(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSearchCondition) {
             listener.exitSearchCondition(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSearchCondition) {
            return visitor.visitSearchCondition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredicateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public existsPredicate(): ExistsPredicateContext | null {
        return this.getRuleContext(0, ExistsPredicateContext);
    }
    public nullPredicate(): NullPredicateContext | null {
        return this.getRuleContext(0, NullPredicateContext);
    }
    public valueTypePredicate(): ValueTypePredicateContext | null {
        return this.getRuleContext(0, ValueTypePredicateContext);
    }
    public directedPredicate(): DirectedPredicateContext | null {
        return this.getRuleContext(0, DirectedPredicateContext);
    }
    public labeledPredicate(): LabeledPredicateContext | null {
        return this.getRuleContext(0, LabeledPredicateContext);
    }
    public sourceDestinationPredicate(): SourceDestinationPredicateContext | null {
        return this.getRuleContext(0, SourceDestinationPredicateContext);
    }
    public all_differentPredicate(): All_differentPredicateContext | null {
        return this.getRuleContext(0, All_differentPredicateContext);
    }
    public samePredicate(): SamePredicateContext | null {
        return this.getRuleContext(0, SamePredicateContext);
    }
    public property_existsPredicate(): Property_existsPredicateContext | null {
        return this.getRuleContext(0, Property_existsPredicateContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_predicate;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPredicate) {
             listener.enterPredicate(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPredicate) {
             listener.exitPredicate(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPredicate) {
            return visitor.visitPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CompOpContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUALS_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.EQUALS_OPERATOR, 0);
    }
    public NOT_EQUALS_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NOT_EQUALS_OPERATOR, 0);
    }
    public LEFT_ANGLE_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
    }
    public RIGHT_ANGLE_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0);
    }
    public LESS_THAN_OR_EQUALS_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LESS_THAN_OR_EQUALS_OPERATOR, 0);
    }
    public GREATER_THAN_OR_EQUALS_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.GREATER_THAN_OR_EQUALS_OPERATOR, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_compOp;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCompOp) {
             listener.enterCompOp(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCompOp) {
             listener.exitCompOp(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCompOp) {
            return visitor.visitCompOp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExistsPredicateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(GQLParser.EXISTS, 0)!;
    }
    public LEFT_BRACE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_BRACE, 0);
    }
    public graphPattern(): GraphPatternContext | null {
        return this.getRuleContext(0, GraphPatternContext);
    }
    public RIGHT_BRACE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_BRACE, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_PAREN, 0);
    }
    public matchStatementBlock(): MatchStatementBlockContext | null {
        return this.getRuleContext(0, MatchStatementBlockContext);
    }
    public nestedQuerySpecification(): NestedQuerySpecificationContext | null {
        return this.getRuleContext(0, NestedQuerySpecificationContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_existsPredicate;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterExistsPredicate) {
             listener.enterExistsPredicate(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitExistsPredicate) {
             listener.exitExistsPredicate(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitExistsPredicate) {
            return visitor.visitExistsPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NullPredicateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueExpressionPrimary(): ValueExpressionPrimaryContext {
        return this.getRuleContext(0, ValueExpressionPrimaryContext)!;
    }
    public nullPredicatePart2(): NullPredicatePart2Context {
        return this.getRuleContext(0, NullPredicatePart2Context)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nullPredicate;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNullPredicate) {
             listener.enterNullPredicate(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNullPredicate) {
             listener.exitNullPredicate(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNullPredicate) {
            return visitor.visitNullPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NullPredicatePart2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(GQLParser.IS, 0)!;
    }
    public NULL_KW(): antlr.TerminalNode {
        return this.getToken(GQLParser.NULL_KW, 0)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nullPredicatePart2;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNullPredicatePart2) {
             listener.enterNullPredicatePart2(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNullPredicatePart2) {
             listener.exitNullPredicatePart2(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNullPredicatePart2) {
            return visitor.visitNullPredicatePart2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueTypePredicateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueExpressionPrimary(): ValueExpressionPrimaryContext {
        return this.getRuleContext(0, ValueExpressionPrimaryContext)!;
    }
    public valueTypePredicatePart2(): ValueTypePredicatePart2Context {
        return this.getRuleContext(0, ValueTypePredicatePart2Context)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_valueTypePredicate;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterValueTypePredicate) {
             listener.enterValueTypePredicate(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitValueTypePredicate) {
             listener.exitValueTypePredicate(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitValueTypePredicate) {
            return visitor.visitValueTypePredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueTypePredicatePart2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(GQLParser.IS, 0)!;
    }
    public typed(): TypedContext {
        return this.getRuleContext(0, TypedContext)!;
    }
    public valueType(): ValueTypeContext {
        return this.getRuleContext(0, ValueTypeContext)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_valueTypePredicatePart2;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterValueTypePredicatePart2) {
             listener.enterValueTypePredicatePart2(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitValueTypePredicatePart2) {
             listener.exitValueTypePredicatePart2(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitValueTypePredicatePart2) {
            return visitor.visitValueTypePredicatePart2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NormalizedPredicatePart2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(GQLParser.IS, 0)!;
    }
    public NORMALIZED(): antlr.TerminalNode {
        return this.getToken(GQLParser.NORMALIZED, 0)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NOT, 0);
    }
    public normalForm(): NormalFormContext | null {
        return this.getRuleContext(0, NormalFormContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_normalizedPredicatePart2;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNormalizedPredicatePart2) {
             listener.enterNormalizedPredicatePart2(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNormalizedPredicatePart2) {
             listener.exitNormalizedPredicatePart2(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNormalizedPredicatePart2) {
            return visitor.visitNormalizedPredicatePart2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DirectedPredicateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public elementVariableReference(): ElementVariableReferenceContext {
        return this.getRuleContext(0, ElementVariableReferenceContext)!;
    }
    public directedPredicatePart2(): DirectedPredicatePart2Context {
        return this.getRuleContext(0, DirectedPredicatePart2Context)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_directedPredicate;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDirectedPredicate) {
             listener.enterDirectedPredicate(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDirectedPredicate) {
             listener.exitDirectedPredicate(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDirectedPredicate) {
            return visitor.visitDirectedPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DirectedPredicatePart2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(GQLParser.IS, 0)!;
    }
    public DIRECTED(): antlr.TerminalNode {
        return this.getToken(GQLParser.DIRECTED, 0)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_directedPredicatePart2;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDirectedPredicatePart2) {
             listener.enterDirectedPredicatePart2(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDirectedPredicatePart2) {
             listener.exitDirectedPredicatePart2(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDirectedPredicatePart2) {
            return visitor.visitDirectedPredicatePart2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LabeledPredicateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public elementVariableReference(): ElementVariableReferenceContext {
        return this.getRuleContext(0, ElementVariableReferenceContext)!;
    }
    public labeledPredicatePart2(): LabeledPredicatePart2Context {
        return this.getRuleContext(0, LabeledPredicatePart2Context)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_labeledPredicate;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLabeledPredicate) {
             listener.enterLabeledPredicate(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLabeledPredicate) {
             listener.exitLabeledPredicate(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLabeledPredicate) {
            return visitor.visitLabeledPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LabeledPredicatePart2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public isLabeledOrColon(): IsLabeledOrColonContext {
        return this.getRuleContext(0, IsLabeledOrColonContext)!;
    }
    public labelExpression(): LabelExpressionContext {
        return this.getRuleContext(0, LabelExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_labeledPredicatePart2;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLabeledPredicatePart2) {
             listener.enterLabeledPredicatePart2(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLabeledPredicatePart2) {
             listener.exitLabeledPredicatePart2(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLabeledPredicatePart2) {
            return visitor.visitLabeledPredicatePart2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IsLabeledOrColonContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.IS, 0);
    }
    public LABELED(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LABELED, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NOT, 0);
    }
    public COLON(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.COLON, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_isLabeledOrColon;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterIsLabeledOrColon) {
             listener.enterIsLabeledOrColon(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitIsLabeledOrColon) {
             listener.exitIsLabeledOrColon(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitIsLabeledOrColon) {
            return visitor.visitIsLabeledOrColon(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceDestinationPredicateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nodeReference(): NodeReferenceContext {
        return this.getRuleContext(0, NodeReferenceContext)!;
    }
    public sourcePredicatePart2(): SourcePredicatePart2Context | null {
        return this.getRuleContext(0, SourcePredicatePart2Context);
    }
    public destinationPredicatePart2(): DestinationPredicatePart2Context | null {
        return this.getRuleContext(0, DestinationPredicatePart2Context);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_sourceDestinationPredicate;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSourceDestinationPredicate) {
             listener.enterSourceDestinationPredicate(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSourceDestinationPredicate) {
             listener.exitSourceDestinationPredicate(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSourceDestinationPredicate) {
            return visitor.visitSourceDestinationPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NodeReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public elementVariableReference(): ElementVariableReferenceContext {
        return this.getRuleContext(0, ElementVariableReferenceContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nodeReference;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNodeReference) {
             listener.enterNodeReference(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNodeReference) {
             listener.exitNodeReference(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNodeReference) {
            return visitor.visitNodeReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourcePredicatePart2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(GQLParser.IS, 0)!;
    }
    public SOURCE(): antlr.TerminalNode {
        return this.getToken(GQLParser.SOURCE, 0)!;
    }
    public OF(): antlr.TerminalNode {
        return this.getToken(GQLParser.OF, 0)!;
    }
    public edgeReference(): EdgeReferenceContext {
        return this.getRuleContext(0, EdgeReferenceContext)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_sourcePredicatePart2;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSourcePredicatePart2) {
             listener.enterSourcePredicatePart2(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSourcePredicatePart2) {
             listener.exitSourcePredicatePart2(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSourcePredicatePart2) {
            return visitor.visitSourcePredicatePart2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DestinationPredicatePart2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(GQLParser.IS, 0)!;
    }
    public DESTINATION(): antlr.TerminalNode {
        return this.getToken(GQLParser.DESTINATION, 0)!;
    }
    public OF(): antlr.TerminalNode {
        return this.getToken(GQLParser.OF, 0)!;
    }
    public edgeReference(): EdgeReferenceContext {
        return this.getRuleContext(0, EdgeReferenceContext)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_destinationPredicatePart2;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDestinationPredicatePart2) {
             listener.enterDestinationPredicatePart2(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDestinationPredicatePart2) {
             listener.exitDestinationPredicatePart2(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDestinationPredicatePart2) {
            return visitor.visitDestinationPredicatePart2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EdgeReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public elementVariableReference(): ElementVariableReferenceContext {
        return this.getRuleContext(0, ElementVariableReferenceContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_edgeReference;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEdgeReference) {
             listener.enterEdgeReference(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEdgeReference) {
             listener.exitEdgeReference(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEdgeReference) {
            return visitor.visitEdgeReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class All_differentPredicateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL_DIFFERENT(): antlr.TerminalNode {
        return this.getToken(GQLParser.ALL_DIFFERENT, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public elementVariableReference(): ElementVariableReferenceContext[];
    public elementVariableReference(i: number): ElementVariableReferenceContext | null;
    public elementVariableReference(i?: number): ElementVariableReferenceContext[] | ElementVariableReferenceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ElementVariableReferenceContext);
        }

        return this.getRuleContext(i, ElementVariableReferenceContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_all_differentPredicate;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterAll_differentPredicate) {
             listener.enterAll_differentPredicate(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitAll_differentPredicate) {
             listener.exitAll_differentPredicate(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitAll_differentPredicate) {
            return visitor.visitAll_differentPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SamePredicateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SAME(): antlr.TerminalNode {
        return this.getToken(GQLParser.SAME, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public elementVariableReference(): ElementVariableReferenceContext[];
    public elementVariableReference(i: number): ElementVariableReferenceContext | null;
    public elementVariableReference(i?: number): ElementVariableReferenceContext[] | ElementVariableReferenceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ElementVariableReferenceContext);
        }

        return this.getRuleContext(i, ElementVariableReferenceContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_samePredicate;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSamePredicate) {
             listener.enterSamePredicate(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSamePredicate) {
             listener.exitSamePredicate(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSamePredicate) {
            return visitor.visitSamePredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Property_existsPredicateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PROPERTY_EXISTS(): antlr.TerminalNode {
        return this.getToken(GQLParser.PROPERTY_EXISTS, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public elementVariableReference(): ElementVariableReferenceContext {
        return this.getRuleContext(0, ElementVariableReferenceContext)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(GQLParser.COMMA, 0)!;
    }
    public propertyName(): PropertyNameContext {
        return this.getRuleContext(0, PropertyNameContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_property_existsPredicate;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterProperty_existsPredicate) {
             listener.enterProperty_existsPredicate(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitProperty_existsPredicate) {
             listener.exitProperty_existsPredicate(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitProperty_existsPredicate) {
            return visitor.visitProperty_existsPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_valueExpression;
    }
    public override copyFrom(ctx: ValueExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class SignedExprAltContext extends ValueExpressionContext {
    public _sign?: Token | null;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public PLUS_SIGN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PLUS_SIGN, 0);
    }
    public MINUS_SIGN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.MINUS_SIGN, 0);
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSignedExprAlt) {
             listener.enterSignedExprAlt(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSignedExprAlt) {
             listener.exitSignedExprAlt(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSignedExprAlt) {
            return visitor.visitSignedExprAlt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PredicateExprAltContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public predicate(): PredicateContext {
        return this.getRuleContext(0, PredicateContext)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPredicateExprAlt) {
             listener.enterPredicateExprAlt(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPredicateExprAlt) {
             listener.exitPredicateExprAlt(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPredicateExprAlt) {
            return visitor.visitPredicateExprAlt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NotExprAltContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NOT(): antlr.TerminalNode {
        return this.getToken(GQLParser.NOT, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNotExprAlt) {
             listener.enterNotExprAlt(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNotExprAlt) {
             listener.exitNotExprAlt(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNotExprAlt) {
            return visitor.visitNotExprAlt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PropertyGraphExprAltContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GRAPH(): antlr.TerminalNode {
        return this.getToken(GQLParser.GRAPH, 0)!;
    }
    public graphExpression(): GraphExpressionContext {
        return this.getRuleContext(0, GraphExpressionContext)!;
    }
    public PROPERTY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PROPERTY, 0);
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPropertyGraphExprAlt) {
             listener.enterPropertyGraphExprAlt(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPropertyGraphExprAlt) {
             listener.exitPropertyGraphExprAlt(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPropertyGraphExprAlt) {
            return visitor.visitPropertyGraphExprAlt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BindingTableExprAltContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(GQLParser.TABLE, 0)!;
    }
    public bindingTableExpression(): BindingTableExpressionContext {
        return this.getRuleContext(0, BindingTableExpressionContext)!;
    }
    public BINDING(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.BINDING, 0);
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterBindingTableExprAlt) {
             listener.enterBindingTableExprAlt(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitBindingTableExprAlt) {
             listener.exitBindingTableExprAlt(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitBindingTableExprAlt) {
            return visitor.visitBindingTableExprAlt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ValueFunctionExprAltContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueFunction(): ValueFunctionContext {
        return this.getRuleContext(0, ValueFunctionContext)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterValueFunctionExprAlt) {
             listener.enterValueFunctionExprAlt(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitValueFunctionExprAlt) {
             listener.exitValueFunctionExprAlt(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitValueFunctionExprAlt) {
            return visitor.visitValueFunctionExprAlt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PrimaryExprAltContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpressionPrimary(): ValueExpressionPrimaryContext {
        return this.getRuleContext(0, ValueExpressionPrimaryContext)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPrimaryExprAlt) {
             listener.enterPrimaryExprAlt(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPrimaryExprAlt) {
             listener.exitPrimaryExprAlt(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPrimaryExprAlt) {
            return visitor.visitPrimaryExprAlt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MultDivExprAltContext extends ValueExpressionContext {
    public _operator?: Token | null;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ASTERISK, 0);
    }
    public SOLIDUS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.SOLIDUS, 0);
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterMultDivExprAlt) {
             listener.enterMultDivExprAlt(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitMultDivExprAlt) {
             listener.exitMultDivExprAlt(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitMultDivExprAlt) {
            return visitor.visitMultDivExprAlt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AddSubtractExprAltContext extends ValueExpressionContext {
    public _operator?: Token | null;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public PLUS_SIGN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PLUS_SIGN, 0);
    }
    public MINUS_SIGN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.MINUS_SIGN, 0);
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterAddSubtractExprAlt) {
             listener.enterAddSubtractExprAlt(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitAddSubtractExprAlt) {
             listener.exitAddSubtractExprAlt(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitAddSubtractExprAlt) {
            return visitor.visitAddSubtractExprAlt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ConcatenationExprAltContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public CONCATENATION_OPERATOR(): antlr.TerminalNode {
        return this.getToken(GQLParser.CONCATENATION_OPERATOR, 0)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterConcatenationExprAlt) {
             listener.enterConcatenationExprAlt(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitConcatenationExprAlt) {
             listener.exitConcatenationExprAlt(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitConcatenationExprAlt) {
            return visitor.visitConcatenationExprAlt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ComparisonExprAltContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public compOp(): CompOpContext {
        return this.getRuleContext(0, CompOpContext)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterComparisonExprAlt) {
             listener.enterComparisonExprAlt(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitComparisonExprAlt) {
             listener.exitComparisonExprAlt(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitComparisonExprAlt) {
            return visitor.visitComparisonExprAlt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ConjunctiveExprAltContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(GQLParser.AND, 0)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterConjunctiveExprAlt) {
             listener.enterConjunctiveExprAlt(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitConjunctiveExprAlt) {
             listener.exitConjunctiveExprAlt(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitConjunctiveExprAlt) {
            return visitor.visitConjunctiveExprAlt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DisjunctiveExprAltContext extends ValueExpressionContext {
    public _operator?: Token | null;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.OR, 0);
    }
    public XOR(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.XOR, 0);
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDisjunctiveExprAlt) {
             listener.enterDisjunctiveExprAlt(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDisjunctiveExprAlt) {
             listener.exitDisjunctiveExprAlt(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDisjunctiveExprAlt) {
            return visitor.visitDisjunctiveExprAlt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NormalizedPredicateExprAltContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public normalizedPredicatePart2(): NormalizedPredicatePart2Context {
        return this.getRuleContext(0, NormalizedPredicatePart2Context)!;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNormalizedPredicateExprAlt) {
             listener.enterNormalizedPredicateExprAlt(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNormalizedPredicateExprAlt) {
             listener.exitNormalizedPredicateExprAlt(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNormalizedPredicateExprAlt) {
            return visitor.visitNormalizedPredicateExprAlt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IsNotExprAltContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(GQLParser.IS, 0)!;
    }
    public truthValue(): TruthValueContext {
        return this.getRuleContext(0, TruthValueContext)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NOT, 0);
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterIsNotExprAlt) {
             listener.enterIsNotExprAlt(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitIsNotExprAlt) {
             listener.exitIsNotExprAlt(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitIsNotExprAlt) {
            return visitor.visitIsNotExprAlt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numericValueFunction(): NumericValueFunctionContext | null {
        return this.getRuleContext(0, NumericValueFunctionContext);
    }
    public datetimeSubtraction(): DatetimeSubtractionContext | null {
        return this.getRuleContext(0, DatetimeSubtractionContext);
    }
    public datetimeValueFunction(): DatetimeValueFunctionContext | null {
        return this.getRuleContext(0, DatetimeValueFunctionContext);
    }
    public durationValueFunction(): DurationValueFunctionContext | null {
        return this.getRuleContext(0, DurationValueFunctionContext);
    }
    public characterOrByteStringFunction(): CharacterOrByteStringFunctionContext | null {
        return this.getRuleContext(0, CharacterOrByteStringFunctionContext);
    }
    public listValueFunction(): ListValueFunctionContext | null {
        return this.getRuleContext(0, ListValueFunctionContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_valueFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterValueFunction) {
             listener.enterValueFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitValueFunction) {
             listener.exitValueFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitValueFunction) {
            return visitor.visitValueFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_booleanValueExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterBooleanValueExpression) {
             listener.enterBooleanValueExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitBooleanValueExpression) {
             listener.exitBooleanValueExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitBooleanValueExpression) {
            return visitor.visitBooleanValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CharacterOrByteStringFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public subCharacterOrByteString(): SubCharacterOrByteStringContext | null {
        return this.getRuleContext(0, SubCharacterOrByteStringContext);
    }
    public trimSingleCharacterOrByteString(): TrimSingleCharacterOrByteStringContext | null {
        return this.getRuleContext(0, TrimSingleCharacterOrByteStringContext);
    }
    public foldCharacterString(): FoldCharacterStringContext | null {
        return this.getRuleContext(0, FoldCharacterStringContext);
    }
    public trimMultiCharacterCharacterString(): TrimMultiCharacterCharacterStringContext | null {
        return this.getRuleContext(0, TrimMultiCharacterCharacterStringContext);
    }
    public normalizeCharacterString(): NormalizeCharacterStringContext | null {
        return this.getRuleContext(0, NormalizeCharacterStringContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_characterOrByteStringFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCharacterOrByteStringFunction) {
             listener.enterCharacterOrByteStringFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCharacterOrByteStringFunction) {
             listener.exitCharacterOrByteStringFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCharacterOrByteStringFunction) {
            return visitor.visitCharacterOrByteStringFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubCharacterOrByteStringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(GQLParser.COMMA, 0)!;
    }
    public stringLength(): StringLengthContext {
        return this.getRuleContext(0, StringLengthContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_subCharacterOrByteString;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSubCharacterOrByteString) {
             listener.enterSubCharacterOrByteString(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSubCharacterOrByteString) {
             listener.exitSubCharacterOrByteString(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSubCharacterOrByteString) {
            return visitor.visitSubCharacterOrByteString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrimSingleCharacterOrByteStringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRIM(): antlr.TerminalNode {
        return this.getToken(GQLParser.TRIM, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public trimOperands(): TrimOperandsContext {
        return this.getRuleContext(0, TrimOperandsContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_trimSingleCharacterOrByteString;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTrimSingleCharacterOrByteString) {
             listener.enterTrimSingleCharacterOrByteString(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTrimSingleCharacterOrByteString) {
             listener.exitTrimSingleCharacterOrByteString(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTrimSingleCharacterOrByteString) {
            return visitor.visitTrimSingleCharacterOrByteString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FoldCharacterStringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public UPPER(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UPPER, 0);
    }
    public LOWER(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LOWER, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_foldCharacterString;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFoldCharacterString) {
             listener.enterFoldCharacterString(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFoldCharacterString) {
             listener.exitFoldCharacterString(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFoldCharacterString) {
            return visitor.visitFoldCharacterString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrimMultiCharacterCharacterStringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public BTRIM(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.BTRIM, 0);
    }
    public LTRIM(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LTRIM, 0);
    }
    public RTRIM(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RTRIM, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_trimMultiCharacterCharacterString;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTrimMultiCharacterCharacterString) {
             listener.enterTrimMultiCharacterCharacterString(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTrimMultiCharacterCharacterString) {
             listener.exitTrimMultiCharacterCharacterString(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTrimMultiCharacterCharacterString) {
            return visitor.visitTrimMultiCharacterCharacterString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NormalizeCharacterStringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NORMALIZE(): antlr.TerminalNode {
        return this.getToken(GQLParser.NORMALIZE, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.COMMA, 0);
    }
    public normalForm(): NormalFormContext | null {
        return this.getRuleContext(0, NormalFormContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_normalizeCharacterString;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNormalizeCharacterString) {
             listener.enterNormalizeCharacterString(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNormalizeCharacterString) {
             listener.exitNormalizeCharacterString(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNormalizeCharacterString) {
            return visitor.visitNormalizeCharacterString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NodeReferenceValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueExpressionPrimary(): ValueExpressionPrimaryContext {
        return this.getRuleContext(0, ValueExpressionPrimaryContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nodeReferenceValueExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNodeReferenceValueExpression) {
             listener.enterNodeReferenceValueExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNodeReferenceValueExpression) {
             listener.exitNodeReferenceValueExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNodeReferenceValueExpression) {
            return visitor.visitNodeReferenceValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EdgeReferenceValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueExpressionPrimary(): ValueExpressionPrimaryContext {
        return this.getRuleContext(0, ValueExpressionPrimaryContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_edgeReferenceValueExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEdgeReferenceValueExpression) {
             listener.enterEdgeReferenceValueExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEdgeReferenceValueExpression) {
             listener.exitEdgeReferenceValueExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEdgeReferenceValueExpression) {
            return visitor.visitEdgeReferenceValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AggregatingValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_aggregatingValueExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterAggregatingValueExpression) {
             listener.enterAggregatingValueExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitAggregatingValueExpression) {
             listener.exitAggregatingValueExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitAggregatingValueExpression) {
            return visitor.visitAggregatingValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueExpressionPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public parenthesizedValueExpression(): ParenthesizedValueExpressionContext | null {
        return this.getRuleContext(0, ParenthesizedValueExpressionContext);
    }
    public aggregateFunction(): AggregateFunctionContext | null {
        return this.getRuleContext(0, AggregateFunctionContext);
    }
    public unsignedValueSpecification(): UnsignedValueSpecificationContext | null {
        return this.getRuleContext(0, UnsignedValueSpecificationContext);
    }
    public pathValueConstructor(): PathValueConstructorContext | null {
        return this.getRuleContext(0, PathValueConstructorContext);
    }
    public valueQueryExpression(): ValueQueryExpressionContext | null {
        return this.getRuleContext(0, ValueQueryExpressionContext);
    }
    public caseExpression(): CaseExpressionContext | null {
        return this.getRuleContext(0, CaseExpressionContext);
    }
    public castSpecification(): CastSpecificationContext | null {
        return this.getRuleContext(0, CastSpecificationContext);
    }
    public element_idFunction(): Element_idFunctionContext | null {
        return this.getRuleContext(0, Element_idFunctionContext);
    }
    public letValueExpression(): LetValueExpressionContext | null {
        return this.getRuleContext(0, LetValueExpressionContext);
    }
    public bindingVariableReference(): BindingVariableReferenceContext | null {
        return this.getRuleContext(0, BindingVariableReferenceContext);
    }
    public valueExpressionPrimary(): ValueExpressionPrimaryContext | null {
        return this.getRuleContext(0, ValueExpressionPrimaryContext);
    }
    public PERIOD(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PERIOD, 0);
    }
    public propertyName(): PropertyNameContext | null {
        return this.getRuleContext(0, PropertyNameContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_valueExpressionPrimary;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterValueExpressionPrimary) {
             listener.enterValueExpressionPrimary(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitValueExpressionPrimary) {
             listener.exitValueExpressionPrimary(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitValueExpressionPrimary) {
            return visitor.visitValueExpressionPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ParenthesizedValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_parenthesizedValueExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterParenthesizedValueExpression) {
             listener.enterParenthesizedValueExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitParenthesizedValueExpression) {
             listener.exitParenthesizedValueExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitParenthesizedValueExpression) {
            return visitor.visitParenthesizedValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonParenthesizedValueExpressionPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonParenthesizedValueExpressionPrimarySpecialCase(): NonParenthesizedValueExpressionPrimarySpecialCaseContext | null {
        return this.getRuleContext(0, NonParenthesizedValueExpressionPrimarySpecialCaseContext);
    }
    public bindingVariableReference(): BindingVariableReferenceContext | null {
        return this.getRuleContext(0, BindingVariableReferenceContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nonParenthesizedValueExpressionPrimary;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNonParenthesizedValueExpressionPrimary) {
             listener.enterNonParenthesizedValueExpressionPrimary(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNonParenthesizedValueExpressionPrimary) {
             listener.exitNonParenthesizedValueExpressionPrimary(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNonParenthesizedValueExpressionPrimary) {
            return visitor.visitNonParenthesizedValueExpressionPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonParenthesizedValueExpressionPrimarySpecialCaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public aggregateFunction(): AggregateFunctionContext | null {
        return this.getRuleContext(0, AggregateFunctionContext);
    }
    public unsignedValueSpecification(): UnsignedValueSpecificationContext | null {
        return this.getRuleContext(0, UnsignedValueSpecificationContext);
    }
    public pathValueConstructor(): PathValueConstructorContext | null {
        return this.getRuleContext(0, PathValueConstructorContext);
    }
    public valueExpressionPrimary(): ValueExpressionPrimaryContext | null {
        return this.getRuleContext(0, ValueExpressionPrimaryContext);
    }
    public PERIOD(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PERIOD, 0);
    }
    public propertyName(): PropertyNameContext | null {
        return this.getRuleContext(0, PropertyNameContext);
    }
    public valueQueryExpression(): ValueQueryExpressionContext | null {
        return this.getRuleContext(0, ValueQueryExpressionContext);
    }
    public caseExpression(): CaseExpressionContext | null {
        return this.getRuleContext(0, CaseExpressionContext);
    }
    public castSpecification(): CastSpecificationContext | null {
        return this.getRuleContext(0, CastSpecificationContext);
    }
    public element_idFunction(): Element_idFunctionContext | null {
        return this.getRuleContext(0, Element_idFunctionContext);
    }
    public letValueExpression(): LetValueExpressionContext | null {
        return this.getRuleContext(0, LetValueExpressionContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nonParenthesizedValueExpressionPrimarySpecialCase;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNonParenthesizedValueExpressionPrimarySpecialCase) {
             listener.enterNonParenthesizedValueExpressionPrimarySpecialCase(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNonParenthesizedValueExpressionPrimarySpecialCase) {
             listener.exitNonParenthesizedValueExpressionPrimarySpecialCase(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNonParenthesizedValueExpressionPrimarySpecialCase) {
            return visitor.visitNonParenthesizedValueExpressionPrimarySpecialCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsignedValueSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unsignedLiteral(): UnsignedLiteralContext | null {
        return this.getRuleContext(0, UnsignedLiteralContext);
    }
    public generalValueSpecification(): GeneralValueSpecificationContext | null {
        return this.getRuleContext(0, GeneralValueSpecificationContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_unsignedValueSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterUnsignedValueSpecification) {
             listener.enterUnsignedValueSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitUnsignedValueSpecification) {
             listener.exitUnsignedValueSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitUnsignedValueSpecification) {
            return visitor.visitUnsignedValueSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonNegativeIntegerSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unsignedInteger(): UnsignedIntegerContext | null {
        return this.getRuleContext(0, UnsignedIntegerContext);
    }
    public dynamicParameterSpecification(): DynamicParameterSpecificationContext | null {
        return this.getRuleContext(0, DynamicParameterSpecificationContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nonNegativeIntegerSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNonNegativeIntegerSpecification) {
             listener.enterNonNegativeIntegerSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNonNegativeIntegerSpecification) {
             listener.exitNonNegativeIntegerSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNonNegativeIntegerSpecification) {
            return visitor.visitNonNegativeIntegerSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GeneralValueSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dynamicParameterSpecification(): DynamicParameterSpecificationContext | null {
        return this.getRuleContext(0, DynamicParameterSpecificationContext);
    }
    public SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.SESSION_USER, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_generalValueSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGeneralValueSpecification) {
             listener.enterGeneralValueSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGeneralValueSpecification) {
             listener.exitGeneralValueSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGeneralValueSpecification) {
            return visitor.visitGeneralValueSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DynamicParameterSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GENERAL_PARAMETER_REFERENCE(): antlr.TerminalNode {
        return this.getToken(GQLParser.GENERAL_PARAMETER_REFERENCE, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_dynamicParameterSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDynamicParameterSpecification) {
             listener.enterDynamicParameterSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDynamicParameterSpecification) {
             listener.exitDynamicParameterSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDynamicParameterSpecification) {
            return visitor.visitDynamicParameterSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LetValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LET(): antlr.TerminalNode {
        return this.getToken(GQLParser.LET, 0)!;
    }
    public letVariableDefinitionList(): LetVariableDefinitionListContext {
        return this.getRuleContext(0, LetVariableDefinitionListContext)!;
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(GQLParser.IN, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(GQLParser.END, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_letValueExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLetValueExpression) {
             listener.enterLetValueExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLetValueExpression) {
             listener.exitLetValueExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLetValueExpression) {
            return visitor.visitLetValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueQueryExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALUE(): antlr.TerminalNode {
        return this.getToken(GQLParser.VALUE, 0)!;
    }
    public nestedQuerySpecification(): NestedQuerySpecificationContext {
        return this.getRuleContext(0, NestedQuerySpecificationContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_valueQueryExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterValueQueryExpression) {
             listener.enterValueQueryExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitValueQueryExpression) {
             listener.exitValueQueryExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitValueQueryExpression) {
            return visitor.visitValueQueryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CaseExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public caseAbbreviation(): CaseAbbreviationContext | null {
        return this.getRuleContext(0, CaseAbbreviationContext);
    }
    public caseSpecification(): CaseSpecificationContext | null {
        return this.getRuleContext(0, CaseSpecificationContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_caseExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCaseExpression) {
             listener.enterCaseExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCaseExpression) {
             listener.exitCaseExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCaseExpression) {
            return visitor.visitCaseExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CaseAbbreviationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULLIF(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NULLIF, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public COALESCE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.COALESCE, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_caseAbbreviation;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCaseAbbreviation) {
             listener.enterCaseAbbreviation(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCaseAbbreviation) {
             listener.exitCaseAbbreviation(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCaseAbbreviation) {
            return visitor.visitCaseAbbreviation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CaseSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleCase(): SimpleCaseContext | null {
        return this.getRuleContext(0, SimpleCaseContext);
    }
    public searchedCase(): SearchedCaseContext | null {
        return this.getRuleContext(0, SearchedCaseContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_caseSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCaseSpecification) {
             listener.enterCaseSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCaseSpecification) {
             listener.exitCaseSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCaseSpecification) {
            return visitor.visitCaseSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleCaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CASE(): antlr.TerminalNode {
        return this.getToken(GQLParser.CASE, 0)!;
    }
    public caseOperand(): CaseOperandContext {
        return this.getRuleContext(0, CaseOperandContext)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(GQLParser.END, 0)!;
    }
    public simpleWhenClause(): SimpleWhenClauseContext[];
    public simpleWhenClause(i: number): SimpleWhenClauseContext | null;
    public simpleWhenClause(i?: number): SimpleWhenClauseContext[] | SimpleWhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SimpleWhenClauseContext);
        }

        return this.getRuleContext(i, SimpleWhenClauseContext);
    }
    public elseClause(): ElseClauseContext | null {
        return this.getRuleContext(0, ElseClauseContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simpleCase;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimpleCase) {
             listener.enterSimpleCase(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimpleCase) {
             listener.exitSimpleCase(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimpleCase) {
            return visitor.visitSimpleCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SearchedCaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CASE(): antlr.TerminalNode {
        return this.getToken(GQLParser.CASE, 0)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(GQLParser.END, 0)!;
    }
    public searchedWhenClause(): SearchedWhenClauseContext[];
    public searchedWhenClause(i: number): SearchedWhenClauseContext | null;
    public searchedWhenClause(i?: number): SearchedWhenClauseContext[] | SearchedWhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SearchedWhenClauseContext);
        }

        return this.getRuleContext(i, SearchedWhenClauseContext);
    }
    public elseClause(): ElseClauseContext | null {
        return this.getRuleContext(0, ElseClauseContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_searchedCase;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSearchedCase) {
             listener.enterSearchedCase(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSearchedCase) {
             listener.exitSearchedCase(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSearchedCase) {
            return visitor.visitSearchedCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleWhenClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN(): antlr.TerminalNode {
        return this.getToken(GQLParser.WHEN, 0)!;
    }
    public whenOperandList(): WhenOperandListContext {
        return this.getRuleContext(0, WhenOperandListContext)!;
    }
    public THEN(): antlr.TerminalNode {
        return this.getToken(GQLParser.THEN, 0)!;
    }
    public result(): ResultContext {
        return this.getRuleContext(0, ResultContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_simpleWhenClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSimpleWhenClause) {
             listener.enterSimpleWhenClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSimpleWhenClause) {
             listener.exitSimpleWhenClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSimpleWhenClause) {
            return visitor.visitSimpleWhenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SearchedWhenClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN(): antlr.TerminalNode {
        return this.getToken(GQLParser.WHEN, 0)!;
    }
    public searchCondition(): SearchConditionContext {
        return this.getRuleContext(0, SearchConditionContext)!;
    }
    public THEN(): antlr.TerminalNode {
        return this.getToken(GQLParser.THEN, 0)!;
    }
    public result(): ResultContext {
        return this.getRuleContext(0, ResultContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_searchedWhenClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSearchedWhenClause) {
             listener.enterSearchedWhenClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSearchedWhenClause) {
             listener.exitSearchedWhenClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSearchedWhenClause) {
            return visitor.visitSearchedWhenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElseClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ELSE(): antlr.TerminalNode {
        return this.getToken(GQLParser.ELSE, 0)!;
    }
    public result(): ResultContext {
        return this.getRuleContext(0, ResultContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_elseClause;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterElseClause) {
             listener.enterElseClause(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitElseClause) {
             listener.exitElseClause(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitElseClause) {
            return visitor.visitElseClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CaseOperandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonParenthesizedValueExpressionPrimary(): NonParenthesizedValueExpressionPrimaryContext | null {
        return this.getRuleContext(0, NonParenthesizedValueExpressionPrimaryContext);
    }
    public elementVariableReference(): ElementVariableReferenceContext | null {
        return this.getRuleContext(0, ElementVariableReferenceContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_caseOperand;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCaseOperand) {
             listener.enterCaseOperand(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCaseOperand) {
             listener.exitCaseOperand(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCaseOperand) {
            return visitor.visitCaseOperand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenOperandListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public whenOperand(): WhenOperandContext[];
    public whenOperand(i: number): WhenOperandContext | null;
    public whenOperand(i?: number): WhenOperandContext[] | WhenOperandContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenOperandContext);
        }

        return this.getRuleContext(i, WhenOperandContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_whenOperandList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterWhenOperandList) {
             listener.enterWhenOperandList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitWhenOperandList) {
             listener.exitWhenOperandList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitWhenOperandList) {
            return visitor.visitWhenOperandList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenOperandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonParenthesizedValueExpressionPrimary(): NonParenthesizedValueExpressionPrimaryContext | null {
        return this.getRuleContext(0, NonParenthesizedValueExpressionPrimaryContext);
    }
    public compOp(): CompOpContext | null {
        return this.getRuleContext(0, CompOpContext);
    }
    public valueExpression(): ValueExpressionContext | null {
        return this.getRuleContext(0, ValueExpressionContext);
    }
    public nullPredicatePart2(): NullPredicatePart2Context | null {
        return this.getRuleContext(0, NullPredicatePart2Context);
    }
    public valueTypePredicatePart2(): ValueTypePredicatePart2Context | null {
        return this.getRuleContext(0, ValueTypePredicatePart2Context);
    }
    public normalizedPredicatePart2(): NormalizedPredicatePart2Context | null {
        return this.getRuleContext(0, NormalizedPredicatePart2Context);
    }
    public directedPredicatePart2(): DirectedPredicatePart2Context | null {
        return this.getRuleContext(0, DirectedPredicatePart2Context);
    }
    public labeledPredicatePart2(): LabeledPredicatePart2Context | null {
        return this.getRuleContext(0, LabeledPredicatePart2Context);
    }
    public sourcePredicatePart2(): SourcePredicatePart2Context | null {
        return this.getRuleContext(0, SourcePredicatePart2Context);
    }
    public destinationPredicatePart2(): DestinationPredicatePart2Context | null {
        return this.getRuleContext(0, DestinationPredicatePart2Context);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_whenOperand;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterWhenOperand) {
             listener.enterWhenOperand(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitWhenOperand) {
             listener.exitWhenOperand(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitWhenOperand) {
            return visitor.visitWhenOperand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResultContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public resultExpression(): ResultExpressionContext | null {
        return this.getRuleContext(0, ResultExpressionContext);
    }
    public nullLiteral(): NullLiteralContext | null {
        return this.getRuleContext(0, NullLiteralContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_result;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterResult) {
             listener.enterResult(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitResult) {
             listener.exitResult(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitResult) {
            return visitor.visitResult(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResultExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_resultExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterResultExpression) {
             listener.enterResultExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitResultExpression) {
             listener.exitResultExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitResultExpression) {
            return visitor.visitResultExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CastSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CAST(): antlr.TerminalNode {
        return this.getToken(GQLParser.CAST, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public castOperand(): CastOperandContext {
        return this.getRuleContext(0, CastOperandContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(GQLParser.AS, 0)!;
    }
    public castTarget(): CastTargetContext {
        return this.getRuleContext(0, CastTargetContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_castSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCastSpecification) {
             listener.enterCastSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCastSpecification) {
             listener.exitCastSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCastSpecification) {
            return visitor.visitCastSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CastOperandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueExpression(): ValueExpressionContext | null {
        return this.getRuleContext(0, ValueExpressionContext);
    }
    public nullLiteral(): NullLiteralContext | null {
        return this.getRuleContext(0, NullLiteralContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_castOperand;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCastOperand) {
             listener.enterCastOperand(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCastOperand) {
             listener.exitCastOperand(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCastOperand) {
            return visitor.visitCastOperand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CastTargetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueType(): ValueTypeContext {
        return this.getRuleContext(0, ValueTypeContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_castTarget;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCastTarget) {
             listener.enterCastTarget(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCastTarget) {
             listener.exitCastTarget(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCastTarget) {
            return visitor.visitCastTarget(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AggregateFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COUNT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.COUNT, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_PAREN, 0);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ASTERISK, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_PAREN, 0);
    }
    public generalSetFunction(): GeneralSetFunctionContext | null {
        return this.getRuleContext(0, GeneralSetFunctionContext);
    }
    public binarySetFunction(): BinarySetFunctionContext | null {
        return this.getRuleContext(0, BinarySetFunctionContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_aggregateFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterAggregateFunction) {
             listener.enterAggregateFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitAggregateFunction) {
             listener.exitAggregateFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitAggregateFunction) {
            return visitor.visitAggregateFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GeneralSetFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public generalSetFunctionType(): GeneralSetFunctionTypeContext {
        return this.getRuleContext(0, GeneralSetFunctionTypeContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_generalSetFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGeneralSetFunction) {
             listener.enterGeneralSetFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGeneralSetFunction) {
             listener.exitGeneralSetFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGeneralSetFunction) {
            return visitor.visitGeneralSetFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BinarySetFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public binarySetFunctionType(): BinarySetFunctionTypeContext {
        return this.getRuleContext(0, BinarySetFunctionTypeContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public dependentValueExpression(): DependentValueExpressionContext {
        return this.getRuleContext(0, DependentValueExpressionContext)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(GQLParser.COMMA, 0)!;
    }
    public independentValueExpression(): IndependentValueExpressionContext {
        return this.getRuleContext(0, IndependentValueExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_binarySetFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterBinarySetFunction) {
             listener.enterBinarySetFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitBinarySetFunction) {
             listener.exitBinarySetFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitBinarySetFunction) {
            return visitor.visitBinarySetFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GeneralSetFunctionTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AVG(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.AVG, 0);
    }
    public COUNT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.COUNT, 0);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.MAX, 0);
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.MIN, 0);
    }
    public SUM(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.SUM, 0);
    }
    public COLLECT_LIST(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.COLLECT_LIST, 0);
    }
    public STDDEV_SAMP(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.STDDEV_SAMP, 0);
    }
    public STDDEV_POP(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.STDDEV_POP, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_generalSetFunctionType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGeneralSetFunctionType) {
             listener.enterGeneralSetFunctionType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGeneralSetFunctionType) {
             listener.exitGeneralSetFunctionType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGeneralSetFunctionType) {
            return visitor.visitGeneralSetFunctionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.DISTINCT, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ALL, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_setQuantifier;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSetQuantifier) {
             listener.enterSetQuantifier(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSetQuantifier) {
             listener.exitSetQuantifier(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSetQuantifier) {
            return visitor.visitSetQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BinarySetFunctionTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PERCENTILE_CONT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PERCENTILE_CONT, 0);
    }
    public PERCENTILE_DISC(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PERCENTILE_DISC, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_binarySetFunctionType;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterBinarySetFunctionType) {
             listener.enterBinarySetFunctionType(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitBinarySetFunctionType) {
             listener.exitBinarySetFunctionType(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitBinarySetFunctionType) {
            return visitor.visitBinarySetFunctionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DependentValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numericValueExpression(): NumericValueExpressionContext {
        return this.getRuleContext(0, NumericValueExpressionContext)!;
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_dependentValueExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDependentValueExpression) {
             listener.enterDependentValueExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDependentValueExpression) {
             listener.exitDependentValueExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDependentValueExpression) {
            return visitor.visitDependentValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndependentValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numericValueExpression(): NumericValueExpressionContext {
        return this.getRuleContext(0, NumericValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_independentValueExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterIndependentValueExpression) {
             listener.enterIndependentValueExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitIndependentValueExpression) {
             listener.exitIndependentValueExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitIndependentValueExpression) {
            return visitor.visitIndependentValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Element_idFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ELEMENT_ID(): antlr.TerminalNode {
        return this.getToken(GQLParser.ELEMENT_ID, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public elementVariableReference(): ElementVariableReferenceContext {
        return this.getRuleContext(0, ElementVariableReferenceContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_element_idFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterElement_idFunction) {
             listener.enterElement_idFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitElement_idFunction) {
             listener.exitElement_idFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitElement_idFunction) {
            return visitor.visitElement_idFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BindingVariableReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bindingVariable(): BindingVariableContext {
        return this.getRuleContext(0, BindingVariableContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_bindingVariableReference;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterBindingVariableReference) {
             listener.enterBindingVariableReference(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitBindingVariableReference) {
             listener.exitBindingVariableReference(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitBindingVariableReference) {
            return visitor.visitBindingVariableReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_pathValueExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPathValueExpression) {
             listener.enterPathValueExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPathValueExpression) {
             listener.exitPathValueExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPathValueExpression) {
            return visitor.visitPathValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathValueConstructorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pathValueConstructorByEnumeration(): PathValueConstructorByEnumerationContext {
        return this.getRuleContext(0, PathValueConstructorByEnumerationContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_pathValueConstructor;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPathValueConstructor) {
             listener.enterPathValueConstructor(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPathValueConstructor) {
             listener.exitPathValueConstructor(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPathValueConstructor) {
            return visitor.visitPathValueConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathValueConstructorByEnumerationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PATH(): antlr.TerminalNode {
        return this.getToken(GQLParser.PATH, 0)!;
    }
    public LEFT_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_BRACKET, 0)!;
    }
    public pathElementList(): PathElementListContext {
        return this.getRuleContext(0, PathElementListContext)!;
    }
    public RIGHT_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_BRACKET, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_pathValueConstructorByEnumeration;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPathValueConstructorByEnumeration) {
             listener.enterPathValueConstructorByEnumeration(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPathValueConstructorByEnumeration) {
             listener.exitPathValueConstructorByEnumeration(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPathValueConstructorByEnumeration) {
            return visitor.visitPathValueConstructorByEnumeration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathElementListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pathElementListStart(): PathElementListStartContext {
        return this.getRuleContext(0, PathElementListStartContext)!;
    }
    public pathElementListStep(): PathElementListStepContext[];
    public pathElementListStep(i: number): PathElementListStepContext | null;
    public pathElementListStep(i?: number): PathElementListStepContext[] | PathElementListStepContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PathElementListStepContext);
        }

        return this.getRuleContext(i, PathElementListStepContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_pathElementList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPathElementList) {
             listener.enterPathElementList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPathElementList) {
             listener.exitPathElementList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPathElementList) {
            return visitor.visitPathElementList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathElementListStartContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nodeReferenceValueExpression(): NodeReferenceValueExpressionContext {
        return this.getRuleContext(0, NodeReferenceValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_pathElementListStart;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPathElementListStart) {
             listener.enterPathElementListStart(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPathElementListStart) {
             listener.exitPathElementListStart(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPathElementListStart) {
            return visitor.visitPathElementListStart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathElementListStepContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public edgeReferenceValueExpression(): EdgeReferenceValueExpressionContext {
        return this.getRuleContext(0, EdgeReferenceValueExpressionContext)!;
    }
    public nodeReferenceValueExpression(): NodeReferenceValueExpressionContext {
        return this.getRuleContext(0, NodeReferenceValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_pathElementListStep;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPathElementListStep) {
             listener.enterPathElementListStep(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPathElementListStep) {
             listener.exitPathElementListStep(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPathElementListStep) {
            return visitor.visitPathElementListStep(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_listValueExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterListValueExpression) {
             listener.enterListValueExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitListValueExpression) {
             listener.exitListValueExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitListValueExpression) {
            return visitor.visitListValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListValueFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public trimListFunction(): TrimListFunctionContext | null {
        return this.getRuleContext(0, TrimListFunctionContext);
    }
    public elementsFunction(): ElementsFunctionContext | null {
        return this.getRuleContext(0, ElementsFunctionContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_listValueFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterListValueFunction) {
             listener.enterListValueFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitListValueFunction) {
             listener.exitListValueFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitListValueFunction) {
            return visitor.visitListValueFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrimListFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRIM(): antlr.TerminalNode {
        return this.getToken(GQLParser.TRIM, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public listValueExpression(): ListValueExpressionContext {
        return this.getRuleContext(0, ListValueExpressionContext)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(GQLParser.COMMA, 0)!;
    }
    public numericValueExpression(): NumericValueExpressionContext {
        return this.getRuleContext(0, NumericValueExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_trimListFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTrimListFunction) {
             listener.enterTrimListFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTrimListFunction) {
             listener.exitTrimListFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTrimListFunction) {
            return visitor.visitTrimListFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElementsFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ELEMENTS(): antlr.TerminalNode {
        return this.getToken(GQLParser.ELEMENTS, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public pathValueExpression(): PathValueExpressionContext {
        return this.getRuleContext(0, PathValueExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_elementsFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterElementsFunction) {
             listener.enterElementsFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitElementsFunction) {
             listener.exitElementsFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitElementsFunction) {
            return visitor.visitElementsFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListValueConstructorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public listValueConstructorByEnumeration(): ListValueConstructorByEnumerationContext {
        return this.getRuleContext(0, ListValueConstructorByEnumerationContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_listValueConstructor;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterListValueConstructor) {
             listener.enterListValueConstructor(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitListValueConstructor) {
             listener.exitListValueConstructor(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitListValueConstructor) {
            return visitor.visitListValueConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListValueConstructorByEnumerationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_BRACKET, 0)!;
    }
    public RIGHT_BRACKET(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_BRACKET, 0)!;
    }
    public listValueTypeName(): ListValueTypeNameContext | null {
        return this.getRuleContext(0, ListValueTypeNameContext);
    }
    public listElementList(): ListElementListContext | null {
        return this.getRuleContext(0, ListElementListContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_listValueConstructorByEnumeration;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterListValueConstructorByEnumeration) {
             listener.enterListValueConstructorByEnumeration(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitListValueConstructorByEnumeration) {
             listener.exitListValueConstructorByEnumeration(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitListValueConstructorByEnumeration) {
            return visitor.visitListValueConstructorByEnumeration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListElementListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public listElement(): ListElementContext[];
    public listElement(i: number): ListElementContext | null;
    public listElement(i?: number): ListElementContext[] | ListElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ListElementContext);
        }

        return this.getRuleContext(i, ListElementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_listElementList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterListElementList) {
             listener.enterListElementList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitListElementList) {
             listener.exitListElementList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitListElementList) {
            return visitor.visitListElementList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_listElement;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterListElement) {
             listener.enterListElement(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitListElement) {
             listener.exitListElement(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitListElement) {
            return visitor.visitListElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RecordConstructorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fieldsSpecification(): FieldsSpecificationContext {
        return this.getRuleContext(0, FieldsSpecificationContext)!;
    }
    public RECORD(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RECORD, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_recordConstructor;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterRecordConstructor) {
             listener.enterRecordConstructor(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitRecordConstructor) {
             listener.exitRecordConstructor(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitRecordConstructor) {
            return visitor.visitRecordConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldsSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_BRACE(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_BRACE, 0)!;
    }
    public RIGHT_BRACE(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_BRACE, 0)!;
    }
    public fieldList(): FieldListContext | null {
        return this.getRuleContext(0, FieldListContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_fieldsSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFieldsSpecification) {
             listener.enterFieldsSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFieldsSpecification) {
             listener.exitFieldsSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFieldsSpecification) {
            return visitor.visitFieldsSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public field(): FieldContext[];
    public field(i: number): FieldContext | null;
    public field(i?: number): FieldContext[] | FieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FieldContext);
        }

        return this.getRuleContext(i, FieldContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(GQLParser.COMMA);
    	} else {
    		return this.getToken(GQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_fieldList;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFieldList) {
             listener.enterFieldList(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFieldList) {
             listener.exitFieldList(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFieldList) {
            return visitor.visitFieldList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fieldName(): FieldNameContext {
        return this.getRuleContext(0, FieldNameContext)!;
    }
    public COLON(): antlr.TerminalNode {
        return this.getToken(GQLParser.COLON, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_field;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterField) {
             listener.enterField(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitField) {
             listener.exitField(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitField) {
            return visitor.visitField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TruthValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BOOLEAN_LITERAL(): antlr.TerminalNode {
        return this.getToken(GQLParser.BOOLEAN_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_truthValue;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTruthValue) {
             listener.enterTruthValue(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTruthValue) {
             listener.exitTruthValue(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTruthValue) {
            return visitor.visitTruthValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumericValueExpressionContext extends antlr.ParserRuleContext {
    public _sign?: Token | null;
    public _operator?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numericValueExpression(): NumericValueExpressionContext[];
    public numericValueExpression(i: number): NumericValueExpressionContext | null;
    public numericValueExpression(i?: number): NumericValueExpressionContext[] | NumericValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NumericValueExpressionContext);
        }

        return this.getRuleContext(i, NumericValueExpressionContext);
    }
    public PLUS_SIGN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PLUS_SIGN, 0);
    }
    public MINUS_SIGN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.MINUS_SIGN, 0);
    }
    public valueExpressionPrimary(): ValueExpressionPrimaryContext | null {
        return this.getRuleContext(0, ValueExpressionPrimaryContext);
    }
    public numericValueFunction(): NumericValueFunctionContext | null {
        return this.getRuleContext(0, NumericValueFunctionContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ASTERISK, 0);
    }
    public SOLIDUS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.SOLIDUS, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_numericValueExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNumericValueExpression) {
             listener.enterNumericValueExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNumericValueExpression) {
             listener.exitNumericValueExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNumericValueExpression) {
            return visitor.visitNumericValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumericValueFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public lengthExpression(): LengthExpressionContext | null {
        return this.getRuleContext(0, LengthExpressionContext);
    }
    public cardinalityExpression(): CardinalityExpressionContext | null {
        return this.getRuleContext(0, CardinalityExpressionContext);
    }
    public absoluteValueExpression(): AbsoluteValueExpressionContext | null {
        return this.getRuleContext(0, AbsoluteValueExpressionContext);
    }
    public modulusExpression(): ModulusExpressionContext | null {
        return this.getRuleContext(0, ModulusExpressionContext);
    }
    public trigonometricFunction(): TrigonometricFunctionContext | null {
        return this.getRuleContext(0, TrigonometricFunctionContext);
    }
    public generalLogarithmFunction(): GeneralLogarithmFunctionContext | null {
        return this.getRuleContext(0, GeneralLogarithmFunctionContext);
    }
    public commonLogarithm(): CommonLogarithmContext | null {
        return this.getRuleContext(0, CommonLogarithmContext);
    }
    public naturalLogarithm(): NaturalLogarithmContext | null {
        return this.getRuleContext(0, NaturalLogarithmContext);
    }
    public exponentialFunction(): ExponentialFunctionContext | null {
        return this.getRuleContext(0, ExponentialFunctionContext);
    }
    public powerFunction(): PowerFunctionContext | null {
        return this.getRuleContext(0, PowerFunctionContext);
    }
    public squareRoot(): SquareRootContext | null {
        return this.getRuleContext(0, SquareRootContext);
    }
    public floorFunction(): FloorFunctionContext | null {
        return this.getRuleContext(0, FloorFunctionContext);
    }
    public ceilingFunction(): CeilingFunctionContext | null {
        return this.getRuleContext(0, CeilingFunctionContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_numericValueFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNumericValueFunction) {
             listener.enterNumericValueFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNumericValueFunction) {
             listener.exitNumericValueFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNumericValueFunction) {
            return visitor.visitNumericValueFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LengthExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public charLengthExpression(): CharLengthExpressionContext | null {
        return this.getRuleContext(0, CharLengthExpressionContext);
    }
    public byteLengthExpression(): ByteLengthExpressionContext | null {
        return this.getRuleContext(0, ByteLengthExpressionContext);
    }
    public pathLengthExpression(): PathLengthExpressionContext | null {
        return this.getRuleContext(0, PathLengthExpressionContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_lengthExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLengthExpression) {
             listener.enterLengthExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLengthExpression) {
             listener.exitLengthExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLengthExpression) {
            return visitor.visitLengthExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CardinalityExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CARDINALITY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.CARDINALITY, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public cardinalityExpressionArgument(): CardinalityExpressionArgumentContext | null {
        return this.getRuleContext(0, CardinalityExpressionArgumentContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public SIZE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.SIZE, 0);
    }
    public listValueExpression(): ListValueExpressionContext | null {
        return this.getRuleContext(0, ListValueExpressionContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_cardinalityExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCardinalityExpression) {
             listener.enterCardinalityExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCardinalityExpression) {
             listener.exitCardinalityExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCardinalityExpression) {
            return visitor.visitCardinalityExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CardinalityExpressionArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_cardinalityExpressionArgument;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCardinalityExpressionArgument) {
             listener.enterCardinalityExpressionArgument(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCardinalityExpressionArgument) {
             listener.exitCardinalityExpressionArgument(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCardinalityExpressionArgument) {
            return visitor.visitCardinalityExpressionArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CharLengthExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public characterStringValueExpression(): CharacterStringValueExpressionContext {
        return this.getRuleContext(0, CharacterStringValueExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public CHAR_LENGTH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.CHAR_LENGTH, 0);
    }
    public CHARACTER_LENGTH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.CHARACTER_LENGTH, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_charLengthExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCharLengthExpression) {
             listener.enterCharLengthExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCharLengthExpression) {
             listener.exitCharLengthExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCharLengthExpression) {
            return visitor.visitCharLengthExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ByteLengthExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public byteStringValueExpression(): ByteStringValueExpressionContext {
        return this.getRuleContext(0, ByteStringValueExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public BYTE_LENGTH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.BYTE_LENGTH, 0);
    }
    public OCTET_LENGTH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.OCTET_LENGTH, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_byteLengthExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterByteLengthExpression) {
             listener.enterByteLengthExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitByteLengthExpression) {
             listener.exitByteLengthExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitByteLengthExpression) {
            return visitor.visitByteLengthExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathLengthExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PATH_LENGTH(): antlr.TerminalNode {
        return this.getToken(GQLParser.PATH_LENGTH, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public pathValueExpression(): PathValueExpressionContext {
        return this.getRuleContext(0, PathValueExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_pathLengthExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPathLengthExpression) {
             listener.enterPathLengthExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPathLengthExpression) {
             listener.exitPathLengthExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPathLengthExpression) {
            return visitor.visitPathLengthExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AbsoluteValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ABS(): antlr.TerminalNode {
        return this.getToken(GQLParser.ABS, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_absoluteValueExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterAbsoluteValueExpression) {
             listener.enterAbsoluteValueExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitAbsoluteValueExpression) {
             listener.exitAbsoluteValueExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitAbsoluteValueExpression) {
            return visitor.visitAbsoluteValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ModulusExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MOD(): antlr.TerminalNode {
        return this.getToken(GQLParser.MOD, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public numericValueExpressionDividend(): NumericValueExpressionDividendContext {
        return this.getRuleContext(0, NumericValueExpressionDividendContext)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(GQLParser.COMMA, 0)!;
    }
    public numericValueExpressionDivisor(): NumericValueExpressionDivisorContext {
        return this.getRuleContext(0, NumericValueExpressionDivisorContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_modulusExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterModulusExpression) {
             listener.enterModulusExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitModulusExpression) {
             listener.exitModulusExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitModulusExpression) {
            return visitor.visitModulusExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumericValueExpressionDividendContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numericValueExpression(): NumericValueExpressionContext {
        return this.getRuleContext(0, NumericValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_numericValueExpressionDividend;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNumericValueExpressionDividend) {
             listener.enterNumericValueExpressionDividend(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNumericValueExpressionDividend) {
             listener.exitNumericValueExpressionDividend(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNumericValueExpressionDividend) {
            return visitor.visitNumericValueExpressionDividend(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumericValueExpressionDivisorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numericValueExpression(): NumericValueExpressionContext {
        return this.getRuleContext(0, NumericValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_numericValueExpressionDivisor;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNumericValueExpressionDivisor) {
             listener.enterNumericValueExpressionDivisor(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNumericValueExpressionDivisor) {
             listener.exitNumericValueExpressionDivisor(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNumericValueExpressionDivisor) {
            return visitor.visitNumericValueExpressionDivisor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrigonometricFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public trigonometricFunctionName(): TrigonometricFunctionNameContext {
        return this.getRuleContext(0, TrigonometricFunctionNameContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public numericValueExpression(): NumericValueExpressionContext {
        return this.getRuleContext(0, NumericValueExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_trigonometricFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTrigonometricFunction) {
             listener.enterTrigonometricFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTrigonometricFunction) {
             listener.exitTrigonometricFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTrigonometricFunction) {
            return visitor.visitTrigonometricFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrigonometricFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SIN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.SIN, 0);
    }
    public COS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.COS, 0);
    }
    public TAN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TAN, 0);
    }
    public COT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.COT, 0);
    }
    public SINH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.SINH, 0);
    }
    public COSH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.COSH, 0);
    }
    public TANH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TANH, 0);
    }
    public ASIN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ASIN, 0);
    }
    public ACOS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ACOS, 0);
    }
    public ATAN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ATAN, 0);
    }
    public DEGREES(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.DEGREES, 0);
    }
    public RADIANS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RADIANS, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_trigonometricFunctionName;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTrigonometricFunctionName) {
             listener.enterTrigonometricFunctionName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTrigonometricFunctionName) {
             listener.exitTrigonometricFunctionName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTrigonometricFunctionName) {
            return visitor.visitTrigonometricFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GeneralLogarithmFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOG_KW(): antlr.TerminalNode {
        return this.getToken(GQLParser.LOG_KW, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public generalLogarithmBase(): GeneralLogarithmBaseContext {
        return this.getRuleContext(0, GeneralLogarithmBaseContext)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(GQLParser.COMMA, 0)!;
    }
    public generalLogarithmArgument(): GeneralLogarithmArgumentContext {
        return this.getRuleContext(0, GeneralLogarithmArgumentContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_generalLogarithmFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGeneralLogarithmFunction) {
             listener.enterGeneralLogarithmFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGeneralLogarithmFunction) {
             listener.exitGeneralLogarithmFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGeneralLogarithmFunction) {
            return visitor.visitGeneralLogarithmFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GeneralLogarithmBaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numericValueExpression(): NumericValueExpressionContext {
        return this.getRuleContext(0, NumericValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_generalLogarithmBase;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGeneralLogarithmBase) {
             listener.enterGeneralLogarithmBase(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGeneralLogarithmBase) {
             listener.exitGeneralLogarithmBase(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGeneralLogarithmBase) {
            return visitor.visitGeneralLogarithmBase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GeneralLogarithmArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numericValueExpression(): NumericValueExpressionContext {
        return this.getRuleContext(0, NumericValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_generalLogarithmArgument;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGeneralLogarithmArgument) {
             listener.enterGeneralLogarithmArgument(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGeneralLogarithmArgument) {
             listener.exitGeneralLogarithmArgument(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGeneralLogarithmArgument) {
            return visitor.visitGeneralLogarithmArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommonLogarithmContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOG10(): antlr.TerminalNode {
        return this.getToken(GQLParser.LOG10, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public numericValueExpression(): NumericValueExpressionContext {
        return this.getRuleContext(0, NumericValueExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_commonLogarithm;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCommonLogarithm) {
             listener.enterCommonLogarithm(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCommonLogarithm) {
             listener.exitCommonLogarithm(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCommonLogarithm) {
            return visitor.visitCommonLogarithm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NaturalLogarithmContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LN, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public numericValueExpression(): NumericValueExpressionContext {
        return this.getRuleContext(0, NumericValueExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_naturalLogarithm;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNaturalLogarithm) {
             listener.enterNaturalLogarithm(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNaturalLogarithm) {
             listener.exitNaturalLogarithm(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNaturalLogarithm) {
            return visitor.visitNaturalLogarithm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExponentialFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXP(): antlr.TerminalNode {
        return this.getToken(GQLParser.EXP, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public numericValueExpression(): NumericValueExpressionContext {
        return this.getRuleContext(0, NumericValueExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_exponentialFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterExponentialFunction) {
             listener.enterExponentialFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitExponentialFunction) {
             listener.exitExponentialFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitExponentialFunction) {
            return visitor.visitExponentialFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PowerFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public POWER(): antlr.TerminalNode {
        return this.getToken(GQLParser.POWER, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public numericValueExpressionBase(): NumericValueExpressionBaseContext {
        return this.getRuleContext(0, NumericValueExpressionBaseContext)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(GQLParser.COMMA, 0)!;
    }
    public numericValueExpressionExponent(): NumericValueExpressionExponentContext {
        return this.getRuleContext(0, NumericValueExpressionExponentContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_powerFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPowerFunction) {
             listener.enterPowerFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPowerFunction) {
             listener.exitPowerFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPowerFunction) {
            return visitor.visitPowerFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumericValueExpressionBaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numericValueExpression(): NumericValueExpressionContext {
        return this.getRuleContext(0, NumericValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_numericValueExpressionBase;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNumericValueExpressionBase) {
             listener.enterNumericValueExpressionBase(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNumericValueExpressionBase) {
             listener.exitNumericValueExpressionBase(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNumericValueExpressionBase) {
            return visitor.visitNumericValueExpressionBase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumericValueExpressionExponentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numericValueExpression(): NumericValueExpressionContext {
        return this.getRuleContext(0, NumericValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_numericValueExpressionExponent;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNumericValueExpressionExponent) {
             listener.enterNumericValueExpressionExponent(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNumericValueExpressionExponent) {
             listener.exitNumericValueExpressionExponent(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNumericValueExpressionExponent) {
            return visitor.visitNumericValueExpressionExponent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SquareRootContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SQRT(): antlr.TerminalNode {
        return this.getToken(GQLParser.SQRT, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public numericValueExpression(): NumericValueExpressionContext {
        return this.getRuleContext(0, NumericValueExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_squareRoot;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSquareRoot) {
             listener.enterSquareRoot(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSquareRoot) {
             listener.exitSquareRoot(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSquareRoot) {
            return visitor.visitSquareRoot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FloorFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FLOOR(): antlr.TerminalNode {
        return this.getToken(GQLParser.FLOOR, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public numericValueExpression(): NumericValueExpressionContext {
        return this.getRuleContext(0, NumericValueExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_floorFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFloorFunction) {
             listener.enterFloorFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFloorFunction) {
             listener.exitFloorFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFloorFunction) {
            return visitor.visitFloorFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CeilingFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public numericValueExpression(): NumericValueExpressionContext {
        return this.getRuleContext(0, NumericValueExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public CEIL(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.CEIL, 0);
    }
    public CEILING(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.CEILING, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_ceilingFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCeilingFunction) {
             listener.enterCeilingFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCeilingFunction) {
             listener.exitCeilingFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCeilingFunction) {
            return visitor.visitCeilingFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CharacterStringValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_characterStringValueExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCharacterStringValueExpression) {
             listener.enterCharacterStringValueExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCharacterStringValueExpression) {
             listener.exitCharacterStringValueExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCharacterStringValueExpression) {
            return visitor.visitCharacterStringValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ByteStringValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_byteStringValueExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterByteStringValueExpression) {
             listener.enterByteStringValueExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitByteStringValueExpression) {
             listener.exitByteStringValueExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitByteStringValueExpression) {
            return visitor.visitByteStringValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrimOperandsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public trimCharacterOrByteStringSource(): TrimCharacterOrByteStringSourceContext {
        return this.getRuleContext(0, TrimCharacterOrByteStringSourceContext)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.FROM, 0);
    }
    public trimSpecification(): TrimSpecificationContext | null {
        return this.getRuleContext(0, TrimSpecificationContext);
    }
    public trimCharacterOrByteString(): TrimCharacterOrByteStringContext | null {
        return this.getRuleContext(0, TrimCharacterOrByteStringContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_trimOperands;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTrimOperands) {
             listener.enterTrimOperands(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTrimOperands) {
             listener.exitTrimOperands(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTrimOperands) {
            return visitor.visitTrimOperands(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrimCharacterOrByteStringSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_trimCharacterOrByteStringSource;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTrimCharacterOrByteStringSource) {
             listener.enterTrimCharacterOrByteStringSource(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTrimCharacterOrByteStringSource) {
             listener.exitTrimCharacterOrByteStringSource(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTrimCharacterOrByteStringSource) {
            return visitor.visitTrimCharacterOrByteStringSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrimSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEADING(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEADING, 0);
    }
    public TRAILING(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TRAILING, 0);
    }
    public BOTH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.BOTH, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_trimSpecification;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTrimSpecification) {
             listener.enterTrimSpecification(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTrimSpecification) {
             listener.exitTrimSpecification(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTrimSpecification) {
            return visitor.visitTrimSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrimCharacterOrByteStringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_trimCharacterOrByteString;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTrimCharacterOrByteString) {
             listener.enterTrimCharacterOrByteString(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTrimCharacterOrByteString) {
             listener.exitTrimCharacterOrByteString(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTrimCharacterOrByteString) {
            return visitor.visitTrimCharacterOrByteString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NormalFormContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NFC(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NFC, 0);
    }
    public NFD(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NFD, 0);
    }
    public NFKC(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NFKC, 0);
    }
    public NFKD(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NFKD, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_normalForm;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNormalForm) {
             listener.enterNormalForm(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNormalForm) {
             listener.exitNormalForm(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNormalForm) {
            return visitor.visitNormalForm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringLengthContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numericValueExpression(): NumericValueExpressionContext {
        return this.getRuleContext(0, NumericValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_stringLength;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterStringLength) {
             listener.enterStringLength(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitStringLength) {
             listener.exitStringLength(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitStringLength) {
            return visitor.visitStringLength(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatetimeValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_datetimeValueExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDatetimeValueExpression) {
             listener.enterDatetimeValueExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDatetimeValueExpression) {
             listener.exitDatetimeValueExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDatetimeValueExpression) {
            return visitor.visitDatetimeValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatetimeValueFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dateFunction(): DateFunctionContext | null {
        return this.getRuleContext(0, DateFunctionContext);
    }
    public timeFunction(): TimeFunctionContext | null {
        return this.getRuleContext(0, TimeFunctionContext);
    }
    public datetimeFunction(): DatetimeFunctionContext | null {
        return this.getRuleContext(0, DatetimeFunctionContext);
    }
    public localtimeFunction(): LocaltimeFunctionContext | null {
        return this.getRuleContext(0, LocaltimeFunctionContext);
    }
    public localdatetimeFunction(): LocaldatetimeFunctionContext | null {
        return this.getRuleContext(0, LocaldatetimeFunctionContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_datetimeValueFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDatetimeValueFunction) {
             listener.enterDatetimeValueFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDatetimeValueFunction) {
             listener.exitDatetimeValueFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDatetimeValueFunction) {
            return visitor.visitDatetimeValueFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DateFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.CURRENT_DATE, 0);
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.DATE, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_PAREN, 0);
    }
    public dateFunctionParameters(): DateFunctionParametersContext | null {
        return this.getRuleContext(0, DateFunctionParametersContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_dateFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDateFunction) {
             listener.enterDateFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDateFunction) {
             listener.exitDateFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDateFunction) {
            return visitor.visitDateFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimeFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.CURRENT_TIME, 0);
    }
    public ZONED_TIME(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ZONED_TIME, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_PAREN, 0);
    }
    public timeFunctionParameters(): TimeFunctionParametersContext | null {
        return this.getRuleContext(0, TimeFunctionParametersContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_timeFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTimeFunction) {
             listener.enterTimeFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTimeFunction) {
             listener.exitTimeFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTimeFunction) {
            return visitor.visitTimeFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LocaltimeFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCAL_TIME(): antlr.TerminalNode {
        return this.getToken(GQLParser.LOCAL_TIME, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_PAREN, 0);
    }
    public timeFunctionParameters(): TimeFunctionParametersContext | null {
        return this.getRuleContext(0, TimeFunctionParametersContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_localtimeFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLocaltimeFunction) {
             listener.enterLocaltimeFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLocaltimeFunction) {
             listener.exitLocaltimeFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLocaltimeFunction) {
            return visitor.visitLocaltimeFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatetimeFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.CURRENT_TIMESTAMP, 0);
    }
    public ZONED_DATETIME(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ZONED_DATETIME, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_PAREN, 0);
    }
    public datetimeFunctionParameters(): DatetimeFunctionParametersContext | null {
        return this.getRuleContext(0, DatetimeFunctionParametersContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_datetimeFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDatetimeFunction) {
             listener.enterDatetimeFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDatetimeFunction) {
             listener.exitDatetimeFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDatetimeFunction) {
            return visitor.visitDatetimeFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LocaldatetimeFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCAL_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LOCAL_TIMESTAMP, 0);
    }
    public LOCAL_DATETIME(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LOCAL_DATETIME, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RIGHT_PAREN, 0);
    }
    public datetimeFunctionParameters(): DatetimeFunctionParametersContext | null {
        return this.getRuleContext(0, DatetimeFunctionParametersContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_localdatetimeFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLocaldatetimeFunction) {
             listener.enterLocaldatetimeFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLocaldatetimeFunction) {
             listener.exitLocaldatetimeFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLocaldatetimeFunction) {
            return visitor.visitLocaldatetimeFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DateFunctionParametersContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dateString(): DateStringContext | null {
        return this.getRuleContext(0, DateStringContext);
    }
    public recordConstructor(): RecordConstructorContext | null {
        return this.getRuleContext(0, RecordConstructorContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_dateFunctionParameters;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDateFunctionParameters) {
             listener.enterDateFunctionParameters(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDateFunctionParameters) {
             listener.exitDateFunctionParameters(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDateFunctionParameters) {
            return visitor.visitDateFunctionParameters(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimeFunctionParametersContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public timeString(): TimeStringContext | null {
        return this.getRuleContext(0, TimeStringContext);
    }
    public recordConstructor(): RecordConstructorContext | null {
        return this.getRuleContext(0, RecordConstructorContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_timeFunctionParameters;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTimeFunctionParameters) {
             listener.enterTimeFunctionParameters(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTimeFunctionParameters) {
             listener.exitTimeFunctionParameters(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTimeFunctionParameters) {
            return visitor.visitTimeFunctionParameters(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatetimeFunctionParametersContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public datetimeString(): DatetimeStringContext | null {
        return this.getRuleContext(0, DatetimeStringContext);
    }
    public recordConstructor(): RecordConstructorContext | null {
        return this.getRuleContext(0, RecordConstructorContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_datetimeFunctionParameters;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDatetimeFunctionParameters) {
             listener.enterDatetimeFunctionParameters(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDatetimeFunctionParameters) {
             listener.exitDatetimeFunctionParameters(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDatetimeFunctionParameters) {
            return visitor.visitDatetimeFunctionParameters(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DurationValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_durationValueExpression;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDurationValueExpression) {
             listener.enterDurationValueExpression(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDurationValueExpression) {
             listener.exitDurationValueExpression(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDurationValueExpression) {
            return visitor.visitDurationValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatetimeSubtractionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DURATION_BETWEEN(): antlr.TerminalNode {
        return this.getToken(GQLParser.DURATION_BETWEEN, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public datetimeSubtractionParameters(): DatetimeSubtractionParametersContext {
        return this.getRuleContext(0, DatetimeSubtractionParametersContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public temporalDurationQualifier(): TemporalDurationQualifierContext | null {
        return this.getRuleContext(0, TemporalDurationQualifierContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_datetimeSubtraction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDatetimeSubtraction) {
             listener.enterDatetimeSubtraction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDatetimeSubtraction) {
             listener.exitDatetimeSubtraction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDatetimeSubtraction) {
            return visitor.visitDatetimeSubtraction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatetimeSubtractionParametersContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public datetimeValueExpression1(): DatetimeValueExpression1Context {
        return this.getRuleContext(0, DatetimeValueExpression1Context)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(GQLParser.COMMA, 0)!;
    }
    public datetimeValueExpression2(): DatetimeValueExpression2Context {
        return this.getRuleContext(0, DatetimeValueExpression2Context)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_datetimeSubtractionParameters;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDatetimeSubtractionParameters) {
             listener.enterDatetimeSubtractionParameters(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDatetimeSubtractionParameters) {
             listener.exitDatetimeSubtractionParameters(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDatetimeSubtractionParameters) {
            return visitor.visitDatetimeSubtractionParameters(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatetimeValueExpression1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public datetimeValueExpression(): DatetimeValueExpressionContext {
        return this.getRuleContext(0, DatetimeValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_datetimeValueExpression1;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDatetimeValueExpression1) {
             listener.enterDatetimeValueExpression1(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDatetimeValueExpression1) {
             listener.exitDatetimeValueExpression1(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDatetimeValueExpression1) {
            return visitor.visitDatetimeValueExpression1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatetimeValueExpression2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public datetimeValueExpression(): DatetimeValueExpressionContext {
        return this.getRuleContext(0, DatetimeValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_datetimeValueExpression2;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDatetimeValueExpression2) {
             listener.enterDatetimeValueExpression2(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDatetimeValueExpression2) {
             listener.exitDatetimeValueExpression2(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDatetimeValueExpression2) {
            return visitor.visitDatetimeValueExpression2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DurationValueFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public durationFunction(): DurationFunctionContext | null {
        return this.getRuleContext(0, DurationFunctionContext);
    }
    public absoluteValueExpression(): AbsoluteValueExpressionContext | null {
        return this.getRuleContext(0, AbsoluteValueExpressionContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_durationValueFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDurationValueFunction) {
             listener.enterDurationValueFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDurationValueFunction) {
             listener.exitDurationValueFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDurationValueFunction) {
            return visitor.visitDurationValueFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DurationFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DURATION(): antlr.TerminalNode {
        return this.getToken(GQLParser.DURATION, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.LEFT_PAREN, 0)!;
    }
    public durationFunctionParameters(): DurationFunctionParametersContext {
        return this.getRuleContext(0, DurationFunctionParametersContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(GQLParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_durationFunction;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDurationFunction) {
             listener.enterDurationFunction(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDurationFunction) {
             listener.exitDurationFunction(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDurationFunction) {
            return visitor.visitDurationFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DurationFunctionParametersContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public durationString(): DurationStringContext | null {
        return this.getRuleContext(0, DurationStringContext);
    }
    public recordConstructor(): RecordConstructorContext | null {
        return this.getRuleContext(0, RecordConstructorContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_durationFunctionParameters;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDurationFunctionParameters) {
             listener.enterDurationFunctionParameters(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDurationFunctionParameters) {
             listener.exitDurationFunctionParameters(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDurationFunctionParameters) {
            return visitor.visitDurationFunctionParameters(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ObjectNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_objectName;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterObjectName) {
             listener.enterObjectName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitObjectName) {
             listener.exitObjectName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitObjectName) {
            return visitor.visitObjectName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ObjectNameOrBindingVariableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public regularIdentifier(): RegularIdentifierContext {
        return this.getRuleContext(0, RegularIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_objectNameOrBindingVariable;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterObjectNameOrBindingVariable) {
             listener.enterObjectNameOrBindingVariable(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitObjectNameOrBindingVariable) {
             listener.exitObjectNameOrBindingVariable(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitObjectNameOrBindingVariable) {
            return visitor.visitObjectNameOrBindingVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DirectoryNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_directoryName;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDirectoryName) {
             listener.enterDirectoryName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDirectoryName) {
             listener.exitDirectoryName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDirectoryName) {
            return visitor.visitDirectoryName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SchemaNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_schemaName;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSchemaName) {
             listener.enterSchemaName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSchemaName) {
             listener.exitSchemaName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSchemaName) {
            return visitor.visitSchemaName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GraphNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public regularIdentifier(): RegularIdentifierContext | null {
        return this.getRuleContext(0, RegularIdentifierContext);
    }
    public delimitedGraphName(): DelimitedGraphNameContext | null {
        return this.getRuleContext(0, DelimitedGraphNameContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_graphName;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGraphName) {
             listener.enterGraphName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGraphName) {
             listener.exitGraphName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGraphName) {
            return visitor.visitGraphName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DelimitedGraphNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOUBLE_QUOTED_CHARACTER_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE, 0);
    }
    public ACCENT_QUOTED_CHARACTER_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ACCENT_QUOTED_CHARACTER_SEQUENCE, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_delimitedGraphName;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDelimitedGraphName) {
             listener.enterDelimitedGraphName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDelimitedGraphName) {
             listener.exitDelimitedGraphName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDelimitedGraphName) {
            return visitor.visitDelimitedGraphName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GraphTypeNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_graphTypeName;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGraphTypeName) {
             listener.enterGraphTypeName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGraphTypeName) {
             listener.exitGraphTypeName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGraphTypeName) {
            return visitor.visitGraphTypeName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NodeTypeNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nodeTypeName;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNodeTypeName) {
             listener.enterNodeTypeName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNodeTypeName) {
             listener.exitNodeTypeName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNodeTypeName) {
            return visitor.visitNodeTypeName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EdgeTypeNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_edgeTypeName;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEdgeTypeName) {
             listener.enterEdgeTypeName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEdgeTypeName) {
             listener.exitEdgeTypeName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEdgeTypeName) {
            return visitor.visitEdgeTypeName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BindingTableNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public regularIdentifier(): RegularIdentifierContext | null {
        return this.getRuleContext(0, RegularIdentifierContext);
    }
    public delimitedBindingTableName(): DelimitedBindingTableNameContext | null {
        return this.getRuleContext(0, DelimitedBindingTableNameContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_bindingTableName;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterBindingTableName) {
             listener.enterBindingTableName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitBindingTableName) {
             listener.exitBindingTableName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitBindingTableName) {
            return visitor.visitBindingTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DelimitedBindingTableNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOUBLE_QUOTED_CHARACTER_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE, 0);
    }
    public ACCENT_QUOTED_CHARACTER_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ACCENT_QUOTED_CHARACTER_SEQUENCE, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_delimitedBindingTableName;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDelimitedBindingTableName) {
             listener.enterDelimitedBindingTableName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDelimitedBindingTableName) {
             listener.exitDelimitedBindingTableName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDelimitedBindingTableName) {
            return visitor.visitDelimitedBindingTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcedureNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_procedureName;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterProcedureName) {
             listener.enterProcedureName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitProcedureName) {
             listener.exitProcedureName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitProcedureName) {
            return visitor.visitProcedureName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LabelNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_labelName;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterLabelName) {
             listener.enterLabelName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitLabelName) {
             listener.exitLabelName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitLabelName) {
            return visitor.visitLabelName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_propertyName;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPropertyName) {
             listener.enterPropertyName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPropertyName) {
             listener.exitPropertyName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPropertyName) {
            return visitor.visitPropertyName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_fieldName;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterFieldName) {
             listener.enterFieldName(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitFieldName) {
             listener.exitFieldName(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitFieldName) {
            return visitor.visitFieldName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElementVariableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bindingVariable(): BindingVariableContext {
        return this.getRuleContext(0, BindingVariableContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_elementVariable;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterElementVariable) {
             listener.enterElementVariable(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitElementVariable) {
             listener.exitElementVariable(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitElementVariable) {
            return visitor.visitElementVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathVariableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bindingVariable(): BindingVariableContext {
        return this.getRuleContext(0, BindingVariableContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_pathVariable;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterPathVariable) {
             listener.enterPathVariable(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitPathVariable) {
             listener.exitPathVariable(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitPathVariable) {
            return visitor.visitPathVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubpathVariableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public regularIdentifier(): RegularIdentifierContext {
        return this.getRuleContext(0, RegularIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_subpathVariable;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterSubpathVariable) {
             listener.enterSubpathVariable(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitSubpathVariable) {
             listener.exitSubpathVariable(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitSubpathVariable) {
            return visitor.visitSubpathVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BindingVariableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public regularIdentifier(): RegularIdentifierContext {
        return this.getRuleContext(0, RegularIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_bindingVariable;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterBindingVariable) {
             listener.enterBindingVariable(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitBindingVariable) {
             listener.exitBindingVariable(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitBindingVariable) {
            return visitor.visitBindingVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsignedLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unsignedNumericLiteral(): UnsignedNumericLiteralContext | null {
        return this.getRuleContext(0, UnsignedNumericLiteralContext);
    }
    public generalLiteral(): GeneralLiteralContext | null {
        return this.getRuleContext(0, GeneralLiteralContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_unsignedLiteral;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterUnsignedLiteral) {
             listener.enterUnsignedLiteral(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitUnsignedLiteral) {
             listener.exitUnsignedLiteral(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitUnsignedLiteral) {
            return visitor.visitUnsignedLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GeneralLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BOOLEAN_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.BOOLEAN_LITERAL, 0);
    }
    public characterStringLiteral(): CharacterStringLiteralContext | null {
        return this.getRuleContext(0, CharacterStringLiteralContext);
    }
    public BYTE_STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.BYTE_STRING_LITERAL, 0);
    }
    public temporalLiteral(): TemporalLiteralContext | null {
        return this.getRuleContext(0, TemporalLiteralContext);
    }
    public durationLiteral(): DurationLiteralContext | null {
        return this.getRuleContext(0, DurationLiteralContext);
    }
    public nullLiteral(): NullLiteralContext | null {
        return this.getRuleContext(0, NullLiteralContext);
    }
    public listLiteral(): ListLiteralContext | null {
        return this.getRuleContext(0, ListLiteralContext);
    }
    public recordLiteral(): RecordLiteralContext | null {
        return this.getRuleContext(0, RecordLiteralContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_generalLiteral;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterGeneralLiteral) {
             listener.enterGeneralLiteral(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitGeneralLiteral) {
             listener.exitGeneralLiteral(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitGeneralLiteral) {
            return visitor.visitGeneralLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TemporalLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dateLiteral(): DateLiteralContext | null {
        return this.getRuleContext(0, DateLiteralContext);
    }
    public timeLiteral(): TimeLiteralContext | null {
        return this.getRuleContext(0, TimeLiteralContext);
    }
    public datetimeLiteral(): DatetimeLiteralContext | null {
        return this.getRuleContext(0, DatetimeLiteralContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_temporalLiteral;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTemporalLiteral) {
             listener.enterTemporalLiteral(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTemporalLiteral) {
             listener.exitTemporalLiteral(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTemporalLiteral) {
            return visitor.visitTemporalLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DateLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATE(): antlr.TerminalNode {
        return this.getToken(GQLParser.DATE, 0)!;
    }
    public dateString(): DateStringContext {
        return this.getRuleContext(0, DateStringContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_dateLiteral;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDateLiteral) {
             listener.enterDateLiteral(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDateLiteral) {
             listener.exitDateLiteral(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDateLiteral) {
            return visitor.visitDateLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimeLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TIME(): antlr.TerminalNode {
        return this.getToken(GQLParser.TIME, 0)!;
    }
    public timeString(): TimeStringContext {
        return this.getRuleContext(0, TimeStringContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_timeLiteral;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTimeLiteral) {
             listener.enterTimeLiteral(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTimeLiteral) {
             listener.exitTimeLiteral(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTimeLiteral) {
            return visitor.visitTimeLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatetimeLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public datetimeString(): DatetimeStringContext {
        return this.getRuleContext(0, DatetimeStringContext)!;
    }
    public DATETIME(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.DATETIME, 0);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TIMESTAMP, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_datetimeLiteral;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDatetimeLiteral) {
             listener.enterDatetimeLiteral(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDatetimeLiteral) {
             listener.exitDatetimeLiteral(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDatetimeLiteral) {
            return visitor.visitDatetimeLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public listValueConstructorByEnumeration(): ListValueConstructorByEnumerationContext {
        return this.getRuleContext(0, ListValueConstructorByEnumerationContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_listLiteral;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterListLiteral) {
             listener.enterListLiteral(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitListLiteral) {
             listener.exitListLiteral(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitListLiteral) {
            return visitor.visitListLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RecordLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public recordConstructor(): RecordConstructorContext {
        return this.getRuleContext(0, RecordConstructorContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_recordLiteral;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterRecordLiteral) {
             listener.enterRecordLiteral(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitRecordLiteral) {
             listener.exitRecordLiteral(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitRecordLiteral) {
            return visitor.visitRecordLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public regularIdentifier(): RegularIdentifierContext | null {
        return this.getRuleContext(0, RegularIdentifierContext);
    }
    public DOUBLE_QUOTED_CHARACTER_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE, 0);
    }
    public ACCENT_QUOTED_CHARACTER_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ACCENT_QUOTED_CHARACTER_SEQUENCE, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_identifier;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterIdentifier) {
             listener.enterIdentifier(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitIdentifier) {
             listener.exitIdentifier(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RegularIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REGULAR_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.REGULAR_IDENTIFIER, 0);
    }
    public nonReservedWords(): NonReservedWordsContext | null {
        return this.getRuleContext(0, NonReservedWordsContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_regularIdentifier;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterRegularIdentifier) {
             listener.enterRegularIdentifier(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitRegularIdentifier) {
             listener.exitRegularIdentifier(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitRegularIdentifier) {
            return visitor.visitRegularIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimeZoneStringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public characterStringLiteral(): CharacterStringLiteralContext {
        return this.getRuleContext(0, CharacterStringLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_timeZoneString;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTimeZoneString) {
             listener.enterTimeZoneString(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTimeZoneString) {
             listener.exitTimeZoneString(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTimeZoneString) {
            return visitor.visitTimeZoneString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CharacterStringLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SINGLE_QUOTED_CHARACTER_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.SINGLE_QUOTED_CHARACTER_SEQUENCE, 0);
    }
    public DOUBLE_QUOTED_CHARACTER_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_characterStringLiteral;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterCharacterStringLiteral) {
             listener.enterCharacterStringLiteral(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitCharacterStringLiteral) {
             listener.exitCharacterStringLiteral(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitCharacterStringLiteral) {
            return visitor.visitCharacterStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsignedNumericLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public exactNumericLiteral(): ExactNumericLiteralContext | null {
        return this.getRuleContext(0, ExactNumericLiteralContext);
    }
    public approximateNumericLiteral(): ApproximateNumericLiteralContext | null {
        return this.getRuleContext(0, ApproximateNumericLiteralContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_unsignedNumericLiteral;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterUnsignedNumericLiteral) {
             listener.enterUnsignedNumericLiteral(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitUnsignedNumericLiteral) {
             listener.exitUnsignedNumericLiteral(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitUnsignedNumericLiteral) {
            return visitor.visitUnsignedNumericLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExactNumericLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX, 0);
    }
    public UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX, 0);
    }
    public UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX, 0);
    }
    public UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX, 0);
    }
    public unsignedInteger(): UnsignedIntegerContext | null {
        return this.getRuleContext(0, UnsignedIntegerContext);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_exactNumericLiteral;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterExactNumericLiteral) {
             listener.enterExactNumericLiteral(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitExactNumericLiteral) {
             listener.exitExactNumericLiteral(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitExactNumericLiteral) {
            return visitor.visitExactNumericLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ApproximateNumericLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX, 0);
    }
    public UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX, 0);
    }
    public UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX, 0);
    }
    public UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_approximateNumericLiteral;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterApproximateNumericLiteral) {
             listener.enterApproximateNumericLiteral(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitApproximateNumericLiteral) {
             listener.exitApproximateNumericLiteral(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitApproximateNumericLiteral) {
            return visitor.visitApproximateNumericLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsignedIntegerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNSIGNED_DECIMAL_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0);
    }
    public UNSIGNED_HEXADECIMAL_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UNSIGNED_HEXADECIMAL_INTEGER, 0);
    }
    public UNSIGNED_OCTAL_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UNSIGNED_OCTAL_INTEGER, 0);
    }
    public UNSIGNED_BINARY_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UNSIGNED_BINARY_INTEGER, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_unsignedInteger;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterUnsignedInteger) {
             listener.enterUnsignedInteger(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitUnsignedInteger) {
             listener.exitUnsignedInteger(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitUnsignedInteger) {
            return visitor.visitUnsignedInteger(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsignedDecimalIntegerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNSIGNED_DECIMAL_INTEGER(): antlr.TerminalNode {
        return this.getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_unsignedDecimalInteger;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterUnsignedDecimalInteger) {
             listener.enterUnsignedDecimalInteger(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitUnsignedDecimalInteger) {
             listener.exitUnsignedDecimalInteger(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitUnsignedDecimalInteger) {
            return visitor.visitUnsignedDecimalInteger(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NullLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULL_KW(): antlr.TerminalNode {
        return this.getToken(GQLParser.NULL_KW, 0)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nullLiteral;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNullLiteral) {
             listener.enterNullLiteral(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNullLiteral) {
             listener.exitNullLiteral(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNullLiteral) {
            return visitor.visitNullLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DateStringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public characterStringLiteral(): CharacterStringLiteralContext {
        return this.getRuleContext(0, CharacterStringLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_dateString;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDateString) {
             listener.enterDateString(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDateString) {
             listener.exitDateString(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDateString) {
            return visitor.visitDateString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimeStringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public characterStringLiteral(): CharacterStringLiteralContext {
        return this.getRuleContext(0, CharacterStringLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_timeString;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterTimeString) {
             listener.enterTimeString(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitTimeString) {
             listener.exitTimeString(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitTimeString) {
            return visitor.visitTimeString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatetimeStringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public characterStringLiteral(): CharacterStringLiteralContext {
        return this.getRuleContext(0, CharacterStringLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_datetimeString;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDatetimeString) {
             listener.enterDatetimeString(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDatetimeString) {
             listener.exitDatetimeString(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDatetimeString) {
            return visitor.visitDatetimeString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DurationLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DURATION(): antlr.TerminalNode {
        return this.getToken(GQLParser.DURATION, 0)!;
    }
    public durationString(): DurationStringContext {
        return this.getRuleContext(0, DurationStringContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_durationLiteral;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDurationLiteral) {
             listener.enterDurationLiteral(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDurationLiteral) {
             listener.exitDurationLiteral(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDurationLiteral) {
            return visitor.visitDurationLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DurationStringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public characterStringLiteral(): CharacterStringLiteralContext {
        return this.getRuleContext(0, CharacterStringLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_durationString;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterDurationString) {
             listener.enterDurationString(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitDurationString) {
             listener.exitDurationString(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitDurationString) {
            return visitor.visitDurationString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NodeSynonymContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NODE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NODE, 0);
    }
    public VERTEX(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.VERTEX, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nodeSynonym;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNodeSynonym) {
             listener.enterNodeSynonym(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNodeSynonym) {
             listener.exitNodeSynonym(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNodeSynonym) {
            return visitor.visitNodeSynonym(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EdgesSynonymContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EDGES(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.EDGES, 0);
    }
    public RELATIONSHIPS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RELATIONSHIPS, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_edgesSynonym;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEdgesSynonym) {
             listener.enterEdgesSynonym(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEdgesSynonym) {
             listener.exitEdgesSynonym(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEdgesSynonym) {
            return visitor.visitEdgesSynonym(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EdgeSynonymContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EDGE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.EDGE, 0);
    }
    public RELATIONSHIP(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RELATIONSHIP, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_edgeSynonym;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterEdgeSynonym) {
             listener.enterEdgeSynonym(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitEdgeSynonym) {
             listener.exitEdgeSynonym(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitEdgeSynonym) {
            return visitor.visitEdgeSynonym(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonReservedWordsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACYCLIC(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ACYCLIC, 0);
    }
    public BINDING(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.BINDING, 0);
    }
    public BINDINGS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.BINDINGS, 0);
    }
    public CONNECTING(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.CONNECTING, 0);
    }
    public DESTINATION(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.DESTINATION, 0);
    }
    public DIFFERENT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.DIFFERENT, 0);
    }
    public DIRECTED(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.DIRECTED, 0);
    }
    public EDGE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.EDGE, 0);
    }
    public EDGES(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.EDGES, 0);
    }
    public ELEMENT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ELEMENT, 0);
    }
    public ELEMENTS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ELEMENTS, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.FIRST, 0);
    }
    public GRAPH(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.GRAPH, 0);
    }
    public GROUPS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.GROUPS, 0);
    }
    public KEEP(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.KEEP, 0);
    }
    public LABEL(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LABEL, 0);
    }
    public LABELED(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LABELED, 0);
    }
    public LABELS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LABELS, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.LAST, 0);
    }
    public NFC(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NFC, 0);
    }
    public NFD(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NFD, 0);
    }
    public NFKC(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NFKC, 0);
    }
    public NFKD(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NFKD, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NO, 0);
    }
    public NODE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NODE, 0);
    }
    public NORMALIZED(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.NORMALIZED, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ONLY, 0);
    }
    public ORDINALITY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ORDINALITY, 0);
    }
    public PROPERTY(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.PROPERTY, 0);
    }
    public READ(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.READ, 0);
    }
    public RELATIONSHIP(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RELATIONSHIP, 0);
    }
    public RELATIONSHIPS(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.RELATIONSHIPS, 0);
    }
    public REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.REPEATABLE, 0);
    }
    public SHORTEST(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.SHORTEST, 0);
    }
    public SIMPLE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.SIMPLE, 0);
    }
    public SOURCE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.SOURCE, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TABLE, 0);
    }
    public TEMP(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TEMP, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TO, 0);
    }
    public TRAIL(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TRAIL, 0);
    }
    public TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TRANSACTION, 0);
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.TYPE, 0);
    }
    public UNDIRECTED(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.UNDIRECTED, 0);
    }
    public VERTEX(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.VERTEX, 0);
    }
    public WALK(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.WALK, 0);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.WITHOUT, 0);
    }
    public WRITE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.WRITE, 0);
    }
    public ZONE(): antlr.TerminalNode | null {
        return this.getToken(GQLParser.ZONE, 0);
    }
    public override get ruleIndex(): number {
        return GQLParser.RULE_nonReservedWords;
    }
    public override enterRule(listener: GQLListener): void {
        if(listener.enterNonReservedWords) {
             listener.enterNonReservedWords(this);
        }
    }
    public override exitRule(listener: GQLListener): void {
        if(listener.exitNonReservedWords) {
             listener.exitNonReservedWords(this);
        }
    }
    public override accept<Result>(visitor: GQLVisitor<Result>): Result | null {
        if (visitor.visitNonReservedWords) {
            return visitor.visitNonReservedWords(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
